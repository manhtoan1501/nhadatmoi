{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\manh nhan\\\\Desktop\\\\new_ndm\\\\components\\\\Chat\\\\Index.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Popper from '@material-ui/core/Popper';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { Element, scroller } from 'react-scroll';\nimport _ from 'lodash';\nimport { Grid, InputBase, Fade, Typography, Paper, CardHeader, Avatar, Divider, Input, IconButton, Hidden } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport TagFacesIcon from '@material-ui/icons/TagFaces';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport CloseIcon from '@material-ui/icons/Close';\nimport SendIcon from '@material-ui/icons/Send';\nimport { dataEmoji, giphyDefault, useStyles, themeTextFieldAdmin, themeTextFieldUser, StyledBadge, themeInput, themeInputBase, useStylesBootstrap } from \"./constant\";\nimport { create } from 'jss';\nimport rtl from 'jss-rtl';\nimport axios from \"axios\";\nimport { apiBaseURL } from \"../../constants\";\nimport \"cross-fetch/polyfill\";\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { apolloClient } from \"../../utils\";\nimport { CREATE_MESSAGE } from \"../../graphql/chat/mutation\";\nimport { GET_LIST_MESSAGE, GET_MESSAGE_BY_ID } from \"../../graphql/chat/queries\";\nvar client = axios.create({\n  baseURL: apiBaseURL,\n  timeout: 30000\n});\nimport moment from \"moment\";\nimport 'moment/locale/es';\nmoment.locale('vi'); // @ts-ignore\n\nimport { jssPreset } from '@material-ui/core/styles';\nvar jss = create({\n  plugins: [].concat(_toConsumableArray(jssPreset().plugins), [rtl()])\n});\n\nfunction BootstrapTooltip(props) {\n  var classes = useStylesBootstrap();\n  return __jsx(Tooltip, _extends({\n    arrow: true,\n    classes: classes\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }));\n}\n\n;\n;\n[];\n\nvar Chat = function Chat(props) {\n  var classes = useStyles();\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      placement = _React$useState4[0],\n      setPlacement = _React$useState4[1];\n\n  var _React$useState5 = React.useState(true),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      internet = _React$useState6[0],\n      setInternet = _React$useState6[1];\n\n  var _React$useState7 = React.useState(false),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      texting = _React$useState8[0],\n      setTexting = _React$useState8[1];\n\n  var _React$useState9 = React.useState(),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      giphyData = _React$useState10[0],\n      setGiphyData = _React$useState10[1];\n\n  var _React$useState11 = React.useState(false),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      openEmojiGiphy = _React$useState12[0],\n      setOpenEmojiGiphy = _React$useState12[1];\n\n  var _React$useState13 = React.useState(\"\"),\n      _React$useState14 = _slicedToArray(_React$useState13, 2),\n      valueSearchGiphy = _React$useState14[0],\n      setValueSearchGiphy = _React$useState14[1];\n\n  var _React$useState15 = React.useState(\"https://image.crisp.chat/avatar/operator/da8d4459-5ea3-4119-bca1-9170f49ee69c/240/?1585999578742&quot\"),\n      _React$useState16 = _slicedToArray(_React$useState15, 2),\n      avatarImage = _React$useState16[0],\n      setAvatarImage = _React$useState16[1];\n\n  var _React$useState17 = React.useState(\"\"),\n      _React$useState18 = _slicedToArray(_React$useState17, 2),\n      valueInput = _React$useState18[0],\n      setValueInput = _React$useState18[1];\n\n  var _React$useState19 = React.useState(false),\n      _React$useState20 = _slicedToArray(_React$useState19, 2),\n      viewEmoji = _React$useState20[0],\n      setViewEmoji = _React$useState20[1];\n\n  var _React$useState21 = React.useState(true),\n      _React$useState22 = _slicedToArray(_React$useState21, 2),\n      reload = _React$useState22[0],\n      setReload = _React$useState22[1];\n\n  var _React$useState23 = React.useState(true),\n      _React$useState24 = _slicedToArray(_React$useState23, 2),\n      checkLogin = _React$useState24[0],\n      setCheckLogin = _React$useState24[1];\n\n  var _React$useState25 = React.useState(\"\"),\n      _React$useState26 = _slicedToArray(_React$useState25, 2),\n      userId = _React$useState26[0],\n      setUserId = _React$useState26[1];\n\n  var _React$useState27 = React.useState(),\n      _React$useState28 = _slicedToArray(_React$useState27, 2),\n      conversations = _React$useState28[0],\n      setConversations = _React$useState28[1];\n\n  var _React$useState29 = React.useState(),\n      _React$useState30 = _slicedToArray(_React$useState29, 2),\n      conversation = _React$useState30[0],\n      setConversation = _React$useState30[1];\n\n  var _React$useState31 = React.useState([]),\n      _React$useState32 = _slicedToArray(_React$useState31, 2),\n      chat = _React$useState32[0],\n      setChat = _React$useState32[1];\n\n  var _React$useState33 = React.useState(\"\"),\n      _React$useState34 = _slicedToArray(_React$useState33, 2),\n      name = _React$useState34[0],\n      setName = _React$useState34[1];\n\n  var _React$useState35 = React.useState(\"\"),\n      _React$useState36 = _slicedToArray(_React$useState35, 2),\n      last_activity = _React$useState36[0],\n      setLastActivity = _React$useState36[1];\n\n  var _React$useState37 = React.useState(\"\"),\n      _React$useState38 = _slicedToArray(_React$useState37, 2),\n      chatId = _React$useState38[0],\n      setChatId = _React$useState38[1];\n\n  var onCloseChat = function onCloseChat() {\n    setOpenEmojiGiphy(false);\n    setOpen(false);\n  };\n\n  var checkUserLogin = function checkUserLogin() {\n    if (props.userLogin) {\n      setCheckLogin(true);\n    } else {\n      setCheckLogin(false);\n    }\n  };\n\n  var senMessageChat = function senMessageChat(value, url) {\n    return _regeneratorRuntime.async(function senMessageChat$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            chat.push({\n              id: chatId,\n              send_user_id: props.userLogin,\n              message: {\n                text: value,\n                attachment: {\n                  type: \"\",\n                  payload: {\n                    url: url\n                  }\n                }\n              },\n              status_check: 0,\n              send_at: String(new Date().getTime()),\n              read_at: String(new Date().getTime())\n            });\n            setChat(chat);\n            apolloClient.mutate({\n              mutation: CREATE_MESSAGE,\n              variables: {\n                \"input\": {\n                  \"target\": userId,\n                  \"message\": {\n                    \"text\": \"\".concat(value),\n                    \"attachment\": {\n                      \"type\": \"\",\n                      \"payload\": {\n                        \"url\": \"\".concat(url)\n                      }\n                    }\n                  }\n                }\n              }\n            }).then(function (response) {});\n            setReload(!reload);\n            setValueInput(\"\");\n            setScrollTo();\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, _Promise);\n  };\n\n  var renderHeader = function renderHeader() {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, __jsx(CardHeader, {\n      className: classes.header,\n      avatar: __jsx(StyledBadge, {\n        overlap: \"circle\",\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'right'\n        },\n        variant: \"standard\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, __jsx(Avatar, {\n        src: avatarImage,\n        className: classes.sizeAvatarSmall,\n        alt: \"nhadatmoi.net\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      })),\n      title: name,\n      subheader: __jsx(Typography, {\n        variant: \"caption\",\n        align: \"center\",\n        className: classes.timeWork,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, \"Ho\\u1EA1t \\u0111\\u1ED9ng: \", moment(Number(last_activity)).format('DD/MM/YYYY')),\n      action: __jsx(IconButton, {\n        color: \"inherit\",\n        \"aria-label\": \"settings\",\n        onClick: function onClick() {\n          return onCloseChat();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, __jsx(CloseIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }));\n  };\n\n  var searchGiphy = function searchGiphy(event) {\n    var url, getData;\n    return _regeneratorRuntime.async(function searchGiphy$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            setValueSearchGiphy(event.target.value);\n            url = \"https://api.giphy.com/v1/gifs/search?api_key=UgTMyvovmg74m8fPN6qYiB623nwS1IPc&q=\".concat(event.target.value, \"&limit=20&offset=0&rating=G&lang=vi\");\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(axios.get(url, {}).then(function (response) {\n              setGiphyData(response.data.data);\n            }));\n\n          case 4:\n            getData = _context2.sent;\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, _Promise);\n  };\n\n  var dataSearch = [];\n\n  if (_Array$isArray(giphyData)) {\n    giphyData.map(function (item, index) {\n      dataSearch.push({\n        image: {\n          url: item.images.fixed_width.url,\n          height: item.images.fixed_width.height,\n          width: item.images.fixed_width.width\n        }\n      });\n    });\n  }\n\n  ; // Gửi ảnh emoji giphy \n\n  var setItemGiphy = function setItemGiphy(index, name) {\n    setOpenEmojiGiphy(!openEmojiGiphy);\n\n    if (name == \"giphyDefault\") {\n      senMessageChat(\"\", giphyDefault[index].image.url);\n    } else if (name == \"dataSearch\") {\n      senMessageChat(\"\", dataSearch[index].image.url);\n    }\n  };\n\n  var onClickEmoji = function onClickEmoji(index) {\n    valueInput = valueInput + dataEmoji[index][\"native\"];\n    setValueInput(valueInput);\n  };\n\n  var renderEmoji = function renderEmoji() {\n    return __jsx(\"div\", {\n      className: classes.overflowHeightEmoji,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, dataEmoji.map(function (item, index) {\n      return __jsx(\"div\", {\n        onClick: function onClick() {\n          return onClickEmoji(index);\n        },\n        key: index,\n        className: classes.itemEmoji,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, item[\"native\"]);\n    }));\n  };\n\n  var renderGiphy = function renderGiphy() {\n    return __jsx(\"div\", {\n      className: classes.viewWidthGiphy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: classes.searchGiphy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, __jsx(SearchIcon, {\n      className: classes.sizeSearchIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }), __jsx(ThemeProvider, {\n      theme: themeInputBase,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, __jsx(InputBase, {\n      onChange: function onChange(e) {\n        return searchGiphy(e);\n      },\n      className: classes.inputBaseGiphy,\n      placeholder: \"T\\xECm ki\\u1EBFm ...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }))), __jsx(\"div\", {\n      className: classes.viewSizeGiphy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, valueSearchGiphy ? dataSearch.map(function (item, index) {\n      return __jsx(\"div\", {\n        className: classes.itemGiphy,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      }, __jsx(\"img\", {\n        className: classes.imgListGiphy,\n        alt: \"giphy\",\n        src: item.image.url,\n        onClick: function onClick() {\n          return setItemGiphy(index, \"dataSearch\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }));\n    }) : giphyDefault.map(function (item, index) {\n      // view giphy default\n      return __jsx(\"div\", {\n        className: classes.itemGiphy,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }, __jsx(\"img\", {\n        className: classes.imgListGiphy,\n        alt: \"giphy\",\n        src: item.image.url,\n        onClick: function onClick() {\n          return setItemGiphy(index, \"giphyDefault\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }));\n    })));\n  };\n\n  var renderEmojiGiphy = function renderEmojiGiphy() {\n    return __jsx(\"div\", {\n      className: classes.emojiGiphy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: classes.marinButtonEmojiGiphy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, __jsx(\"button\", {\n      className: classes.buttonEmojiGiphy,\n      onClick: function onClick() {\n        return setViewEmoji(true);\n      },\n      style: {\n        backgroundColor: !viewEmoji ? \"#aaa\" : \"\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, \" Bi\\u1EC3u t\\u01B0\\u1EE3ng\"), __jsx(\"button\", {\n      className: classes.buttonEmojiGiphy,\n      onClick: function onClick() {\n        return setViewEmoji(false);\n      },\n      style: {\n        backgroundColor: viewEmoji ? \"#aaa\" : \"\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, \" \\u1EA2nh \\u0111\\u1ED9ng\")), viewEmoji ? renderEmoji() : renderGiphy());\n  };\n\n  var getConversations = function getConversations() {\n    var response;\n    return _regeneratorRuntime.async(function getConversations$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(apolloClient.query({\n              query: GET_LIST_MESSAGE,\n              variables: {\n                \"page\": 1,\n                \"limit\": 5\n              }\n            }).then(function (response) {\n              var conversations = _.get(response, \"data.conversations\", {});\n\n              if (conversations) {\n                setConversations(conversations);\n              }\n            }));\n\n          case 2:\n            response = _context3.sent;\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, _Promise);\n  };\n\n  React.useEffect(function () {\n    checkUserLogin();\n    getConversations();\n  }, []);\n\n  var renderImage = function renderImage(send_at, url, role) {\n    return __jsx(\"div\", {\n      className: role === 'take' ? classes.viewContentImageTake : classes.viewContentImageSend,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, __jsx(BootstrapTooltip, {\n      title: moment(Number(send_at)).fromNow(),\n      placement: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, __jsx(\"img\", {\n      src: url,\n      className: classes.imgGiphy,\n      alt: \"giphy\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    })));\n  };\n\n  var renderTextField = function renderTextField(send_at, text, role) {\n    return __jsx(BootstrapTooltip, {\n      title: moment(Number(send_at)).fromNow(),\n      placement: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: role == \"take\" ? classes.viewTextTake : classes.viewTextSend,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, text.trim()));\n  };\n\n  var renderText = function renderText(send_at, text, role) {\n    if (role === 'take') {\n      return renderTextField(send_at, text, role);\n    }\n\n    return __jsx(\"div\", {\n      className: classes.textFieldUserChatContent,\n      dir: \"\".concat(text.length < 45 ? 'rtl' : \"\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, renderTextField(send_at, text, role));\n  };\n\n  var renderConversation = function renderConversation() {\n    var created_at = _.get(conversation, \"created_at\", \"\");\n\n    return __jsx(\"div\", {\n      className: openEmojiGiphy ? classes.openEG : classes.overflowHeightEG,\n      style: {\n        height: openEmojiGiphy ? \"230px\" : \"430px\"\n      },\n      id: 'ContainerElementID',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, __jsx(Element, {\n      name: \"myScrollToElement\",\n      id: \"test_ndm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, __jsx(Typography, {\n      align: \"center\",\n      className: classes.textSizeNewDate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, \" \", moment(Number(created_at)).format('LLL'), \" \"), __jsx(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }), _Array$isArray(chat) ? chat.map(function (element, count) {\n      var checkNewDate = false;\n      var oldDate = count > 0 ? moment(Number(chat[count - 1].send_at)).format('YYYY-MM-DD') : '';\n      var newDate = moment(Number(chat[count].send_at)).format('YYYY-MM-DD');\n\n      if (count > 0 && oldDate !== newDate) {\n        checkNewDate = true;\n      }\n\n      var url = _.get(element, \"message.attachment.payload.url\", \"\");\n\n      var text = _.get(element, \"message.text\", \"\");\n\n      var send_user_id = _.get(element, \"send_user_id\", \"\");\n\n      var send_at = _.get(element, \"send_at\", \"\");\n\n      var setViewAvatar = send_user_id == props.userLogin ? true : false;\n      return __jsx(\"div\", {\n        key: count,\n        style: {\n          display: \"block\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407\n        },\n        __self: this\n      }, checkNewDate && __jsx(Typography, {\n        align: \"center\",\n        className: classes.textSizeNewDate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408\n        },\n        __self: this\n      }, moment(Number(send_at)).format(\"LLL\"), \" \", __jsx(Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409\n        },\n        __self: this\n      })), send_user_id !== props.userLogin ? __jsx(ThemeProvider, {\n        theme: themeTextFieldAdmin,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: classes.viewAvatarChatContent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412\n        },\n        __self: this\n      }, setViewAvatar && __jsx(Avatar, {\n        className: classes.avatarAdminText,\n        alt: \"nhadatmoi.net\",\n        src: avatarImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413\n        },\n        __self: this\n      })), __jsx(\"div\", {\n        className: classes.textFieldChatContent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415\n        },\n        __self: this\n      }, url ? renderImage(send_at, url, \"take\") : renderText(send_at, text, \"take\"))) : __jsx(ThemeProvider, {\n        theme: themeTextFieldUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419\n        },\n        __self: this\n      }, url ? renderImage(send_at, url, \"send\") : renderText(send_at, text, \"send\")), __jsx(\"div\", {\n        className: classes.clearFloat,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423\n        },\n        __self: this\n      }));\n    }) : \"\", __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }, !internet && __jsx(\"p\", {\n      className: classes.errInternet,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }, __jsx(\"u\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }, \"Kh\\xF4ng th\\u1EC3 g\\u1EEDi tin nh\\u1EAFn n\\xE0y. Ki\\u1EC3m tra k\\u1EBFt n\\u1ED1i internet v\\xE0 th\\u1EED l\\u1EA1i\"))), __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }, \" \", texting && __jsx(\"p\", {\n      className: classes.texting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }, \"\\u0110ang nh\\u1EADp ...\"))));\n  };\n\n  var onClickOpenEmojiGiphy = function onClickOpenEmojiGiphy() {\n    setOpenEmojiGiphy(!openEmojiGiphy);\n    setViewEmoji(true);\n  };\n\n  var apiBaseURL = \"https://graph.nhadatmoi.net\";\n  var apiUpload = \"\".concat(apiBaseURL, \"/private_upload_image_app\");\n\n  var api = function api(method, url, data) {\n    return client.request({\n      data: _JSON$stringify(data),\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      method: method,\n      url: url,\n      withCredentials: true\n    }).then(function (response) {\n      return response.data;\n    });\n  };\n\n  var upLoadImage = function upLoadImage(files) {\n    var reader = new FileReader();\n    var file = files.target.files[0];\n    reader.readAsDataURL(file);\n\n    reader.onload = function () {\n      api(\"POST\", \"\".concat(apiUpload), {\n        base64_image: reader.result,\n        fileName: new Date().getTime() + \"\" + file.name,\n        typeUpload: \"ad_sell_lease\"\n      }).then(function (res) {\n        senMessageChat(\"\", res.location);\n      })[\"catch\"](function (err) {\n        alert('HTTP Error: ' + err.message);\n      });\n    };\n  };\n\n  var setOnKeyDown = function setOnKeyDown(event) {\n    if (event.keyCode == 13) {\n      senMessageChat(valueInput, \"\");\n      setValueInput(\"\");\n      setScrollTo();\n    }\n  };\n\n  var setScrollTo = function setScrollTo() {\n    var heightChatDiv = 0;\n    var elm = document.getElementById(\"test_ndm\");\n\n    if (elm) {\n      heightChatDiv = elm.offsetHeight;\n    }\n\n    scroller.scrollTo('myScrollToElement', {\n      duration: 500,\n      delay: 100,\n      smooth: true,\n      containerId: 'ContainerElementID',\n      offset: heightChatDiv\n    });\n  };\n\n  var setChangeInput = function setChangeInput(value) {\n    setValueInput(value);\n  };\n\n  var renderInput = function renderInput() {\n    return __jsx(Paper, {\n      component: \"form\",\n      className: classes.inputBase,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504\n      },\n      __self: this\n    }, __jsx(ThemeProvider, {\n      theme: themeInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, __jsx(Input, {\n      fullWidth: true,\n      disabled: !internet,\n      className: classes.inputText,\n      margin: \"dense\",\n      id: \"outlined-basic\",\n      autoFocus: true,\n      value: valueInput,\n      multiline: true,\n      onChange: function onChange(e) {\n        return setChangeInput(e.target.value);\n      },\n      onKeyDown: function onKeyDown(e) {\n        return setOnKeyDown(e);\n      },\n      placeholder: \"Nh\\u1EADp tin nh\\u1EAFn ...\",\n      autoComplete: \"false\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506\n      },\n      __self: this\n    }), openEmojiGiphy ? __jsx(BootstrapTooltip, {\n      title: \"Ch\\xE8n bi\\u1EC3u t\\u01B0\\u1EE3ng\",\n      placement: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    }, __jsx(ExpandMoreIcon, {\n      className: classes.sizeIcon,\n      onClick: onClickOpenEmojiGiphy,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522\n      },\n      __self: this\n    })) : __jsx(BootstrapTooltip, {\n      title: \"Ch\\xE8n bi\\u1EC3u t\\u01B0\\u1EE3ng\",\n      placement: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524\n      },\n      __self: this\n    }, __jsx(TagFacesIcon, {\n      className: classes.sizeIcon,\n      onClick: onClickOpenEmojiGiphy,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525\n      },\n      __self: this\n    })), valueInput ? __jsx(BootstrapTooltip, {\n      title: \"G\\u1EEDi tin nh\\u1EAFn\",\n      placement: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529\n      },\n      __self: this\n    }, __jsx(SendIcon, {\n      onClick: function onClick() {\n        return senMessageChat(valueInput, \"\");\n      },\n      className: classes.sizeIcon,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530\n      },\n      __self: this\n    })) : __jsx(BootstrapTooltip, {\n      title: \"Th\\xEAm t\\u1EADp tin\",\n      placement: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: classes.inputWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533\n      },\n      __self: this\n    }, __jsx(AddCircleOutlineIcon, {\n      className: classes.sizeIcon,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }), __jsx(\"input\", {\n      type: \"file\",\n      className: classes.fileInput,\n      onChange: upLoadImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    })))));\n  };\n\n  var viewChat = function viewChat() {\n    var openChat = open && checkLogin ? true : false;\n    return __jsx(Popper, {\n      open: openChat,\n      placement: placement,\n      transition: true,\n      className: classes.viewChatImpostant,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }, function (_ref) {\n      var TransitionProps = _ref.TransitionProps;\n      return __jsx(Fade, _extends({}, TransitionProps, {\n        timeout: 300,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 549\n        },\n        __self: this\n      }), __jsx(Paper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 550\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: classes.viewChat,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 551\n        },\n        __self: this\n      }, renderHeader(), renderConversation(), openEmojiGiphy && renderEmojiGiphy(), renderInput())));\n    });\n  };\n\n  var handleClick = function handleClick(newPlacement) {\n    setOpen(true);\n    setPlacement(newPlacement);\n  };\n\n  var getConversation = function getConversation(conversationId) {\n    var conversation, chat, avatar, userId, name, last_activity, status;\n    return _regeneratorRuntime.async(function getConversation$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(apolloClient.query({\n              query: GET_MESSAGE_BY_ID,\n              variables: {\n                \"id\": conversationId\n              }\n            }).then(function (response) {\n              var conversation = _.get(response, \"data.conversation\", {});\n\n              return conversation;\n            }));\n\n          case 2:\n            conversation = _context4.sent;\n            chat = _.get(conversation, \"chat\", []);\n            avatar = _.get(conversation, \"target.avatar\", \"\");\n            userId = _.get(conversation, \"target.id\", \"\");\n            name = _.get(conversation, \"target.first_name\", \"\") + _.get(conversation, \"target.last_name\", \"\");\n            last_activity = _.get(conversation, \"target.last_activity\", \"\");\n            status = _.get(conversation, \"target.status\", \"\");\n            setChat(chat);\n            setAvatarImage(avatar);\n            setChatId(conversationId);\n            setUserId(userId);\n            setName(name);\n            setLastActivity(last_activity);\n            setConversation(conversation);\n\n          case 16:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, _Promise);\n  };\n\n  var renderListAvatar = function renderListAvatar(item, index) {\n    var avatar = _.get(item, \"node.target.avatar\", \"\");\n\n    var name = _.get(item, \"node.target.first_name\", \"\") + _.get(item, \"node.target.last_name\", \"\");\n\n    var id = _.get(item, \"node.target.id\", \"\");\n\n    var status = _.get(item, \"node.target.status\", \"\");\n\n    var conversationId = _.get(item, \"node.id\", \"\");\n\n    if (!open) {\n      return __jsx(\"div\", {\n        key: index,\n        style: {\n          bottom: \"\".concat(index * 65 + 80, \"px\")\n        },\n        className: id === userId ? classes.renderAvatarBorderRadius : classes.renderAvatar,\n        onClick: function onClick() {\n          return getConversation(conversationId);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 601\n        },\n        __self: this\n      }, __jsx(BootstrapTooltip, {\n        title: name,\n        placement: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 607\n        },\n        __self: this\n      }, __jsx(StyledBadge, {\n        overlap: \"circle\",\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'right'\n        },\n        variant: status == \"offline\" ? \"standard\" : \"dot\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 608\n        },\n        __self: this\n      }, __jsx(Avatar, {\n        src: avatar,\n        onClick: function onClick() {\n          return handleClick(\"top-start\");\n        },\n        className: classes.large,\n        alt: \"name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 613\n        },\n        __self: this\n      }))));\n    }\n\n    return \"\";\n  };\n\n  var listAvatar = _.get(conversations, 'edges', []) || [];\n  return __jsx(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 629\n    },\n    __self: this\n  }, viewChat(), __jsx(Grid, {\n    container: true,\n    justify: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 631\n    },\n    __self: this\n  }, __jsx(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 632\n    },\n    __self: this\n  }, __jsx(Hidden, {\n    xsDown: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 633\n    },\n    __self: this\n  }, __jsx(React.Fragment, null, _Array$isArray(listAvatar) && listAvatar.map(function (item, index) {\n    return renderListAvatar(item, index);\n  }))), __jsx(Hidden, {\n    smUp: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 640\n    },\n    __self: this\n  }, __jsx(React.Fragment, null, _Array$isArray(listAvatar) && listAvatar.map(function (item, index) {\n    return renderListAvatar(item, index);\n  }))))));\n};\n\nexport default Chat;","map":{"version":3,"sources":["C:/Users/manh nhan/Desktop/new_ndm/components/Chat/Index.tsx"],"names":["React","Popper","ThemeProvider","Element","scroller","_","Grid","InputBase","Fade","Typography","Paper","CardHeader","Avatar","Divider","Input","IconButton","Hidden","SearchIcon","AddCircleOutlineIcon","TagFacesIcon","ExpandMoreIcon","CloseIcon","SendIcon","dataEmoji","giphyDefault","useStyles","themeTextFieldAdmin","themeTextFieldUser","StyledBadge","themeInput","themeInputBase","useStylesBootstrap","create","rtl","axios","apiBaseURL","Tooltip","apolloClient","CREATE_MESSAGE","GET_LIST_MESSAGE","GET_MESSAGE_BY_ID","client","baseURL","timeout","moment","locale","jssPreset","jss","plugins","BootstrapTooltip","props","classes","Chat","useState","open","setOpen","placement","setPlacement","internet","setInternet","texting","setTexting","giphyData","setGiphyData","openEmojiGiphy","setOpenEmojiGiphy","valueSearchGiphy","setValueSearchGiphy","avatarImage","setAvatarImage","valueInput","setValueInput","viewEmoji","setViewEmoji","reload","setReload","checkLogin","setCheckLogin","userId","setUserId","conversations","setConversations","conversation","setConversation","chat","setChat","name","setName","last_activity","setLastActivity","chatId","setChatId","onCloseChat","checkUserLogin","userLogin","senMessageChat","value","url","push","id","send_user_id","message","text","attachment","type","payload","status_check","send_at","String","Date","getTime","read_at","mutate","mutation","variables","then","response","setScrollTo","renderHeader","header","vertical","horizontal","sizeAvatarSmall","timeWork","Number","format","searchGiphy","event","target","get","data","getData","dataSearch","map","item","index","image","images","fixed_width","height","width","setItemGiphy","onClickEmoji","renderEmoji","overflowHeightEmoji","itemEmoji","renderGiphy","viewWidthGiphy","sizeSearchIcon","e","inputBaseGiphy","viewSizeGiphy","itemGiphy","imgListGiphy","renderEmojiGiphy","emojiGiphy","marinButtonEmojiGiphy","buttonEmojiGiphy","backgroundColor","getConversations","query","useEffect","renderImage","role","viewContentImageTake","viewContentImageSend","fromNow","imgGiphy","renderTextField","viewTextTake","viewTextSend","trim","renderText","textFieldUserChatContent","length","renderConversation","created_at","openEG","overflowHeightEG","textSizeNewDate","element","count","checkNewDate","oldDate","newDate","setViewAvatar","display","viewAvatarChatContent","avatarAdminText","textFieldChatContent","clearFloat","errInternet","onClickOpenEmojiGiphy","apiUpload","api","method","request","headers","withCredentials","upLoadImage","files","reader","FileReader","file","readAsDataURL","onload","base64_image","result","fileName","typeUpload","res","location","err","alert","setOnKeyDown","keyCode","heightChatDiv","elm","document","getElementById","offsetHeight","scrollTo","duration","delay","smooth","containerId","offset","setChangeInput","renderInput","inputBase","inputText","sizeIcon","inputWrapper","fileInput","viewChat","openChat","viewChatImpostant","TransitionProps","handleClick","newPlacement","getConversation","conversationId","avatar","status","renderListAvatar","bottom","renderAvatarBorderRadius","renderAvatar","large","listAvatar","root"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Popper, { PopperPlacementType } from '@material-ui/core/Popper';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport { Element , animateScroll as scroll, scrollSpy, scroller } from 'react-scroll';\r\nimport _ from 'lodash';\r\nimport { \r\n  Grid, \r\n  InputBase, \r\n  Fade,\r\n  Typography, \r\n  Paper, \r\n  CardHeader,\r\n  Avatar, \r\n  Divider, \r\n  Input, \r\n  IconButton,\r\n  Hidden,\r\n\r\n} from '@material-ui/core';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport TagFacesIcon from '@material-ui/icons/TagFaces';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport { \r\n  dataEmoji, \r\n  giphyDefault, \r\n  useStyles,\r\n  themeTextFieldAdmin, \r\n  themeTextFieldUser, \r\n  StyledBadge,\r\n  themeInput,\r\n  themeInputBase,\r\n  useStylesBootstrap, \r\n} from \"./constant\";\r\nimport { create } from 'jss';\r\nimport rtl from 'jss-rtl';\r\nimport axios, {Method} from \"axios\";\r\nimport {apiBaseURL} from \"../../constants\";\r\nimport \"cross-fetch/polyfill\";\r\nimport Tooltip, { TooltipProps } from '@material-ui/core/Tooltip';\r\nimport ApolloClient from \"apollo-boost\";\r\nimport {apolloClient} from \"../../utils\";\r\nimport { CREATE_MESSAGE } from \"../../graphql/chat/mutation\";\r\nimport { GET_LIST_MESSAGE, GET_MESSAGE_BY_ID } from \"../../graphql/chat/queries\";\r\nconst client = axios.create({ baseURL: apiBaseURL, timeout: 30000 });\r\nimport {FunctionComponent} from \"react\";\r\nimport moment from \"moment\";\r\nimport 'moment/locale/es';\r\nmoment.locale('vi');\r\n// @ts-ignore\r\nimport { jssPreset } from '@material-ui/core/styles';\r\nconst jss = create({ plugins: [...jssPreset().plugins, rtl()] });\r\n\r\nfunction BootstrapTooltip(props: TooltipProps) {\r\n  const classes = useStylesBootstrap()\r\n  return <Tooltip arrow classes={classes} {...props} />;\r\n};\r\n\r\ninterface ChatProps {\r\n  userLogin: string\r\n}\r\ninterface Conversation {\r\n  id: string\r\n  target: {\r\n    id: string\r\n    avatar: string\r\n    first_name: string\r\n    last_name: string\r\n    status: string\r\n    last_activity: string\r\n  }\r\n  chat: Chat[],\r\n  created_at: string\r\n  updated_at: string\r\n};\r\n\r\ninterface Chat {\r\n  id: string\r\n  send_user_id: string\r\n  message: {\r\n    text: string\r\n    attachment: {\r\n      type: string\r\n      payload:{\r\n        url: string\r\n      }\r\n    }\r\n  }\r\n  status_check: number\r\n  send_at: string\r\n  read_at: string\r\n}\r\n\r\ninterface Conversations {\r\n  conversations: Edges[]\r\n}\r\ninterface Edges {\r\n  node: {\r\n    id: string\r\n    target: {\r\n      id: string\r\n      avatar: string\r\n      first_name: string\r\n      last_name: string\r\n      status: string\r\n      last_activity: string\r\n    }\r\n  }\r\n}[]\r\n\r\nconst Chat: FunctionComponent<ChatProps> = (props: ChatProps) => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [placement, setPlacement] = React.useState<PopperPlacementType>();\r\n  const [internet, setInternet] = React.useState<boolean>(true);\r\n  const [texting, setTexting] = React.useState<boolean>(false);\r\n  const [giphyData, setGiphyData] = React.useState<any>();\r\n  const [openEmojiGiphy, setOpenEmojiGiphy] = React.useState<boolean>(false);\r\n  const [valueSearchGiphy, setValueSearchGiphy] = React.useState(\"\");\r\n  const [avatarImage, setAvatarImage] = React.useState(\"https://image.crisp.chat/avatar/operator/da8d4459-5ea3-4119-bca1-9170f49ee69c/240/?1585999578742&quot\");\r\n  let   [valueInput, setValueInput] = React.useState(\"\");\r\n  const [viewEmoji, setViewEmoji] = React.useState(false);\r\n  const [reload, setReload] = React.useState(true);\r\n  const [checkLogin, setCheckLogin] = React.useState<boolean>(true);\r\n  const [userId, setUserId] = React.useState(\"\");\r\n  const [conversations, setConversations] = React.useState<Conversations>();\r\n  const [conversation, setConversation] = React.useState<Conversation>();\r\n  const [chat, setChat] = React.useState<Chat[]>([])\r\n  const [name, setName] = React.useState(\"\");\r\n  const [last_activity, setLastActivity] = React.useState(\"\");\r\n  const [chatId, setChatId] = React.useState(\"\")\r\n\r\n  const onCloseChat = () => {\r\n    setOpenEmojiGiphy(false)\r\n    setOpen(false)\r\n  };\r\n\r\n  const checkUserLogin = () => {\r\n    if (props.userLogin) {\r\n      setCheckLogin(true)\r\n    } else {\r\n      setCheckLogin(false)\r\n    }\r\n  }\r\n\r\n  const senMessageChat = async (value: string, url: string)=> { \r\n    chat.push({\r\n      id: chatId,\r\n      send_user_id: props.userLogin,\r\n      message: {\r\n        text: value,\r\n        attachment: {\r\n          type: \"\",\r\n          payload: {\r\n            url: url\r\n          },\r\n        },\r\n      },\r\n      status_check: 0,\r\n      send_at: String(new Date().getTime()),\r\n      read_at: String(new Date().getTime()),\r\n    })\r\n\r\n    setChat(chat)\r\n\r\n    apolloClient.mutate({mutation: CREATE_MESSAGE, variables: {\r\n      \"input\": {\r\n        \"target\": userId,\r\n        \"message\": {\r\n          \"text\": `${value}`,\r\n          \"attachment\": {\r\n            \"type\": \"\",\r\n            \"payload\": {\r\n              \"url\" : `${url}`\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }})\r\n      .then((response: any) => {\r\n    })\r\n    setReload(!reload)\r\n    setValueInput(\"\")\r\n    setScrollTo()\r\n  };\r\n\r\n  const renderHeader = () => {\r\n    return (\r\n      <div >\r\n          <CardHeader\r\n            className={classes.header} \r\n            avatar={\r\n              <StyledBadge\r\n                overlap=\"circle\"\r\n                anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n                variant=\"standard\"\r\n              >\r\n                <Avatar src={avatarImage} className={classes.sizeAvatarSmall} alt=\"nhadatmoi.net\" />\r\n              </StyledBadge>\r\n            }\r\n            title={name}\r\n            subheader={ \r\n              <Typography variant=\"caption\" align=\"center\" className={classes.timeWork}>\r\n                Hoạt động: {moment(Number(last_activity)).format('DD/MM/YYYY')}\r\n              </Typography>\r\n            }\r\n            action={\r\n              <IconButton color='inherit' aria-label=\"settings\" onClick={() => onCloseChat()} >\r\n                <CloseIcon/>\r\n              </IconButton>\r\n            }\r\n          />\r\n      </div>\r\n    )\r\n  };\r\n\r\n  const searchGiphy = async (event: any)=>  { \r\n    setValueSearchGiphy(event.target.value)\r\n    let url = `https://api.giphy.com/v1/gifs/search?api_key=UgTMyvovmg74m8fPN6qYiB623nwS1IPc&q=${event.target.value}&limit=20&offset=0&rating=G&lang=vi`\r\n    let getData = await axios.get(url, {})\r\n    .then(function (response) {\r\n      setGiphyData(response.data.data)\r\n    })\r\n  };\r\n\r\n  let dataSearch: any = [];\r\n  if(Array.isArray(giphyData)){\r\n    giphyData.map((item: any, index: number) => {\r\n      dataSearch.push({ \r\n        image: {\r\n          url: item.images.fixed_width.url,\r\n          height: item.images.fixed_width.height,\r\n          width: item.images.fixed_width.width,\r\n        }})\r\n    })\r\n  };\r\n  \r\n  // Gửi ảnh emoji giphy \r\n  const setItemGiphy = (index: number, name: string) => {\r\n    setOpenEmojiGiphy(!openEmojiGiphy)\r\n    if(name == \"giphyDefault\") {\r\n      senMessageChat(\"\", giphyDefault[index].image.url)\r\n    } else if ( name == \"dataSearch\") {\r\n      senMessageChat(\"\", dataSearch[index].image.url)\r\n    }\r\n  };\r\n\r\n  const onClickEmoji = (index: number) => {\r\n    valueInput = valueInput +  dataEmoji[index].native\r\n    setValueInput(valueInput)\r\n  };\r\n\r\n  const renderEmoji = () => {\r\n    return ( \r\n      <div className={classes.overflowHeightEmoji}>\r\n        {dataEmoji.map((item: any, index: number) => {\r\n          return (\r\n            <div \r\n              onClick={() => onClickEmoji(index)} \r\n              key={index} \r\n              className={classes.itemEmoji}\r\n            >{item.native}</div>\r\n          )\r\n        })}\r\n      </div>\r\n    )  \r\n  };\r\n\r\n  const renderGiphy = () => {\r\n    return (\r\n      <div className={classes.viewWidthGiphy} >\r\n        <div className={classes.searchGiphy}>\r\n          <SearchIcon className={classes.sizeSearchIcon} />\r\n          <ThemeProvider theme={themeInputBase}>\r\n            <InputBase\r\n              onChange={(e) => searchGiphy(e)}\r\n              className={classes.inputBaseGiphy}\r\n              placeholder=\"Tìm kiếm ...\"\r\n            />\r\n          </ThemeProvider>\r\n        </div>\r\n        <div className={classes.viewSizeGiphy}>\r\n          {valueSearchGiphy \r\n            ? dataSearch.map((item: any, index: number) => {\r\n                return (\r\n                  <div className={classes.itemGiphy} >\r\n                    <img \r\n                      className={classes.imgListGiphy} \r\n                      alt=\"giphy\" \r\n                      src={item.image.url} \r\n                      onClick={() => setItemGiphy(index, \"dataSearch\")} \r\n                    />\r\n                  </div>\r\n                )\r\n              })\r\n            : giphyDefault.map((item: any, index: number) => { // view giphy default\r\n                return (\r\n                  <div className={classes.itemGiphy} >\r\n                    <img \r\n                      className={classes.imgListGiphy} \r\n                      alt=\"giphy\" \r\n                      src={item.image.url} \r\n                      onClick={() => setItemGiphy(index, \"giphyDefault\")} \r\n                    />\r\n                  </div>\r\n              )})\r\n          }\r\n        </div>\r\n      </div>\r\n    )\r\n  };\r\n\r\n  const renderEmojiGiphy = () => {\r\n    return (\r\n      <div className={classes.emojiGiphy}>\r\n        <div className={classes.marinButtonEmojiGiphy}>\r\n          <button \r\n            className={classes.buttonEmojiGiphy} \r\n            onClick={() => setViewEmoji(true)} \r\n            style={{ backgroundColor: !viewEmoji ? \"#aaa\" : \"\" }}\r\n            \r\n          > Biểu tượng</button>\r\n          <button \r\n            className={classes.buttonEmojiGiphy} \r\n            onClick={() => setViewEmoji(false)} \r\n            style={{ backgroundColor: viewEmoji ? \"#aaa\" : \"\" }}\r\n          > Ảnh động</button>\r\n        </div>\r\n        { viewEmoji ? renderEmoji() : renderGiphy()  }\r\n      </div>\r\n    )\r\n  };\r\n\r\n  const getConversations = async () => {\r\n    let response = await apolloClient.query({ query: GET_LIST_MESSAGE, variables: {\r\n        \"page\": 1,\r\n        \"limit\": 5\r\n      }})\r\n      .then((response: any) => {\r\n        let conversations = _.get(response, \"data.conversations\", {})\r\n        if(conversations){\r\n          setConversations(conversations)\r\n        }\r\n    })\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    checkUserLogin()\r\n    getConversations()\r\n  }, []);\r\n  \r\n  const renderImage = (send_at: string, url: string, role: string) => {\r\n      return (\r\n        <div className={role === 'take' ? classes.viewContentImageTake : classes.viewContentImageSend}>\r\n          <BootstrapTooltip  title={moment(Number(send_at)).fromNow()} placement=\"top\"> \r\n            <img src={url} className={classes.imgGiphy} alt=\"giphy\" />\r\n          </BootstrapTooltip>\r\n        </div>\r\n      )\r\n  }\r\n  \r\n  const renderTextField = (send_at: string, text: string, role: string) => {\r\n    return (\r\n      <BootstrapTooltip title={moment(Number(send_at)).fromNow()} placement=\"top\">\r\n        <div className={ role == \"take\" ? classes.viewTextTake : classes.viewTextSend } >\r\n          {text.trim()}\r\n        </div>\r\n      </BootstrapTooltip >\r\n    ) \r\n  }\r\n\r\n  const renderText = (send_at: string, text: string, role: string ) => {\r\n    if(role === 'take') {\r\n      return renderTextField(send_at, text, role)\r\n    }\r\n    return (\r\n      <div className={classes.textFieldUserChatContent} \r\n      dir={`${text.length < 45 ? 'rtl' : \"\"}`}\r\n      >\r\n        {renderTextField(send_at, text, role)}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const renderConversation = () => {\r\n    let created_at = _.get(conversation, \"created_at\", \"\")\r\n    return (\r\n      <div className={ openEmojiGiphy ? classes.openEG : classes.overflowHeightEG } style={{ height: openEmojiGiphy ?  \"230px\" : \"430px\" }}  id={'ContainerElementID'} >\r\n        <Element name=\"myScrollToElement\" id={\"test_ndm\"}>\r\n          <Typography align=\"center\" className={classes.textSizeNewDate}> {moment(Number(created_at)).format('LLL')} </Typography>\r\n          <Divider />\r\n          {Array.isArray(chat) ? chat.map((element: any, count: number) => {\r\n            let checkNewDate = false\r\n            let oldDate = count > 0 ? moment(Number(chat[count - 1].send_at)).format('YYYY-MM-DD') : ''\r\n            let newDate = moment(Number(chat[count].send_at)).format('YYYY-MM-DD')\r\n            if(count > 0 && (oldDate !== newDate)) {\r\n              checkNewDate = true\r\n            }\r\n            let url = _.get(element, \"message.attachment.payload.url\", \"\")\r\n            let text = _.get(element, \"message.text\", \"\")\r\n            let send_user_id = _.get(element, \"send_user_id\", \"\")\r\n            let send_at = _.get(element, \"send_at\", \"\")\r\n            let setViewAvatar = send_user_id == props.userLogin ? true : false\r\n            return (\r\n              <div key={count} style={{ display: \"block\" }}>\r\n                { checkNewDate && <Typography align=\"center\" className={classes.textSizeNewDate}>\r\n                  {moment(Number(send_at)).format(\"LLL\")} <Divider /></Typography>}\r\n                { send_user_id !== props.userLogin\r\n                  ? <ThemeProvider theme={themeTextFieldAdmin}>\r\n                      <div className={classes.viewAvatarChatContent}>\r\n                        { setViewAvatar && <Avatar className={classes.avatarAdminText} alt=\"nhadatmoi.net\" src={avatarImage} /> }\r\n                      </div>\r\n                      <div className={classes.textFieldChatContent}>\r\n                        { url ? renderImage(send_at, url, \"take\") : renderText(send_at, text, \"take\") }\r\n                      </div>\r\n                    </ThemeProvider>\r\n                  : <ThemeProvider theme={themeTextFieldUser}>\r\n                      { url ? renderImage(send_at, url, \"send\") : renderText(send_at, text, \"send\") }\r\n                    </ThemeProvider>\r\n                }\r\n                <div className={classes.clearFloat}/>\r\n              </div>\r\n            )\r\n          })\r\n          : \"\" }\r\n          <div>\r\n            {!internet && <p className={classes.errInternet}><u>Không thể gửi tin nhắn này. Kiểm tra kết nối internet và thử lại</u></p> }\r\n          </div>\r\n          <div> {texting && <p className={classes.texting}>Đang nhập ...</p>}</div>\r\n        </Element>\r\n      </div>\r\n    )\r\n  };\r\n\r\n  const onClickOpenEmojiGiphy = () => {\r\n    setOpenEmojiGiphy(!openEmojiGiphy) \r\n    setViewEmoji(true)\r\n  };\r\n\r\n  const apiBaseURL = \"https://graph.nhadatmoi.net\";\r\n  const apiUpload = `${apiBaseURL}/private_upload_image_app`;\r\n  const api = (method: Method, url: string, data?: any) => client\r\n    .request({\r\n      data: JSON.stringify(data), \r\n      headers: { \r\n        \"Accept\": \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      }, \r\n      method,\r\n      url,\r\n      withCredentials: true,\r\n    }).then((response: any) => response.data);\r\n\r\n  const upLoadImage = (files: any) => {\r\n    const reader = new FileReader;\r\n    let file = files.target.files[0]\r\n    reader.readAsDataURL(file)\r\n    reader.onload = () => {\r\n      api(\"POST\", `${apiUpload}`, { \r\n        base64_image: reader.result, \r\n        fileName: (new Date()).getTime() + \"\" + file.name,\r\n        typeUpload: \"ad_sell_lease\",\r\n      })\r\n      .then(function (res) {\r\n        senMessageChat(\"\", res.location)\r\n      })\r\n      .catch(function (err) {\r\n        alert('HTTP Error: ' + err.message);\r\n      });\r\n    };\r\n  };\r\n\r\n  const setOnKeyDown = (event: any) => {\r\n    if(event.keyCode == 13){\r\n      senMessageChat(valueInput, \"\")\r\n      setValueInput(\"\");\r\n      setScrollTo()\r\n    }\r\n  };\r\n\r\n  const setScrollTo = () => {\r\n    let heightChatDiv = 0;\r\n    let elm = document.getElementById(\"test_ndm\");\r\n    if (elm) {\r\n      heightChatDiv =  elm.offsetHeight;\r\n    }\r\n    scroller.scrollTo('myScrollToElement', {\r\n      duration: 500,\r\n      delay: 100,\r\n      smooth: true,\r\n      containerId: 'ContainerElementID',\r\n      offset: heightChatDiv,\r\n    })\r\n  }\r\n  \r\n  const setChangeInput = (value: any) => {\r\n    setValueInput(value)\r\n  };\r\n\r\n  const renderInput = () => {\r\n    return (\r\n      <Paper component=\"form\" className={classes.inputBase}>\r\n        <ThemeProvider theme={themeInput}>\r\n          <Input \r\n            fullWidth\r\n            disabled={!internet}\r\n            className={classes.inputText}\r\n            margin=\"dense\"\r\n            id=\"outlined-basic\" \r\n            autoFocus={true}\r\n            value={valueInput}\r\n            multiline={true}\r\n            onChange={(e) => setChangeInput(e.target.value)}\r\n            onKeyDown={(e) => setOnKeyDown(e)}\r\n            placeholder=\"Nhập tin nhắn ...\"\r\n            autoComplete=\"false\"\r\n          />\r\n          { openEmojiGiphy \r\n            ? <BootstrapTooltip  title=\"Chèn biểu tượng\" placement=\"top\"> \r\n                <ExpandMoreIcon className={classes.sizeIcon} onClick={onClickOpenEmojiGiphy} color=\"primary\" />\r\n              </BootstrapTooltip > \r\n            : <BootstrapTooltip  title=\"Chèn biểu tượng\" placement=\"top\"> \r\n                <TagFacesIcon className={classes.sizeIcon} onClick={onClickOpenEmojiGiphy} color=\"primary\" />\r\n              </BootstrapTooltip >\r\n          }\r\n          { valueInput\r\n            ? <BootstrapTooltip  title=\"Gửi tin nhắn\" placement=\"top\">\r\n                <SendIcon onClick={() => senMessageChat(valueInput, \"\")} className={classes.sizeIcon} color=\"primary\" />\r\n              </BootstrapTooltip >\r\n            : <BootstrapTooltip  title=\"Thêm tập tin\" placement=\"top\">\r\n                <div className={classes.inputWrapper}> \r\n                  <AddCircleOutlineIcon className={classes.sizeIcon} color=\"primary\"/> \r\n                  <input type=\"file\" className={classes.fileInput}  onChange={upLoadImage} /> \r\n                </div>\r\n              </BootstrapTooltip >\r\n          }\r\n        </ThemeProvider>\r\n      </Paper>\r\n    )\r\n  };\r\n\r\n  const viewChat = () => {\r\n    let openChat = open && checkLogin ? true : false\r\n    return (\r\n      <Popper open={openChat} placement={placement} transition className={classes.viewChatImpostant}>\r\n        {({ TransitionProps }) => (\r\n          <Fade {...TransitionProps} timeout={300}>\r\n            <Paper>\r\n              <div className={classes.viewChat}> \r\n                {renderHeader()}\r\n                {renderConversation()}\r\n                {openEmojiGiphy && renderEmojiGiphy()}\r\n                {renderInput()}\r\n              </div>\r\n            </Paper>\r\n          </Fade>\r\n        )}\r\n      </Popper>\r\n    )\r\n  };\r\n\r\n  const handleClick = (newPlacement: PopperPlacementType) => {\r\n    setOpen(true);\r\n    setPlacement(newPlacement);\r\n  };\r\n\r\n  const getConversation = async (conversationId: string) => {\r\n    let conversation = await apolloClient.query({ query: GET_MESSAGE_BY_ID, variables: {\r\n      \"id\": conversationId\r\n    }})\r\n    .then((response: any) => {\r\n      let conversation = _.get(response, \"data.conversation\", {})\r\n      return conversation\r\n    })\r\n\r\n    let chat = _.get(conversation, \"chat\", [])\r\n    let avatar = _.get(conversation, \"target.avatar\", \"\");\r\n    let userId = _.get(conversation, \"target.id\", \"\");\r\n    let name = _.get(conversation, \"target.first_name\", \"\") +  _.get(conversation, \"target.last_name\", \"\");\r\n    let last_activity = _.get(conversation, \"target.last_activity\", \"\");\r\n    let status = _.get(conversation, \"target.status\", \"\");\r\n    setChat(chat)\r\n    setAvatarImage(avatar);\r\n    setChatId(conversationId)\r\n    setUserId(userId);\r\n    setName(name);\r\n    setLastActivity(last_activity);\r\n    setConversation(conversation);\r\n  };\r\n\r\n  const renderListAvatar = (item: any, index: number) => {\r\n    let avatar  = _.get(item, \"node.target.avatar\", \"\");\r\n    let name    = _.get(item, \"node.target.first_name\", \"\") + _.get(item, \"node.target.last_name\", \"\");\r\n    let id      = _.get(item, \"node.target.id\", \"\");\r\n    let status  = _.get(item, \"node.target.status\", \"\")\r\n    let conversationId =_.get(item, \"node.id\", \"\")\r\n    if(!open) {\r\n      return (\r\n        <div\r\n          key={index}\r\n          style={{ bottom: `${index*65 + 80}px` }}\r\n          className={id === userId ? classes.renderAvatarBorderRadius : classes.renderAvatar}\r\n          onClick={() => getConversation(conversationId) }\r\n        >\r\n          <BootstrapTooltip title={name} placement=\"left\">\r\n            <StyledBadge\r\n              overlap=\"circle\"\r\n              anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n              variant={status == \"offline\" ? \"standard\" : \"dot\"}\r\n            >\r\n              <Avatar \r\n                src={avatar} \r\n                onClick={() => handleClick(\"top-start\")} \r\n                className={classes.large}\r\n                alt=\"name\"\r\n              />\r\n            </StyledBadge>\r\n          </BootstrapTooltip>\r\n        </div>\r\n      )\r\n    }\r\n    return \"\"\r\n  };\r\n\r\n  const listAvatar = _.get(conversations, 'edges', []) || []\r\n  return (\r\n    <div className={classes.root}>\r\n      {viewChat()}\r\n      <Grid container justify=\"center\">\r\n        <Grid item>\r\n          <Hidden xsDown>\r\n            <>\r\n              {Array.isArray(listAvatar) && listAvatar.map((item: any, index: number) => {\r\n                return renderListAvatar(item, index)\r\n              })}\r\n            </>\r\n          </Hidden>\r\n          <Hidden smUp> \r\n            <>\r\n              {Array.isArray(listAvatar) && listAvatar.map((item: any, index: number) => {\r\n                return renderListAvatar(item, index)\r\n              })}\r\n            </>\r\n          </Hidden>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;"]},"metadata":{},"sourceType":"module"}