{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Layout from '../../components/Layout/Layout';\nimport { apolloClient } from \"../../utils\";\nimport { GET_AD_SELL_LEASE_COMMENTS } from \"../../graphql/comments/queries\";\nimport { GET_USER_BY_ID } from \"../../graphql/user/queries/index\";\nimport \"../../assets/scss/style.scss\";\nimport { mainURL } from \"../../constants\";\nimport User from \"../../components/User/Index\";\n\n// @ts-ignore\nvar UserPage = function UserPage(props) {\n  var metaTitle = \"Chuy\\xEAn vi\\xEAn t\\u01B0 v\\u1EA5n \".concat(props.infoUser.first_name, \" \").concat(props.infoUser.last_name);\n  return __jsx(Layout, _extends({\n    title: metaTitle,\n    description: \"metaDescription\"\n  }, props, {\n    image: \"https://vcdn-giaitri.vnecdn.net/2020/01/23/C-OiQ-UUIAIycqR-1-1579796735_680x0.jpg\",\n    canonical: mainURL + '/nguoi-dung/' + props.userId,\n    path: 'nguoi-dung',\n    dataCompare: {}\n  }), __jsx(User, {\n    listComment: props.listComment.data.adSellLeaseComments.edges,\n    userId: props.userId,\n    infoUser: props.infoUser\n  }));\n}; // @ts-ignore\n\n\nUserPage.getInitialProps = function _callee(props) {\n  var userId, filterObject, dataFilter, listComment, infoUser;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          userId = props.query.id;\n          filterObject = {\n            id: userId\n          };\n          dataFilter = JSON.stringify(filterObject);\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(apolloClient.query({\n            query: GET_AD_SELL_LEASE_COMMENTS,\n            variables: {\n              \"page\": 1,\n              \"limit\": 15,\n              \"filter\": dataFilter\n            }\n          }).then(function (response) {\n            return response;\n          }));\n\n        case 5:\n          listComment = _context.sent;\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(apolloClient.query({\n            query: GET_USER_BY_ID,\n            variables: {\n              \"id\": userId\n            }\n          }).then(function (response) {\n            return response.data.user;\n          }));\n\n        case 8:\n          infoUser = _context.sent;\n          return _context.abrupt(\"return\", {\n            listComment: listComment,\n            userId: userId,\n            infoUser: infoUser\n          });\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default UserPage;","map":null,"metadata":{},"sourceType":"module"}