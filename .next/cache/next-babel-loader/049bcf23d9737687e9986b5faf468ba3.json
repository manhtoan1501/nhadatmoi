{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"C:\\\\Users\\\\toan\\\\Desktop\\\\NDM\\\\chat\\\\pages\\\\du-an\\\\[slug].tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\n//Import Components\nimport Layout from '../../components/Layout/Layout';\nimport BannerSliderBlock from \"../../components/PageDetail/BannerSliderBlock\";\nimport Main from \"../../components/Project/ProjectMain\"; //Import Const\n\nimport { apolloClient } from \"../../utils\";\nimport { GET_PROJECT_BY_SLUG } from \"../../graphql/project/queries\"; //Import Module\n\nimport StringProcess from \"../../modules/stringProcess\"; //Import SCSS\n\nimport \"../../assets/scss/style.scss\";\nimport { mainURL } from \"../../constants\";\nimport urlProcess from \"../../modules/urlProcess\";\nimport { COUNT_VIEW_PROJECT } from \"../../graphql/project/mutation\";\n\n// @ts-ignore\nconst ProjectDetailPage = props => {\n  let title = props.projectDetail.data.project.name ? props.projectDetail.data.project.name : 'Xem chi tiết dự án';\n  let albumImage = props.projectDetail.data.project.image;\n  let imageAvatar = 'https://static.nhadatmoi.net/default/home_default.jpg';\n\n  if (props.projectDetail.data.project && props.projectDetail.data.project.cover_image) {\n    imageAvatar = urlProcess.processImageUrl(props.projectDetail.data.project.cover_image, 'project');\n  }\n\n  const freshText = input => {\n    input = StringProcess.stripProperties(input, []);\n    input = StringProcess.stripTags(input, '');\n    input = input.replace(/&nbsp;/g, ' ');\n    return input;\n  };\n\n  const convertDescription = input => {\n    return input.replace(/&#(\\d+);/g, function (match, dec) {\n      return String.fromCharCode(dec);\n    });\n  };\n\n  let metaTitle = '';\n  let metaDescription = '';\n\n  if (props.projectDetail.data.project.seo_title) {\n    metaTitle = props.projectDetail.data.project.seo_title;\n  }\n\n  if (props.projectDetail.data.project.seo_description) {\n    metaDescription = props.projectDetail.data.project.seo_description;\n  }\n\n  if (metaTitle === '' || !metaTitle) {\n    metaTitle = title;\n  }\n\n  if (metaDescription === '' || !metaDescription && props.projectDetail && props.projectDetail.data && props.projectDetail.data.project.intro_content) {\n    metaDescription = freshText(String(props.projectDetail.data.project.intro_content));\n    metaDescription = convertDescription(metaDescription);\n    metaDescription = StringProcess.truncateString(metaDescription, 255, '');\n  } //Count Ad Sell Lease\n\n\n  useEffect(() => {\n    let projectId = props.projectDetail.data.project.id;\n    apolloClient.mutate({\n      mutation: COUNT_VIEW_PROJECT,\n      variables: {\n        \"input\": {\n          \"id\": projectId\n        }\n      }\n    }).then(response => {});\n  }, []);\n  return __jsx(Layout, _extends({\n    title: metaTitle,\n    description: metaDescription\n  }, props, {\n    image: imageAvatar,\n    canonical: mainURL + '/du-an/' + props.slug,\n    path: 'du-an',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }), __jsx(BannerSliderBlock, {\n    images: albumImage,\n    imageType: \"project\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), __jsx(Main, {\n    dataObject: props.projectDetail.data.project,\n    imageType: \"project\",\n    image: imageAvatar,\n    objectUrl: mainURL + '/du-an/' + props.slug,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }));\n}; // @ts-ignore\n\n\nProjectDetailPage.getInitialProps = async function (props) {\n  let projectSlug = props.query.slug;\n  let projectDetail = await apolloClient.query({\n    query: GET_PROJECT_BY_SLUG,\n    variables: {\n      \"slug\": projectSlug\n    }\n  }).then(response => {\n    return response;\n  });\n  return {\n    projectDetail: projectDetail,\n    slug: projectSlug\n  };\n};\n\nexport default ProjectDetailPage;","map":{"version":3,"sources":["C:/Users/toan/Desktop/NDM/chat/pages/du-an/[slug].tsx"],"names":["React","useEffect","Layout","BannerSliderBlock","Main","apolloClient","GET_PROJECT_BY_SLUG","StringProcess","mainURL","urlProcess","COUNT_VIEW_PROJECT","ProjectDetailPage","props","title","projectDetail","data","project","name","albumImage","image","imageAvatar","cover_image","processImageUrl","freshText","input","stripProperties","stripTags","replace","convertDescription","match","dec","String","fromCharCode","metaTitle","metaDescription","seo_title","seo_description","intro_content","truncateString","projectId","id","mutate","mutation","variables","then","response","slug","getInitialProps","projectSlug","query"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react';\r\nimport {NextPage} from \"next\";\r\n\r\n//Import Components\r\nimport Layout from '../../components/Layout/Layout';\r\nimport BannerSliderBlock from \"../../components/PageDetail/BannerSliderBlock\";\r\nimport Main from \"../../components/Project/ProjectMain\";\r\n\r\n//Import Const\r\nimport {apolloClient} from \"../../utils\";\r\nimport {GET_PROJECT_BY_SLUG} from \"../../graphql/project/queries\";\r\n\r\n//Import Module\r\nimport StringProcess from \"../../modules/stringProcess\";\r\n\r\n//Import SCSS\r\nimport \"../../assets/scss/style.scss\";\r\nimport {mainURL} from \"../../constants\";\r\nimport urlProcess from \"../../modules/urlProcess\";\r\nimport {COUNT_VIEW_PROJECT} from \"../../graphql/project/mutation\";\r\nimport {AdSellLeaseItem} from \"../../interfaces/interface\";\r\n\r\ninterface ProjectDetails {\r\n  url: {\r\n    query: {\r\n      slug: string\r\n    }\r\n  },\r\n  projectDetail: {\r\n    data: {\r\n      project: AdSellLeaseItem\r\n    }\r\n  },\r\n  slug: string\r\n}\r\n\r\ninterface QueryProp {\r\n  query: {\r\n    slug: string\r\n  }\r\n}\r\n\r\n// @ts-ignore\r\nconst ProjectDetailPage: NextPage<ProjectDetails> = (props: ProjectDetails) => {\r\n  let title = (props.projectDetail.data.project.name)?props.projectDetail.data.project.name:'Xem chi tiết dự án';\r\n  let albumImage = props.projectDetail.data.project.image;\r\n\r\n  let imageAvatar = 'https://static.nhadatmoi.net/default/home_default.jpg';\r\n  if (props.projectDetail.data.project && props.projectDetail.data.project.cover_image) {\r\n    imageAvatar = urlProcess.processImageUrl(props.projectDetail.data.project.cover_image, 'project');\r\n  }\r\n  const freshText = (input: string) => {\r\n    input = StringProcess.stripProperties(input, []);\r\n    input = StringProcess.stripTags(input, '');\r\n    input = input.replace(/&nbsp;/g, ' ');\r\n    return input;\r\n  };\r\n  const convertDescription = (input: string) => {\r\n    return input.replace(/&#(\\d+);/g, function(match, dec) {\r\n      return String.fromCharCode(dec);\r\n    });\r\n  };\r\n\r\n  let metaTitle = '';\r\n  let metaDescription = '';\r\n  if (props.projectDetail.data.project.seo_title) {\r\n    metaTitle = props.projectDetail.data.project.seo_title;\r\n  }\r\n  if (props.projectDetail.data.project.seo_description) {\r\n    metaDescription = props.projectDetail.data.project.seo_description;\r\n  }\r\n  if (metaTitle === '' || !metaTitle) {\r\n    metaTitle = title;\r\n  }\r\n\r\n  if (metaDescription === '' || !metaDescription && props.projectDetail && props.projectDetail.data && props.projectDetail.data.project.intro_content) {\r\n    metaDescription = freshText(String(props.projectDetail.data.project.intro_content));\r\n    metaDescription = convertDescription(metaDescription);\r\n    metaDescription = StringProcess.truncateString(metaDescription, 255, '');\r\n  }\r\n\r\n  //Count Ad Sell Lease\r\n  useEffect(() => {\r\n    let projectId = props.projectDetail.data.project.id;\r\n    apolloClient.mutate({mutation: COUNT_VIEW_PROJECT, variables: {\r\n        \"input\": {\r\n          \"id\": projectId\r\n        }\r\n      }}).then((response: any) => {\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Layout\r\n      title={metaTitle}\r\n      description={metaDescription}\r\n      {...props}\r\n      image={imageAvatar}\r\n      canonical={ mainURL + '/du-an/' + props.slug}\r\n      path={'du-an'}\r\n    >\r\n      <BannerSliderBlock images={albumImage} imageType='project'/>\r\n      <Main\r\n        dataObject={props.projectDetail.data.project}\r\n        imageType='project'\r\n        image={imageAvatar}\r\n        objectUrl={ mainURL + '/du-an/' + props.slug}\r\n      />\r\n    </Layout>\r\n  );\r\n};\r\n\r\n// @ts-ignore\r\nProjectDetailPage.getInitialProps = async function(props: QueryProp) {\r\n  let projectSlug = props.query.slug;\r\n  let projectDetail = await apolloClient.query({query: GET_PROJECT_BY_SLUG, variables: {\r\n      \"slug\": projectSlug\r\n    }}).then(response => {\r\n    return response;\r\n  });\r\n  return {\r\n    projectDetail: projectDetail,\r\n    slug: projectSlug\r\n  };\r\n};\r\n\r\nexport default ProjectDetailPage;\r\n"]},"metadata":{},"sourceType":"module"}