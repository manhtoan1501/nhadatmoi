{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\manh nhan\\\\Desktop\\\\new_ndm\\\\components\\\\Channel\\\\Tabs\\\\Members.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { Avatar } from \"@material-ui/core\";\nimport PhoneInTalkIcon from '@material-ui/icons/PhoneInTalk';\nimport { memberStyles } from \"../Constant\";\nimport { GET_MEMBER_CHANNEL_BY_ID } from \"../../../graphql/channel/queries\";\nimport { apolloClient } from \"../../../utils\";\nimport LoadingCircle from \"../LoadingCircle\";\n\nvar Info = function Info(props) {\n  var classes = memberStyles();\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      members = _React$useState2[0],\n      getMembers = _React$useState2[1];\n\n  var _React$useState3 = React.useState(true),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      loading = _React$useState4[0],\n      setLoading = _React$useState4[1];\n\n  var getMemberChannel = function getMemberChannel() {\n    var id, members;\n    return _regeneratorRuntime.async(function getMemberChannel$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            id = props.channelId;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(apolloClient.query({\n              query: GET_MEMBER_CHANNEL_BY_ID,\n              variables: {\n                \"id\": id,\n                \"limit\": 18,\n                \"page\": 1\n              }\n            }).then(function (response) {\n              return response.data.channelMembers.edges;\n            }));\n\n          case 3:\n            members = _context.sent;\n\n            if (_Array$isArray(members)) {\n              getMembers(members);\n              setLoading(false);\n            }\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, _Promise);\n  };\n\n  React.useEffect(function () {\n    getMemberChannel();\n  });\n\n  var renderMembers = function renderMembers() {\n    return __jsx(Grid, {\n      container: true,\n      direction: \"row\",\n      alignItems: \"center\",\n      spacing: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, members.map(function (item, index) {\n      var phone = item.node.mobile || item.node.phone;\n      return __jsx(Grid, {\n        key: index,\n        item: true,\n        lg: 2,\n        md: 3,\n        sm: 4,\n        xs: 6,\n        className: classes.marginMember,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: classes.members,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, __jsx(Avatar, {\n        alt: \"\",\n        className: classes.avatar,\n        src: item.node.avatar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        className: classes.nameMember,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, __jsx(Typography, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, item.node.first_name, \" \", item.node.last_name)), __jsx(\"a\", {\n        title: \"G\\u1ECDi ngay\",\n        href: \"\".concat(phone),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, __jsx(PhoneInTalkIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      })), __jsx(Typography, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, phone ? phone : \"SĐT: Đang cập nhật ... \")));\n    }));\n  };\n\n  return __jsx(\"div\", {\n    className: classes.rootMember,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    className: classes.titleMember,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"Danh s\\xE1ch m\\xF4i gi\\u1EDBi\"), loading ? __jsx(LoadingCircle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }) : \"\", renderMembers());\n};\n\nexport default Info;","map":{"version":3,"sources":["C:/Users/manh nhan/Desktop/new_ndm/components/Channel/Tabs/Members.tsx"],"names":["React","Grid","Typography","Avatar","PhoneInTalkIcon","memberStyles","GET_MEMBER_CHANNEL_BY_ID","apolloClient","LoadingCircle","Info","props","classes","useState","members","getMembers","loading","setLoading","getMemberChannel","id","channelId","query","variables","then","response","data","channelMembers","edges","useEffect","renderMembers","map","item","index","phone","node","mobile","marginMember","avatar","nameMember","first_name","last_name","rootMember","titleMember"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { Grid, Typography, Card, CardContent, CardActions } from \"@material-ui/core\";\r\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\r\nimport { List, Avatar } from \"@material-ui/core\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\nimport WcIcon from \"@material-ui/icons/Wc\";\r\nimport PhoneIcon from \"@material-ui/icons/Phone\";\r\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\r\nimport EmailIcon from \"@material-ui/icons/Email\";\r\nimport PhoneInTalkIcon from '@material-ui/icons/PhoneInTalk';\r\nimport { memberStyles} from \"../Constant\"\r\nimport { GET_MEMBER_CHANNEL_BY_ID } from \"../../../graphql/channel/queries\"\r\nimport { apolloClient } from \"../../../utils\";\r\nimport LoadingCircle from \"../LoadingCircle\"\r\ninterface InfoProps {\r\n  channelId: string\r\n}\r\n\r\ninterface User {\r\n  address: string;\r\n  avatar: string;\r\n  birthday: string;\r\n  email: string;\r\n  facebook: string;\r\n  first_name: string;\r\n  gender: string;\r\n  google_id: string;\r\n  id: string;\r\n  intro: string;\r\n  last_name: string;\r\n  phone: string;\r\n  mobile: string;\r\n  skype: string;\r\n  username: string;\r\n  viber: string;\r\n  website: string;\r\n  zalo: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\ninterface Member {\r\n  node: {\r\n    avatar: string\r\n    first_name: string\r\n    last_name: string\r\n    mobile: string\r\n    phone: string\r\n  }\r\n}\r\n\r\nconst Info: React.FunctionComponent<InfoProps> = (props: InfoProps) => {\r\n  const classes = memberStyles();\r\n  const [members, getMembers] = React.useState<Member[]>([])\r\n  const [loading, setLoading] = React.useState(true)\r\n\r\n  const getMemberChannel = async ()=> { \r\n    let id = props.channelId\r\n    let members = await apolloClient.query({ query: GET_MEMBER_CHANNEL_BY_ID, variables: {\r\n      \"id\": id,\r\n      \"limit\": 18,\r\n      \"page\": 1,\r\n    }})\r\n    .then((response: any) => {\r\n      return response.data.channelMembers.edges\r\n    })\r\n    if(Array.isArray(members)){\r\n      getMembers(members)\r\n      setLoading(false)\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    getMemberChannel()\r\n  })\r\n\r\n  const renderMembers = () => {\r\n    return (\r\n      <Grid container direction=\"row\" alignItems=\"center\" spacing={1}>\r\n        {members.map((item: any, index: number) => {\r\n          let phone = item.node.mobile || item.node.phone\r\n          return (\r\n            <Grid key={index} item lg={2} md={3} sm={4} xs={6} className={classes.marginMember}>\r\n              <div className={classes.members} >\r\n                <Avatar alt=\"\" className={classes.avatar} src={item.node.avatar} />\r\n                <div className={classes.nameMember}>\r\n                  <Typography>{item.node.first_name} {item.node.last_name}</Typography>\r\n                </div>\r\n                <a title=\"Gọi ngay\" href={`${phone}`}>\r\n                  <PhoneInTalkIcon />\r\n                </a>\r\n                <Typography>{phone ? phone : \"SĐT: Đang cập nhật ... \" }</Typography>\r\n              </div>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={classes.rootMember}>\r\n      <Typography variant=\"h5\" className={classes.titleMember}>Danh sách môi giới</Typography>\r\n      {loading ? <LoadingCircle /> : \"\"} \r\n      {renderMembers()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Info;\r\n"]},"metadata":{},"sourceType":"module"}