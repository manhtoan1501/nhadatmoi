{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nvar _jsxFileName = \"C:\\\\Users\\\\manh nhan\\\\Desktop\\\\new_ndm\\\\components\\\\Channel\\\\Tabs\\\\Rating.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Typography, CardHeader, Avatar, Grid } from '@material-ui/core';\nimport Rating from '@material-ui/lab/Rating';\nimport { ratings, ratingStyles } from \"../Constant\";\nimport { apolloClient } from \"../../../utils\";\nimport { GET_RATINGS_CHANNEL_BY_ID, GET_AVERAGE_RATING } from \"../../../graphql/channel/queries\";\nimport _ from \"lodash\";\nimport moment from \"moment\";\nimport 'moment/locale/es'; // without this line it didn't work\n\nmoment.locale('vi');\nconst avatar = \"https://1.bp.blogspot.com/-gx54Ig64I_k/WnktM_nzPXI/AAAAAAAAHgw/E7pSRwrXu_c3tSSg-vbO2iQgg4GbVxGKwCLcBGAs/s1600/anh-girl-xinh-9x-kute%2B%252811%2529.jpg\";\n\nconst Ratings = props => {\n  const classes = ratingStyles();\n  const [averageRating, setAverageRating] = React.useState();\n  const [ratingsChannel, setRatingsChannel] = React.useState([]);\n  React.useEffect(() => {\n    getAdChannel();\n    getAverageRating();\n  });\n\n  const getAdChannel = async () => {\n    let id = props.channelId;\n    let ratingsChannel = await apolloClient.query({\n      query: GET_RATINGS_CHANNEL_BY_ID,\n      variables: {\n        \"id\": id,\n        \"limit\": 18,\n        \"page\": 1\n      }\n    }).then(response => {\n      return response.data.channelAdSellLeaseRatings.edges;\n    });\n\n    if (_Array$isArray(ratingsChannel)) {\n      setRatingsChannel(ratingsChannel);\n    }\n  };\n\n  const getAverageRating = async () => {\n    let res = await apolloClient.query({\n      query: GET_AVERAGE_RATING,\n      variables: {\n        \"id\": props.channelId\n      }\n    }).then(response => {\n      let averageRating = _.get(response, \"data.channelAverageRatings\", {});\n\n      setAverageRating(averageRating);\n    });\n  };\n\n  console.log(\"averageRating\", averageRating);\n\n  const renderRating = () => {\n    return ratings.map((item, index) => {\n      return __jsx(\"div\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, __jsx(CardHeader, {\n        avatar: __jsx(Avatar, {\n          alt: \"Reviewer\",\n          src: avatar,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, item.name),\n        disableTypography: true,\n        subheader: __jsx(\"div\", {\n          className: classes.subheader,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, __jsx(Typography, {\n          variant: \"body2\",\n          className: classes.rating,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        }, \"\\u0110\\xE1nh gi\\xE1 b\\u1EDFi:\"), __jsx(Typography, {\n          className: classes.userRating,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, item.name), __jsx(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }), __jsx(Rating, {\n          disabled: true,\n          name: \"simple-controlled\",\n          value: item.rating,\n          style: {\n            color: \"#045EA8\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }), __jsx(Typography, {\n          variant: \"body2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, moment(item.time).fromNow())),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }));\n    });\n  };\n\n  const renderRatingChanel = () => {\n    return ratingsChannel.map((item, index) => {\n      return __jsx(\"div\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, __jsx(CardHeader, {\n        avatar: __jsx(Avatar, {\n          alt: \"Reviewer\",\n          src: item.node.user_id.avatar || avatar,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, item.node.user_id.avatar),\n        disableTypography: true,\n        subheader: __jsx(\"div\", {\n          className: classes.subheader,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, __jsx(Typography, {\n          variant: \"body2\",\n          className: classes.rating,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, \"\\u0110\\xE1nh gi\\xE1 b\\u1EDFi:\"), __jsx(Typography, {\n          className: classes.userRating,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, item.node.user_id.first_name, \" \", item.node.user_id.last_name), __jsx(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }), __jsx(Rating, {\n          disabled: true,\n          name: \"simple-controlled\",\n          value: item.node.rate,\n          style: {\n            color: \"#045EA8\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }), __jsx(Typography, {\n          variant: \"body2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }, moment(Number(item.node.created_at)).fromNow())),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }));\n    });\n  };\n\n  console.log(\">>>>>>>>>>> \", _.get(averageRating, \"five_star\", 0));\n\n  const five_star = _.get(averageRating, \"five_star\", 0);\n\n  const four_star = _.get(averageRating, \"four_star\", 0);\n\n  const three_star = _.get(averageRating, \"three_star\", 0);\n\n  const two_star = _.get(averageRating, \"two_star\", 0);\n\n  const one_star = _.get(averageRating, \"one_star\", 0);\n\n  const average_point = _parseInt(_.get(averageRating, \"average_point\", 0));\n\n  const count_rating = _parseInt(_.get(averageRating, \"count_rating\", 1));\n\n  const fiveRating = _parseInt(_.get(averageRating, \"five_star\", 0) / count_rating * 100);\n\n  const fourRating = _parseInt(_.get(averageRating, \"four_star\", 0) / count_rating * 100);\n\n  const threeRating = _parseInt(_.get(averageRating, \"three_star\", 0) / count_rating * 100);\n\n  const twoRating = _parseInt(_.get(averageRating, \"two_star\", 0) / count_rating * 100);\n\n  const oneRating = _parseInt(_.get(averageRating, \"one_star\", 0) / count_rating * 100);\n\n  const renderAverageRating = () => {\n    const total = ratingsChannel.length;\n    const arrTotalRating = [{\n      width: `${fiveRating}%`\n    }, {\n      width: `${fourRating}%`\n    }, {\n      width: `${threeRating}%`\n    }, {\n      width: `${twoRating}%`\n    }, {\n      width: `${oneRating}%`\n    }];\n    return __jsx(\"div\", {\n      className: classes.averageRating,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: classes.averageRatingTotal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, __jsx(\"p\", {\n      className: classes.averageRatingLerver,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, average_point, \".0\"), __jsx(Grid, {\n      container: true,\n      alignItems: \"center\",\n      justify: \"center\",\n      spacing: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, __jsx(Grid, {\n      item: true,\n      xs: 8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, __jsx(Rating, {\n      disabled: true,\n      name: \"simple-controlled\",\n      value: 5,\n      className: classes.averageRatingColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    })), __jsx(Grid, {\n      item: true,\n      xs: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, __jsx(Typography, {\n      variant: \"h5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, total)))), __jsx(\"div\", {\n      className: classes.averageRatingDescribe,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, arrTotalRating.map((item, index) => {\n      return __jsx(\"div\", {\n        className: classes.averageRatingDescribeFive,\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: classes.averageRatingDescribeFiveLerver,\n        style: {\n          width: item.width\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }));\n    })), __jsx(\"div\", {\n      style: {\n        clear: \"both\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }));\n  };\n\n  return __jsx(\"div\", {\n    className: classes.rootRating,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    className: classes.titleRating,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, \"\\u0110\\xE1nh gi\\xE1 ch\\u1EA5t l\\u01B0\\u1EE3ng\"), renderAverageRating(), __jsx(\"div\", {\n    className: classes.ratingList,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    className: classes.titleRating,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, \"\\u0110\\xE1nh gi\\xE1 g\\u1EA7n nh\\u1EA5t\"), _Array$isArray(ratings) ? renderRatingChanel() : __jsx(Typography, {\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, \"Kh\\xF4ng c\\xF3 \\u0111\\xE1nh gi\\xE1 n\\xE0o\"), _Array$isArray(ratings) ? renderRating() : __jsx(Typography, {\n    align: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, \"Kh\\xF4ng c\\xF3 \\u0111\\xE1nh gi\\xE1 n\\xE0o\")));\n};\n\nexport default Ratings;","map":{"version":3,"sources":["C:/Users/manh nhan/Desktop/new_ndm/components/Channel/Tabs/Rating.tsx"],"names":["React","Typography","CardHeader","Avatar","Grid","Rating","ratings","ratingStyles","apolloClient","GET_RATINGS_CHANNEL_BY_ID","GET_AVERAGE_RATING","_","moment","locale","avatar","Ratings","props","classes","averageRating","setAverageRating","useState","ratingsChannel","setRatingsChannel","useEffect","getAdChannel","getAverageRating","id","channelId","query","variables","then","response","data","channelAdSellLeaseRatings","edges","res","get","console","log","renderRating","map","item","index","name","subheader","rating","userRating","color","time","fromNow","renderRatingChanel","node","user_id","first_name","last_name","rate","Number","created_at","five_star","four_star","three_star","two_star","one_star","average_point","count_rating","fiveRating","fourRating","threeRating","twoRating","oneRating","renderAverageRating","total","length","arrTotalRating","width","averageRatingTotal","averageRatingLerver","averageRatingColor","averageRatingDescribe","averageRatingDescribeFive","averageRatingDescribeFiveLerver","clear","rootRating","titleRating","ratingList"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Typography, CardHeader, Avatar, Grid } from '@material-ui/core';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport { ratings, ratingStyles } from \"../Constant\"\r\nimport { apolloClient } from \"../../../utils\";\r\nimport { GET_RATINGS_CHANNEL_BY_ID, GET_AVERAGE_RATING } from \"../../../graphql/channel/queries\";\r\nimport _ from \"lodash\"\r\nimport moment from \"moment\"\r\nimport 'moment/locale/es'  // without this line it didn't work\r\nmoment.locale('vi')\r\n\r\ninterface Props {\r\n  channelId: string\r\n}\r\n\r\ninterface RatingProps {\r\n  node: {\r\n    id: string\r\n    user_id: {\r\n      id: string\r\n      first_name: string\r\n      last_name: string\r\n      avatar: string\r\n    }\r\n    ad_sell_lease_id: {\r\n      id: string\r\n      title: string\r\n    }\r\n    rate: Number\r\n    created_at: string\r\n  }\r\n}\r\n\r\ninterface AverageRating {\r\n  count_rating: number\r\n  average_point: number\r\n  five_star: number\r\n  four_star: number\r\n  three_star: number\r\n  two_star: number\r\n  one_star: number\r\n}\r\n\r\nconst avatar = \"https://1.bp.blogspot.com/-gx54Ig64I_k/WnktM_nzPXI/AAAAAAAAHgw/E7pSRwrXu_c3tSSg-vbO2iQgg4GbVxGKwCLcBGAs/s1600/anh-girl-xinh-9x-kute%2B%252811%2529.jpg\"\r\nconst Ratings: React.FunctionComponent<Props> = (props: Props) => {\r\n  const classes = ratingStyles();\r\n  const [averageRating, setAverageRating] = React.useState<AverageRating>()\r\n  const [ratingsChannel, setRatingsChannel] = React.useState<RatingProps[]>([])\r\n  \r\n  React.useEffect(() => {\r\n    getAdChannel()\r\n    getAverageRating()\r\n  })\r\n\r\n  const getAdChannel = async () => { \r\n    let id = props.channelId\r\n    let ratingsChannel = await apolloClient.query({ query: GET_RATINGS_CHANNEL_BY_ID, variables: {\r\n      \"id\": id,\r\n      \"limit\": 18,\r\n      \"page\": 1,\r\n    }})\r\n    .then((response: any) => {\r\n      return response.data.channelAdSellLeaseRatings.edges\r\n    })\r\n    if(Array.isArray(ratingsChannel)){\r\n      setRatingsChannel(ratingsChannel)\r\n    }\r\n  };\r\n\r\n  const getAverageRating = async () => { \r\n    let res = await apolloClient.query({ query: GET_AVERAGE_RATING, variables: {\r\n      \"id\": props.channelId\r\n    }})\r\n    .then((response: any) => {\r\n      let averageRating = _.get(response, \"data.channelAverageRatings\", {})\r\n      setAverageRating(averageRating)\r\n    })\r\n  };\r\n\r\n  console.log(\"averageRating\",averageRating)\r\n\r\n  const renderRating = () => {\r\n    return ratings.map((item: any, index: number) => {\r\n      return (\r\n        <div key={index}>\r\n          <CardHeader \r\n            avatar={ <Avatar alt=\"Reviewer\" src={avatar}>{item.name}</Avatar>}\r\n            disableTypography\r\n            subheader={\r\n              <div className={classes.subheader}>\r\n                <Typography variant=\"body2\" className={classes.rating}>Đánh giá bởi:</Typography>\r\n                <Typography className={classes.userRating}>{item.name}</Typography><br />\r\n                <Rating\r\n                  disabled\r\n                  name=\"simple-controlled\"\r\n                  value={item.rating}\r\n                  style={{ color: \"#045EA8\" }}\r\n                />\r\n                <Typography variant=\"body2\">{moment(item.time).fromNow()}</Typography>\r\n              </div>\r\n            }\r\n          />\r\n        </div>\r\n      )  \r\n    }) \r\n  }\r\n\r\n  const renderRatingChanel = () => {\r\n    return ratingsChannel.map((item: any, index: number) => {\r\n      return (\r\n        <div key={index}>\r\n          <CardHeader \r\n            avatar={ <Avatar alt=\"Reviewer\" src={item.node.user_id.avatar || avatar}>{item.node.user_id.avatar}</Avatar>}\r\n            disableTypography\r\n            subheader={\r\n              <div className={classes.subheader}>\r\n                <Typography variant=\"body2\" className={classes.rating}>Đánh giá bởi:</Typography>\r\n                <Typography className={classes.userRating}>{item.node.user_id.first_name} {item.node.user_id.last_name}</Typography><br />\r\n                <Rating\r\n                  disabled\r\n                  name=\"simple-controlled\"\r\n                  value={item.node.rate}\r\n                  style={{ color: \"#045EA8\" }}\r\n                />\r\n                <Typography variant=\"body2\">{moment(Number(item.node.created_at)).fromNow()}</Typography>\r\n              </div>\r\n            }\r\n          />\r\n        </div>\r\n      )  \r\n    }) \r\n  }\r\n\r\n  console.log( \">>>>>>>>>>> \",  _.get(averageRating, \"five_star\", 0))\r\n  const five_star = _.get(averageRating, \"five_star\", 0)\r\n  const four_star = _.get(averageRating, \"four_star\", 0)\r\n  const three_star = _.get(averageRating, \"three_star\", 0)\r\n  const two_star = _.get(averageRating, \"two_star\", 0)\r\n  const one_star = _.get(averageRating, \"one_star\", 0)\r\n\r\n  const average_point  = parseInt(_.get(averageRating, \"average_point\", 0))\r\n  const count_rating   = parseInt(_.get(averageRating, \"count_rating\", 1))\r\n  const fiveRating     = parseInt((_.get(averageRating, \"five_star\", 0) / count_rating)*100)\r\n  const fourRating     = parseInt((_.get(averageRating, \"four_star\", 0) / count_rating)*100)\r\n  const threeRating    = parseInt((_.get(averageRating, \"three_star\", 0) / count_rating)*100)\r\n  const twoRating      = parseInt((_.get(averageRating, \"two_star\", 0) / count_rating)*100)\r\n  const oneRating      = parseInt((_.get(averageRating, \"one_star\", 0) / count_rating)*100)\r\n  const renderAverageRating = () => {\r\n    const total = ratingsChannel.length\r\n    const arrTotalRating = [\r\n      { width: `${fiveRating}%` },\r\n      { width: `${fourRating}%` },\r\n      { width: `${threeRating}%` },\r\n      { width: `${twoRating}%` },\r\n      { width: `${oneRating}%` },\r\n    ]\r\n    return (\r\n      <div className={classes.averageRating}>\r\n        <div className={classes.averageRatingTotal} >\r\n          <p className={classes.averageRatingLerver}>{average_point}.0</p>\r\n          <Grid container alignItems=\"center\" justify=\"center\" spacing={4}>\r\n            <Grid item xs={8}>\r\n              <Rating disabled name=\"simple-controlled\" value={5} className={classes.averageRatingColor}/>\r\n            </Grid>\r\n            <Grid item xs={4}><Typography variant=\"h5\">{total}</Typography></Grid>\r\n          </Grid>\r\n        </div>\r\n        <div className={classes.averageRatingDescribe}>\r\n          {arrTotalRating.map((item: any, index: number) => {\r\n            return (\r\n              <div className={classes.averageRatingDescribeFive} key={index}>\r\n                <div className={classes.averageRatingDescribeFiveLerver} style= {{ width: item.width }}></div>\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n        <div style={{ clear: \"both\" }}></div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={classes.rootRating}>\r\n      <Typography variant=\"h5\" className={classes.titleRating}>Đánh giá chất lượng</Typography>\r\n      {renderAverageRating()}\r\n      <div className={classes.ratingList}>\r\n        <Typography variant=\"h5\" className={classes.titleRating}>Đánh giá gần nhất</Typography>\r\n        {Array.isArray(ratings) ? renderRatingChanel() : <Typography align=\"center\">Không có đánh giá nào</Typography> }\r\n        {Array.isArray(ratings) ? renderRating() : <Typography align=\"center\">Không có đánh giá nào</Typography> }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default Ratings;"]},"metadata":{},"sourceType":"module"}