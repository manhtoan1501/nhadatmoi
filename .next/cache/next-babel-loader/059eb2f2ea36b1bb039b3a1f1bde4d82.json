{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"C:\\\\Users\\\\manh nhan\\\\Desktop\\\\Nhadatmoi\\\\components\\\\Chat\\\\Index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport Popper from '@material-ui/core/Popper';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { Element, scroller } from 'react-scroll';\nimport { Grid, InputBase, Fade, Typography, Paper, CardHeader, Avatar, TextField, Divider, Input, IconButton } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport TagFacesIcon from '@material-ui/icons/TagFaces';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport CloseIcon from '@material-ui/icons/Close';\nimport SendIcon from '@material-ui/icons/Send';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { dataEmoji, arrChat, giphyDefault, useStyles, themeTextfieldAdmin, themeTextfieldUser, StyledBadge, themeTextHeader, themeInput, themeInputBase } from \"./constant\";\nimport { create } from 'jss';\nimport rtl from 'jss-rtl';\nimport axios from \"axios\";\nimport { apiBaseURL } from \"../../constants\";\nimport \"cross-fetch/polyfill\";\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { apolloClient } from \"../../utils\";\nconst client = axios.create({\n  baseURL: apiBaseURL,\n  timeout: 30000\n});\nimport { SEN_MESSAGE } from \"../../graphql/chat/mutation\";\nimport moment from \"moment\";\nimport 'moment/locale/es';\nmoment.locale('vi');\nimport { jssPreset } from '@material-ui/core/styles';\nconst jss = create({\n  plugins: [...jssPreset().plugins, rtl()]\n});\nconst useStylesBootstrap = makeStyles(theme => ({\n  arrow: {\n    color: \"#444\"\n  },\n  tooltip: {\n    backgroundColor: \"#444\"\n  }\n}));\n\nfunction BootstrapTooltip(props) {\n  const classes = useStylesBootstrap();\n  return __jsx(Tooltip, _extends({\n    arrow: true,\n    classes: classes\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }));\n}\n\nexport default function PositionedPopper() {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [open, setOpen] = React.useState(false);\n  const [placement, setPlacement] = React.useState();\n  const [online, setOnline] = React.useState(true);\n  const [internet, setInternet] = React.useState(true);\n  const [texting, setTexting] = React.useState(false);\n  const [giphyData, setGiphyData] = React.useState();\n  const [openEmojiGiphy, setOpenEmojiGiphy] = React.useState(false);\n  const [valueSearchGiphy, setValueSearchGiphy] = React.useState(\"\");\n  const [avatarImage, setAvatarImage] = React.useState(\"https://image.crisp.chat/avatar/operator/da8d4459-5ea3-4119-bca1-9170f49ee69c/240/?1585999578742&quot\");\n  const [nameAdmin, setNameAdmin] = React.useState(\"Nguyễn Thanh Hương\");\n  let [valueInput, setValueInput] = React.useState(\"\");\n  const [viewEmoji, setViewEmoji] = React.useState(false);\n  const [reload, setReload] = React.useState(false);\n\n  const onCloseChat = () => {\n    setOpen(false);\n  };\n\n  const setOnKeyDown = event => {\n    if (event.keyCode == 13) {\n      senMessage(valueInput);\n      arrChat.push({\n        message: event.target.value,\n        type: 'user',\n        image: {\n          url: \"\",\n          width: \"\",\n          height: \"\"\n        },\n        date: String(new Date().getTime())\n      });\n      setValueInput(\"\");\n      let heightChatDiv = 0;\n      let elm = document.getElementById(\"test_ndm\");\n\n      if (elm) {\n        heightChatDiv = elm.offsetHeight;\n      }\n\n      scroller.scrollTo('myScrollToElement', {\n        duration: 500,\n        delay: 100,\n        smooth: true,\n        containerId: 'ContainerElementID',\n        offset: heightChatDiv\n      });\n    }\n  };\n\n  const senMessage = async value => {\n    console.log(\"Gui tin nhan\");\n    apolloClient.mutate({\n      mutation: SEN_MESSAGE,\n      variables: {\n        \"input\": {\n          \"id\": \"5e9812f5728ae23e0001c249\",\n          \"message\": {\n            \"text\": `${value}`,\n            \"attachment\": {\n              \"type\": \"image\",\n              \"payload\": {\n                \"url\": 'https://zicxa.com/hinh-anh/wp-content/uploads/2019/06/H%C3%ACnh-%E1%BA%A3nh-c%C3%BAn-con-d%E1%BB%85-th%C6%B0%C6%A1ng-cute-l%C3%A0m-h%C3%ACnh-n%E1%BB%81n-%C4%91%E1%BA%B9p-19.jpg'\n              }\n            }\n          }\n        }\n      }\n    }).then(response => {\n      console.log(\"response\", response);\n    });\n  };\n\n  useEffect(() => {// let adSellLeaseId = \"kkkkkkkk\"\n    // apolloClient.mutate({mutation: SEN_MESSAGE, variables: {\n    //     \"input\": {\n    //       \"id\": adSellLeaseId\n    //     }\n    //   }}).then((response: any) => {\n    // });\n  }, []);\n\n  const senMesssage = () => {\n    arrChat.push({\n      message: valueInput,\n      type: 'user',\n      image: {\n        url: \"\",\n        width: \"\",\n        height: \"\"\n      },\n      date: String(new Date().getTime())\n    });\n    setValueInput(\"\");\n  };\n\n  const renderHeader = () => {\n    return __jsx(ThemeProvider, {\n      theme: themeTextHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, __jsx(CardHeader, {\n      className: classes.header,\n      avatar: __jsx(StyledBadge, {\n        overlap: \"circle\",\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'right'\n        },\n        variant: online ? \"dot\" : \"standard\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, __jsx(Avatar, {\n        src: avatarImage,\n        className: classes.sizeAvatarSmall,\n        alt: \"nhadatmoi.net\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      })),\n      title: nameAdmin,\n      subheader: __jsx(Typography, {\n        variant: \"caption\",\n        align: \"center\",\n        className: classes.timeWork,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"Ho\\u1EA1t \\u0111\\u1ED9ng: \", moment().format('DD/MM/YYYY')),\n      action: __jsx(IconButton, {\n        color: \"inherit\",\n        \"aria-label\": \"settings\",\n        onClick: () => onCloseChat(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, __jsx(CloseIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }));\n  };\n\n  const setChangeInput = value => {\n    setValueInput(value);\n  };\n\n  const searchGiphy = async event => {\n    setValueSearchGiphy(event.target.value);\n    let url = `https://api.giphy.com/v1/gifs/search?api_key=UgTMyvovmg74m8fPN6qYiB623nwS1IPc&q=${event.target.value}&limit=20&offset=0&rating=G&lang=vi`;\n    let getData = await axios.get(url, {}).then(function (response) {\n      setGiphyData(response.data.data);\n    });\n  };\n\n  let dataSearch = [];\n\n  if (_Array$isArray(giphyData)) {\n    giphyData.map((item, index) => {\n      dataSearch.push({\n        image: {\n          url: item.images.fixed_width.url,\n          height: item.images.fixed_width.height,\n          width: item.images.fixed_width.width\n        }\n      });\n    });\n  }\n\n  ;\n\n  const setItemGiphy = (index, name) => {\n    setOpenEmojiGiphy(!openEmojiGiphy);\n\n    if (name == \"giphyDefault\") {\n      arrChat.push({\n        message: \"\",\n        type: 'user',\n        image: {\n          url: giphyDefault[index].image.url,\n          width: giphyDefault[index].image.width,\n          height: giphyDefault[index].image.height\n        },\n        date: String(new Date().getTime())\n      });\n    } else if (name == \"dataSearch\") {\n      arrChat.push({\n        message: \"\",\n        type: 'user',\n        image: {\n          url: dataSearch[index].image.url,\n          width: dataSearch[index].image.width,\n          height: dataSearch[index].image.height\n        },\n        date: String(new Date().getTime())\n      });\n    }\n  };\n\n  const onClickEmoji = index => {\n    valueInput = valueInput + dataEmoji[index].native;\n    setValueInput(valueInput);\n  };\n\n  const renderEmojiGiphy = () => {\n    return __jsx(\"div\", {\n      className: classes.emojiGiphy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: classes.marinButtonEmojiGiphy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, __jsx(\"button\", {\n      className: classes.buttonEmojiGiphy,\n      onClick: () => setViewEmoji(true),\n      style: {\n        backgroundColor: !viewEmoji ? \"#aaa\" : \"\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, \" Bi\\u1EC3u t\\u01B0\\u1EE3ng\"), __jsx(\"button\", {\n      className: classes.buttonEmojiGiphy,\n      onClick: () => setViewEmoji(false),\n      style: {\n        backgroundColor: viewEmoji ? \"#aaa\" : \"\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, \" \\u1EA2nh \\u0111\\u1ED9ng\")), !viewEmoji && __jsx(\"div\", {\n      className: classes.rootPaper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, __jsx(SearchIcon, {\n      className: classes.sizeSearchIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }), __jsx(ThemeProvider, {\n      theme: themeInputBase,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, __jsx(InputBase, {\n      onChange: e => searchGiphy(e),\n      className: classes.inputBaseGiphy,\n      placeholder: \"T\\xECm ki\\u1EBFm ...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }))), viewEmoji ? __jsx(\"div\", {\n      className: classes.overflowHeightEmoji,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, dataEmoji.map((item, index) => {\n      return __jsx(\"div\", {\n        onClick: () => onClickEmoji(index),\n        key: index,\n        className: classes.itemEmoji,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }, item.native);\n    })) : __jsx(\"div\", {\n      className: classes.overflowHeightGiphy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, valueSearchGiphy ? dataSearch.map((item, index) => {\n      return __jsx(\"div\", {\n        className: classes.dispalyImageGiphy,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }, __jsx(\"img\", {\n        className: classes.imgListGiphy,\n        alt: \"giphy\",\n        src: item.image.url,\n        onClick: () => setItemGiphy(index, \"dataSearch\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }));\n    }) : giphyDefault.map((item, index) => {\n      return __jsx(\"div\", {\n        className: classes.dispalyImageGiphy,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, __jsx(\"img\", {\n        className: classes.imgListGiphy,\n        alt: \"giphy\",\n        src: item.image.url,\n        onClick: () => setItemGiphy(index, \"giphyDefault\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      }));\n    })));\n  };\n\n  const renderContentChat = () => {\n    return __jsx(\"div\", {\n      className: classes.overflowHeightEmojiGiphy,\n      style: {\n        height: openEmojiGiphy ? '230px' : '430px'\n      },\n      id: 'ContainerElementID',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, __jsx(Element, {\n      name: \"myScrollToElement\",\n      id: \"test_ndm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, __jsx(Typography, {\n      align: \"center\",\n      className: classes.textSizeNewDate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, moment().format('LLL')), __jsx(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }), arrChat.map((item, index) => {\n      let checkNewDate = false;\n      let setViewAvatar = false;\n      let oldDate = index > 0 ? moment(Number(arrChat[index - 1].date)).format('YYYY-MM-DD') : '';\n      let newDate = moment(Number(arrChat[index].date)).format('YYYY-MM-DD');\n\n      if (index > 0 && oldDate !== newDate) {\n        checkNewDate = true;\n      }\n\n      if (item.type === 'admin' && index > 0) {\n        if (index === arrChat.length || arrChat[index - 1].type != arrChat[index].type || oldDate !== newDate) {\n          setViewAvatar = true;\n        }\n      } else if (item.type === 'admin' && index === 0) {\n        setViewAvatar = true;\n      }\n\n      let width = item.image.width;\n      let height = item.image.height;\n      return __jsx(\"div\", {\n        key: index,\n        style: {\n          display: \"block\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338\n        },\n        __self: this\n      }, checkNewDate && __jsx(Typography, {\n        align: \"center\",\n        className: classes.textSizeNewDate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339\n        },\n        __self: this\n      }, moment(Number(item.date)).format(\"LLL\"), \" \", __jsx(Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        },\n        __self: this\n      })), item.type === 'admin' ? __jsx(ThemeProvider, {\n        theme: themeTextfieldAdmin,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: classes.viewAvatarChatContent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 343\n        },\n        __self: this\n      }, setViewAvatar && __jsx(Avatar, {\n        className: classes.avatarAdminText,\n        alt: \"nhadatmoi.net\",\n        src: avatarImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 344\n        },\n        __self: this\n      })), __jsx(\"div\", {\n        className: classes.textFieldChatContent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346\n        },\n        __self: this\n      }, item.image.url ? __jsx(\"div\", {\n        className: classes.viewContentImageGiphy,\n        style: {\n          width: `${width}px`,\n          height: `${height}px`,\n          float: \"left\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349\n        },\n        __self: this\n      }, __jsx(BootstrapTooltip, {\n        title: moment(Number(item.date)).fromNow(),\n        placement: \"top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350\n        },\n        __self: this\n      }, __jsx(\"img\", {\n        className: classes.imgGiphy,\n        alt: \"giphy\",\n        src: item.image.url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351\n        },\n        __self: this\n      }))) : __jsx(\"div\", {\n        className: classes.textAdminLeft,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      }, __jsx(BootstrapTooltip, {\n        title: moment(Number(item.date)).fromNow(),\n        placement: \"top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355\n        },\n        __self: this\n      }, __jsx(TextField, {\n        fullWidth: item.message.length > 15 ? true : false,\n        label: \"\",\n        color: \"primary\",\n        className: classes.textAdmin,\n        value: item.message.trim(),\n        margin: \"dense\",\n        id: \"outlined-basic\",\n        multiline: true,\n        InputProps: {\n          readOnly: true\n        },\n        variant: \"outlined\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 356\n        },\n        __self: this\n      }))))) : __jsx(ThemeProvider, {\n        theme: themeTextfieldUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375\n        },\n        __self: this\n      }, item.image.url ? __jsx(\"div\", {\n        className: classes.viewContentImageGiphy,\n        style: {\n          width: `${width}px`,\n          height: `${height}px`,\n          float: \"right\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378\n        },\n        __self: this\n      }, __jsx(BootstrapTooltip, {\n        title: moment(Number(item.date)).fromNow(),\n        placement: \"top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379\n        },\n        __self: this\n      }, __jsx(\"img\", {\n        className: classes.imgGiphy,\n        alt: \"giphy\",\n        src: item.image.url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380\n        },\n        __self: this\n      }))) : __jsx(\"div\", {\n        className: classes.textFieldUserChatContent,\n        dir: `${item.message.length < 45 ? 'rtl' : \"\"}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384\n        },\n        __self: this\n      }, __jsx(BootstrapTooltip, {\n        title: moment(Number(item.date)).fromNow(),\n        placement: \"top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388\n        },\n        __self: this\n      }, __jsx(TextField, {\n        fullWidth: item.message.length > 15 ? true : false,\n        label: \"\",\n        color: \"primary\",\n        className: classes.textUser,\n        value: item.message.trim(),\n        margin: \"dense\",\n        id: \"outlined-basic\",\n        multiline: true,\n        InputProps: {\n          readOnly: true\n        },\n        variant: \"outlined\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389\n        },\n        __self: this\n      })))), __jsx(\"div\", {\n        style: {\n          clear: \"both\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408\n        },\n        __self: this\n      }));\n    }), !internet && __jsx(\"p\", {\n      className: classes.errInternet,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }, \" \", __jsx(\"u\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }, \"Kh\\xF4ng th\\u1EC3 g\\u1EEDi tin nh\\u1EAFn n\\xE0y. Ki\\u1EC3m tra k\\u1EBFt n\\u1ED1i internet v\\xE0 th\\u1EED l\\u1EA1i\")), texting && __jsx(\"p\", {\n      className: classes.texting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }, \"\\u0110ang nh\\u1EADp ...\")));\n  };\n\n  const onClickOpenEmojiGiphy = () => {\n    setOpenEmojiGiphy(!openEmojiGiphy);\n    setViewEmoji(true);\n  };\n\n  const apiBaseURL = \"https://graph.nhadatmoi.net\";\n  const apiUpload = `${apiBaseURL}/private_upload_image_app`;\n\n  const api = (method, url, data) => client.request({\n    data: _JSON$stringify(data),\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    method,\n    url,\n    withCredentials: true\n  }).then(response => response.data);\n\n  const upLoadImage = files => {\n    const reader = new FileReader();\n    let file = files.target.files[0];\n    reader.readAsDataURL(file);\n\n    reader.onload = () => {\n      api(\"POST\", `${apiUpload}`, {\n        base64_image: reader.result,\n        fileName: new Date().getTime() + \"\" + file.name,\n        typeUpload: \"ad_sell_lease\"\n      }).then(function (res) {\n        pustImageChat(res.location);\n      }).catch(function (err) {\n        alert('HTTP Error: ' + err.message);\n      });\n    };\n  };\n\n  const pustImageChat = url => {\n    arrChat.push({\n      message: \"\",\n      type: 'user',\n      image: {\n        url: url,\n        width: \"100%\",\n        height: \"100%\"\n      },\n      date: String(new Date().getTime())\n    });\n    setReload(!reload);\n  };\n\n  const renderInput = () => {\n    return __jsx(Paper, {\n      component: \"form\",\n      className: classes.inputBase,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470\n      },\n      __self: this\n    }, __jsx(ThemeProvider, {\n      theme: themeInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471\n      },\n      __self: this\n    }, __jsx(Input, {\n      fullWidth: true,\n      disabled: !internet,\n      margin: \"dense\",\n      id: \"outlined-basic\",\n      autoFocus: true,\n      value: valueInput,\n      multiline: true,\n      onChange: e => setChangeInput(e.target.value),\n      onKeyDown: e => setOnKeyDown(e),\n      placeholder: \"Nh\\u1EADp tin nh\\u1EAFn ...\",\n      autoComplete: \"false\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472\n      },\n      __self: this\n    }), openEmojiGiphy ? __jsx(BootstrapTooltip, {\n      title: \"Ch\\xE8n bi\\u1EC3u t\\u01B0\\u1EE3ng\",\n      placement: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }, __jsx(ExpandMoreIcon, {\n      className: classes.sizeIcon,\n      onClick: onClickOpenEmojiGiphy,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487\n      },\n      __self: this\n    })) : __jsx(BootstrapTooltip, {\n      title: \"Ch\\xE8n bi\\u1EC3u t\\u01B0\\u1EE3ng\",\n      placement: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489\n      },\n      __self: this\n    }, __jsx(TagFacesIcon, {\n      className: classes.sizeIcon,\n      onClick: onClickOpenEmojiGiphy,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490\n      },\n      __self: this\n    })), valueInput ? __jsx(BootstrapTooltip, {\n      title: \"G\\u1EEDi tin nh\\u1EAFn\",\n      placement: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494\n      },\n      __self: this\n    }, __jsx(SendIcon, {\n      onClick: senMesssage,\n      className: classes.sizeIcon,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495\n      },\n      __self: this\n    })) : __jsx(BootstrapTooltip, {\n      title: \"Th\\xEAm t\\u1EADp tin\",\n      placement: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: classes.inputWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498\n      },\n      __self: this\n    }, __jsx(AddCircleOutlineIcon, {\n      className: classes.sizeIcon,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499\n      },\n      __self: this\n    }), __jsx(\"input\", {\n      type: \"file\",\n      className: classes.fileInput,\n      onChange: upLoadImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500\n      },\n      __self: this\n    })))));\n  };\n\n  const viewChat = () => {\n    return __jsx(Popper, {\n      open: open,\n      anchorEl: anchorEl,\n      placement: placement,\n      transition: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }, ({\n      TransitionProps\n    }) => __jsx(Fade, _extends({}, TransitionProps, {\n      timeout: 300,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    }), __jsx(Paper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: classes.positionSizeViewChat,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }, renderHeader(), renderContentChat(), openEmojiGiphy && renderEmojiGiphy(), renderInput()))));\n  };\n\n  const handleClick = newPlacement => {\n    setOpen(true);\n    setPlacement(newPlacement);\n  };\n\n  const renderAvatar = () => {\n    return __jsx(\"div\", {\n      className: classes.positionAvatar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    }, __jsx(StyledBadge, {\n      overlap: \"circle\",\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'right'\n      },\n      variant: online ? \"dot\" : \"standard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536\n      },\n      __self: this\n    }, __jsx(Avatar, {\n      src: avatarImage,\n      onClick: () => handleClick(\"top-start\"),\n      className: classes.large,\n      alt: \"nhadatmoi.net\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541\n      },\n      __self: this\n    })));\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 548\n    },\n    __self: this\n  }, viewChat(), __jsx(Grid, {\n    container: true,\n    justify: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 550\n    },\n    __self: this\n  }, __jsx(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 551\n    },\n    __self: this\n  }, !open && renderAvatar())));\n}\n;","map":{"version":3,"sources":["C:/Users/manh nhan/Desktop/Nhadatmoi/components/Chat/Index.tsx"],"names":["React","useEffect","Popper","ThemeProvider","Element","scroller","Grid","InputBase","Fade","Typography","Paper","CardHeader","Avatar","TextField","Divider","Input","IconButton","SearchIcon","AddCircleOutlineIcon","TagFacesIcon","ExpandMoreIcon","CloseIcon","SendIcon","makeStyles","dataEmoji","arrChat","giphyDefault","useStyles","themeTextfieldAdmin","themeTextfieldUser","StyledBadge","themeTextHeader","themeInput","themeInputBase","create","rtl","axios","apiBaseURL","Tooltip","apolloClient","client","baseURL","timeout","SEN_MESSAGE","moment","locale","jssPreset","jss","plugins","useStylesBootstrap","theme","arrow","color","tooltip","backgroundColor","BootstrapTooltip","props","classes","PositionedPopper","anchorEl","setAnchorEl","useState","open","setOpen","placement","setPlacement","online","setOnline","internet","setInternet","texting","setTexting","giphyData","setGiphyData","openEmojiGiphy","setOpenEmojiGiphy","valueSearchGiphy","setValueSearchGiphy","avatarImage","setAvatarImage","nameAdmin","setNameAdmin","valueInput","setValueInput","viewEmoji","setViewEmoji","reload","setReload","onCloseChat","setOnKeyDown","event","keyCode","senMessage","push","message","target","value","type","image","url","width","height","date","String","Date","getTime","heightChatDiv","elm","document","getElementById","offsetHeight","scrollTo","duration","delay","smooth","containerId","offset","console","log","mutate","mutation","variables","then","response","senMesssage","renderHeader","header","vertical","horizontal","sizeAvatarSmall","timeWork","format","setChangeInput","searchGiphy","getData","get","data","dataSearch","map","item","index","images","fixed_width","setItemGiphy","name","onClickEmoji","native","renderEmojiGiphy","emojiGiphy","marinButtonEmojiGiphy","buttonEmojiGiphy","rootPaper","sizeSearchIcon","e","inputBaseGiphy","overflowHeightEmoji","itemEmoji","overflowHeightGiphy","dispalyImageGiphy","imgListGiphy","renderContentChat","overflowHeightEmojiGiphy","textSizeNewDate","checkNewDate","setViewAvatar","oldDate","Number","newDate","length","display","viewAvatarChatContent","avatarAdminText","textFieldChatContent","viewContentImageGiphy","float","fromNow","imgGiphy","textAdminLeft","textAdmin","trim","readOnly","textFieldUserChatContent","textUser","clear","errInternet","onClickOpenEmojiGiphy","apiUpload","api","method","request","headers","withCredentials","upLoadImage","files","reader","FileReader","file","readAsDataURL","onload","base64_image","result","fileName","typeUpload","res","pustImageChat","location","catch","err","alert","renderInput","inputBase","sizeIcon","inputWrapper","fileInput","viewChat","TransitionProps","positionSizeViewChat","handleClick","newPlacement","renderAvatar","positionAvatar","large","root"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport Popper, { PopperPlacementType } from '@material-ui/core/Popper';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport { Link, Element , Events, animateScroll as scroll, scrollSpy, scroller } from 'react-scroll';\r\nimport { \r\n  Grid, \r\n  InputBase, \r\n  Fade,\r\n  Typography, \r\n  Paper, \r\n  CardHeader,\r\n  CardActionArea, \r\n  CardMedia, \r\n  Avatar, \r\n  TextField,\r\n  Badge, \r\n  Divider, \r\n  Input, \r\n  Chip, \r\n  IconButton\r\n} from '@material-ui/core';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport TagFacesIcon from '@material-ui/icons/TagFaces';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport { \r\n  Theme, \r\n  makeStyles, \r\n  withStyles, \r\n  createStyles\r\n} from '@material-ui/core/styles';\r\nimport { \r\n  dataEmoji, \r\n  arrChat, \r\n  giphyDefault, \r\n  useStyles,\r\n  themeTextfieldAdmin, \r\n  themeTextfieldUser, \r\n  StyledBadge,\r\n  themeTextHeader,\r\n  themeInput,\r\n  themeInputBase\r\n} from \"./constant\"\r\nimport { create } from 'jss';\r\nimport rtl from 'jss-rtl';\r\nimport axios, {Method} from \"axios\";\r\nimport {apiBaseURL, apiGraphQLURL} from \"../../constants\";\r\nimport \"cross-fetch/polyfill\";\r\nimport Tooltip, { TooltipProps } from '@material-ui/core/Tooltip';\r\nimport ApolloClient from \"apollo-boost\";\r\nimport {apolloClient} from \"../../utils\";\r\nconst client = axios.create({ baseURL: apiBaseURL, timeout: 30000 });\r\nimport { SEN_MESSAGE, UPDATE_MESSAGE } from \"../../graphql/chat/mutation\";\r\nimport moment from \"moment\"\r\nimport 'moment/locale/es'   \r\nmoment.locale('vi')\r\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\r\nconst jss = create({ plugins: [...jssPreset().plugins, rtl()] });\r\n\r\nconst useStylesBootstrap = makeStyles((theme: Theme) => ({\r\n  arrow: {\r\n    color: \"#444\",\r\n  },\r\n  tooltip: {\r\n    backgroundColor: \"#444\",\r\n  },\r\n}));\r\n\r\nfunction BootstrapTooltip(props: TooltipProps) {\r\n  const classes = useStylesBootstrap();\r\n\r\n  return <Tooltip arrow classes={classes} {...props} />;\r\n}\r\n\r\nexport default function PositionedPopper() {\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [placement, setPlacement] = React.useState<PopperPlacementType>();\r\n  const [online, setOnline] = React.useState<boolean>(true);\r\n  const [internet, setInternet] = React.useState<boolean>(true);\r\n  const [texting, setTexting] = React.useState<boolean>(false);\r\n  const [giphyData, setGiphyData] = React.useState<any>();\r\n  const [openEmojiGiphy, setOpenEmojiGiphy] = React.useState<boolean>(false);\r\n  const [valueSearchGiphy, setValueSearchGiphy] = React.useState(\"\");\r\n  const [avatarImage, setAvatarImage] = React.useState(\"https://image.crisp.chat/avatar/operator/da8d4459-5ea3-4119-bca1-9170f49ee69c/240/?1585999578742&quot\")\r\n  const [nameAdmin, setNameAdmin] = React.useState(\"Nguyễn Thanh Hương\");\r\n  let   [valueInput, setValueInput] = React.useState(\"\");\r\n  const [viewEmoji, setViewEmoji] = React.useState(false);\r\n  const [reload, setReload] = React.useState(false);\r\n  const onCloseChat = () => {\r\n    setOpen(false)\r\n  };\r\n\r\n  const setOnKeyDown = (event: any) => {\r\n    if(event.keyCode == 13){\r\n      senMessage(valueInput)\r\n      arrChat.push({ message: event.target.value, type: 'user', image: { url: \"\", width: \"\", height: \"\" }, date: String(new Date().getTime()) })\r\n      setValueInput(\"\");\r\n      let heightChatDiv = 0;\r\n      let elm = document.getElementById(\"test_ndm\");\r\n      if (elm) {\r\n        heightChatDiv =  elm.offsetHeight;\r\n      }\r\n      scroller.scrollTo('myScrollToElement', {\r\n        duration: 500,\r\n        delay: 100,\r\n        smooth: true,\r\n        containerId: 'ContainerElementID',\r\n        offset: heightChatDiv,\r\n      })\r\n    }\r\n  };\r\n\r\n  const senMessage = async (value: any)=> { \r\n    console.log(\"Gui tin nhan\")\r\n    apolloClient.mutate({mutation: SEN_MESSAGE, variables: {\r\n        \"input\": {\r\n          \"id\": \"5e9812f5728ae23e0001c249\",\r\n          \"message\": {\r\n            \"text\": `${value}`,\r\n            \"attachment\": {\r\n              \"type\": \"image\",\r\n              \"payload\": {\r\n                \"url\" : 'https://zicxa.com/hinh-anh/wp-content/uploads/2019/06/H%C3%ACnh-%E1%BA%A3nh-c%C3%BAn-con-d%E1%BB%85-th%C6%B0%C6%A1ng-cute-l%C3%A0m-h%C3%ACnh-n%E1%BB%81n-%C4%91%E1%BA%B9p-19.jpg'\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }})\r\n      .then((response: any) => {\r\n      console.log(\"response\", response)\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // let adSellLeaseId = \"kkkkkkkk\"\r\n    // apolloClient.mutate({mutation: SEN_MESSAGE, variables: {\r\n    //     \"input\": {\r\n    //       \"id\": adSellLeaseId\r\n    //     }\r\n    //   }}).then((response: any) => {\r\n    // });\r\n  }, []);\r\n\r\n\r\n  const senMesssage = () => {\r\n    arrChat.push({ message: valueInput, type: 'user', image: { url: \"\", width: \"\", height: \"\" }, date: String(new Date().getTime()) })\r\n    setValueInput(\"\")\r\n  };\r\n\r\n  const renderHeader = () => {\r\n    return (\r\n      <ThemeProvider theme={themeTextHeader}>\r\n        <CardHeader\r\n          className={classes.header}\r\n          avatar={\r\n            <StyledBadge\r\n              overlap=\"circle\"\r\n              anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n              variant= { online ? \"dot\" : \"standard\" }\r\n            >\r\n              <Avatar src={avatarImage} className={classes.sizeAvatarSmall} alt=\"nhadatmoi.net\" />\r\n            </StyledBadge>\r\n          }\r\n          title={nameAdmin}\r\n          subheader={ \r\n            <Typography variant=\"caption\" align=\"center\" className={classes.timeWork}>\r\n              Hoạt động: {moment().format('DD/MM/YYYY')}\r\n            </Typography>\r\n          }\r\n          action={\r\n            <IconButton color='inherit' aria-label=\"settings\" onClick={() => onCloseChat()} >\r\n              <CloseIcon/>\r\n            </IconButton>\r\n          }\r\n        />\r\n      </ThemeProvider>\r\n    )\r\n  };\r\n\r\n  const setChangeInput = (value: any) => {\r\n    setValueInput(value)\r\n  };\r\n\r\n  const searchGiphy = async (event: any)=>  { \r\n    setValueSearchGiphy(event.target.value)\r\n    let url = `https://api.giphy.com/v1/gifs/search?api_key=UgTMyvovmg74m8fPN6qYiB623nwS1IPc&q=${event.target.value}&limit=20&offset=0&rating=G&lang=vi`\r\n    let getData = await axios.get(url, {})\r\n    .then(function (response) {\r\n      setGiphyData(response.data.data)\r\n    })\r\n  };\r\n\r\n  let dataSearch: any = [];\r\n  if(Array.isArray(giphyData)){\r\n    giphyData.map((item: any, index: number) => {\r\n      dataSearch.push({ \r\n        image: {\r\n          url: item.images.fixed_width.url,\r\n          height: item.images.fixed_width.height,\r\n          width: item.images.fixed_width.width,\r\n        }})\r\n    })\r\n  };\r\n\r\n  const setItemGiphy = (index: number, name: string) => {\r\n    setOpenEmojiGiphy(!openEmojiGiphy)\r\n    if(name == \"giphyDefault\") {\r\n      arrChat.push({ \r\n        message: \"\", \r\n        type: 'user', \r\n        image: {\r\n          url: giphyDefault[index].image.url,\r\n          width: giphyDefault[index].image.width,\r\n          height: giphyDefault[index].image.height,\r\n        },\r\n        date: String(new Date().getTime()) \r\n      })\r\n    } else if ( name == \"dataSearch\") {\r\n      arrChat.push({ \r\n        message: \"\", \r\n        type: 'user', \r\n        image: {\r\n          url: dataSearch[index].image.url,\r\n          width: dataSearch[index].image.width,\r\n          height: dataSearch[index].image.height,\r\n        },\r\n        date: String(new Date().getTime())\r\n      })\r\n    }\r\n  };\r\n\r\n  const onClickEmoji = (index: number) => {\r\n    valueInput = valueInput +  dataEmoji[index].native\r\n    setValueInput(valueInput)\r\n  };\r\n\r\n  const renderEmojiGiphy = () => {\r\n    return (\r\n      <div className={classes.emojiGiphy}>\r\n        <div className={classes.marinButtonEmojiGiphy}>\r\n          <button \r\n            className={classes.buttonEmojiGiphy} \r\n            onClick={() => setViewEmoji(true)} \r\n            style={{ backgroundColor: !viewEmoji ? \"#aaa\" : \"\" }}\r\n          > Biểu tượng</button>\r\n          <button \r\n            className={classes.buttonEmojiGiphy} \r\n            onClick={() => setViewEmoji(false)} \r\n            style={{ backgroundColor: viewEmoji ? \"#aaa\" : \"\" }}\r\n          > Ảnh động</button>\r\n        </div>\r\n        { !viewEmoji && \r\n          <div className={classes.rootPaper}>\r\n            <SearchIcon className={classes.sizeSearchIcon} />\r\n            <ThemeProvider theme={themeInputBase}>\r\n              <InputBase\r\n                onChange={(e) => searchGiphy(e)}\r\n                className={classes.inputBaseGiphy}\r\n                placeholder=\"Tìm kiếm ...\"\r\n              />\r\n            </ThemeProvider>\r\n          </div>}\r\n        { viewEmoji \r\n          ? <div className={classes.overflowHeightEmoji}>\r\n              {dataEmoji.map((item: any, index: number) => {\r\n                return (\r\n                  <div \r\n                    onClick={() => onClickEmoji(index)} \r\n                    key={index} className={classes.itemEmoji}\r\n                  >{item.native}</div>\r\n                )\r\n              })}\r\n            </div>\r\n          : <div className={classes.overflowHeightGiphy}>\r\n              {valueSearchGiphy \r\n                ? dataSearch.map((item: any, index: number) => {\r\n                    return (\r\n                      <div className={classes.dispalyImageGiphy} >\r\n                        <img \r\n                          className={classes.imgListGiphy} \r\n                          alt=\"giphy\" \r\n                          src={item.image.url} \r\n                          onClick={() => setItemGiphy(index, \"dataSearch\")} \r\n                        />\r\n                      </div>\r\n                    )\r\n                  })\r\n                : giphyDefault.map((item: any, index: number) => {\r\n                    return (\r\n                      <div className={classes.dispalyImageGiphy} >\r\n                        <img \r\n                          className={classes.imgListGiphy} \r\n                          alt=\"giphy\" \r\n                          src={item.image.url} \r\n                          onClick={() => setItemGiphy(index, \"giphyDefault\")} \r\n                        />\r\n                      </div>\r\n                    )\r\n                  })\r\n              }\r\n            </div>\r\n        }\r\n      </div>\r\n    )\r\n  };\r\n\r\n  const renderContentChat = () => {\r\n    return (\r\n      <div className={classes.overflowHeightEmojiGiphy} style={{ height: openEmojiGiphy ? '230px' : '430px' }} id={'ContainerElementID'}>\r\n        <Element name=\"myScrollToElement\" id={\"test_ndm\"}>\r\n          <Typography align=\"center\" className={classes.textSizeNewDate}>\r\n            {moment().format('LLL')}\r\n          </Typography>\r\n          <Divider />\r\n          {arrChat.map((item: any, index: number) => {\r\n            let checkNewDate = false\r\n            let setViewAvatar = false\r\n            let oldDate = index > 0 ? moment(Number(arrChat[index - 1].date)).format('YYYY-MM-DD') : ''\r\n            let newDate = moment(Number(arrChat[index].date)).format('YYYY-MM-DD')\r\n            if(index > 0 && (oldDate !== newDate)) {\r\n              checkNewDate = true\r\n            }\r\n\r\n            if(item.type === 'admin' && index > 0) {\r\n              if((index === arrChat.length) || (arrChat[index - 1].type != arrChat[index].type) || (oldDate !== newDate)){\r\n                setViewAvatar = true\r\n              }\r\n            } else if(item.type === 'admin' && index === 0 ) {\r\n              setViewAvatar = true\r\n            }\r\n            let width = item.image.width\r\n            let height = item.image.height\r\n            return (\r\n              <div key={index} style={{ display: \"block\" }}>\r\n                { checkNewDate && <Typography align=\"center\" className={classes.textSizeNewDate}>\r\n                  {moment(Number(item.date)).format(\"LLL\")} <Divider /></Typography>}\r\n                { item.type === 'admin'\r\n                  ? <ThemeProvider theme={themeTextfieldAdmin}>\r\n                    <div className={classes.viewAvatarChatContent}>\r\n                      { setViewAvatar && <Avatar className={classes.avatarAdminText} alt=\"nhadatmoi.net\" src={avatarImage} /> }\r\n                    </div>\r\n                    <div className={classes.textFieldChatContent}>\r\n                      {\r\n                        item.image.url\r\n                        ? <div className={classes.viewContentImageGiphy} style={{width: `${width}px`, height: `${height}px`, float: \"left\" }} >\r\n                            <BootstrapTooltip  title={moment(Number(item.date)).fromNow()} placement=\"top\"> \r\n                              <img className={classes.imgGiphy} alt=\"giphy\" src={item.image.url} />\r\n                            </BootstrapTooltip>\r\n                          </div>\r\n                        : <div className={classes.textAdminLeft}>\r\n                            <BootstrapTooltip  title={moment(Number(item.date)).fromNow()} placement=\"top\">\r\n                              <TextField\r\n                                fullWidth={item.message.length > 15 ? true : false}\r\n                                label=\"\"\r\n                                color=\"primary\"\r\n                                className={classes.textAdmin}\r\n                                value={item.message.trim()}\r\n                                margin=\"dense\"\r\n                                id=\"outlined-basic\"\r\n                                multiline={true}\r\n                                InputProps={{\r\n                                  readOnly: true\r\n                                }}\r\n                                variant=\"outlined\"\r\n                              />\r\n                              </BootstrapTooltip >\r\n                          </div>\r\n                      }\r\n                    </div>\r\n                  </ThemeProvider>\r\n                  : <ThemeProvider theme={themeTextfieldUser}>\r\n                    {\r\n                      item.image.url\r\n                      ? <div className={classes.viewContentImageGiphy} style={{ width: `${width}px`, height: `${height}px`, float: \"right\" }} >\r\n                          <BootstrapTooltip  title={moment(Number(item.date)).fromNow()} placement=\"top\"> \r\n                            <img className={classes.imgGiphy} alt=\"giphy\" src={item.image.url} />\r\n                          </BootstrapTooltip >\r\n                        </div>\r\n                       \r\n                      : <div\r\n                          className={classes.textFieldUserChatContent}\r\n                          dir={`${item.message.length < 45 ? 'rtl' : \"\"}`}\r\n                        >\r\n                          <BootstrapTooltip  title={moment(Number(item.date)).fromNow()} placement=\"top\">\r\n                            <TextField\r\n                              fullWidth={item.message.length > 15 ? true : false}\r\n                              label=\"\"\r\n                              color=\"primary\"\r\n                              className={classes.textUser}\r\n                              value={item.message.trim()}\r\n                              margin=\"dense\"\r\n                              id=\"outlined-basic\"\r\n                              multiline={true}\r\n                              InputProps={{\r\n                                readOnly: true\r\n                              }}\r\n                              variant=\"outlined\"\r\n                            />\r\n                          </BootstrapTooltip>\r\n                        </div>\r\n                    }\r\n                  </ThemeProvider>\r\n                }\r\n                <div style={{ clear: \"both\" }} />\r\n              </div>\r\n            )\r\n          })}\r\n          {/* {openEmojiGiphy && renderEmojiGiphy()} */}\r\n          {!internet && <p className={classes.errInternet}> <u>Không thể gửi tin nhắn này. Kiểm tra kết nối internet và thử lại</u></p> }\r\n          {texting && <p className={classes.texting}>Đang nhập ...</p>}\r\n        </Element>\r\n      </div>\r\n    )\r\n  };\r\n\r\n  const onClickOpenEmojiGiphy = () => {\r\n    setOpenEmojiGiphy(!openEmojiGiphy) \r\n    setViewEmoji(true)\r\n  };\r\n\r\n  const apiBaseURL = \"https://graph.nhadatmoi.net\";\r\n  const apiUpload = `${apiBaseURL}/private_upload_image_app`;\r\n  const api = (method: Method, url: string, data?: any) => client\r\n    .request({\r\n      data: JSON.stringify(data), \r\n      headers: { \r\n        \"Accept\": \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      }, \r\n      method,\r\n      url,\r\n      withCredentials: true,\r\n    }).then((response: any) => response.data);\r\n\r\n  const upLoadImage = (files: any) => {\r\n    const reader = new FileReader;\r\n    let file = files.target.files[0]\r\n    reader.readAsDataURL(file)\r\n    reader.onload = () => {\r\n      api(\"POST\", `${apiUpload}`, { \r\n        base64_image: reader.result, \r\n        fileName: (new Date()).getTime() + \"\" + file.name,\r\n        typeUpload: \"ad_sell_lease\",\r\n      })\r\n      .then(function (res) {\r\n        pustImageChat(res.location)\r\n      })\r\n      .catch(function (err) {\r\n        alert('HTTP Error: ' + err.message);\r\n      });\r\n    };\r\n  };\r\n\r\n  const pustImageChat = (url: string) => {\r\n    arrChat.push({ \r\n      message:\"\", \r\n      type: 'user', \r\n      image: { url: url, width: \"100%\", height: \"100%\" }, \r\n      date: String(new Date().getTime()) \r\n    })\r\n    setReload(!reload)\r\n  };\r\n\r\n  const renderInput = () => {\r\n    return (\r\n      <Paper component=\"form\" className={classes.inputBase}>\r\n        <ThemeProvider theme={themeInput}>\r\n          <Input \r\n            fullWidth\r\n            disabled={!internet}\r\n            margin=\"dense\"\r\n            id=\"outlined-basic\" \r\n            autoFocus={true}\r\n            value={valueInput}\r\n            multiline={true}\r\n            onChange={(e) => setChangeInput(e.target.value)}\r\n            onKeyDown={(e) => setOnKeyDown(e)}\r\n            placeholder=\"Nhập tin nhắn ...\"\r\n            autoComplete=\"false\"\r\n          />\r\n          { openEmojiGiphy \r\n            ? <BootstrapTooltip  title=\"Chèn biểu tượng\" placement=\"top\"> \r\n                <ExpandMoreIcon className={classes.sizeIcon} onClick={onClickOpenEmojiGiphy} color=\"primary\" />\r\n              </BootstrapTooltip > \r\n            : <BootstrapTooltip  title=\"Chèn biểu tượng\" placement=\"top\"> \r\n                <TagFacesIcon className={classes.sizeIcon} onClick={onClickOpenEmojiGiphy} color=\"primary\" />\r\n              </BootstrapTooltip >\r\n          }\r\n          { valueInput\r\n            ? <BootstrapTooltip  title=\"Gửi tin nhắn\" placement=\"top\">\r\n                <SendIcon onClick={senMesssage} className={classes.sizeIcon} color=\"primary\" />\r\n              </BootstrapTooltip >\r\n            : <BootstrapTooltip  title=\"Thêm tập tin\" placement=\"top\">\r\n                <div className={classes.inputWrapper}> \r\n                  <AddCircleOutlineIcon className={classes.sizeIcon} color=\"primary\"/> \r\n                  <input type=\"file\" className={classes.fileInput}  onChange={upLoadImage} /> \r\n                </div>\r\n              </BootstrapTooltip >\r\n          }\r\n        </ThemeProvider>\r\n      </Paper>\r\n    )\r\n  };\r\n\r\n  const viewChat = () => {\r\n    return (\r\n      <Popper open={open} anchorEl={anchorEl} placement={placement} transition >\r\n        {({ TransitionProps }) => (\r\n          <Fade {...TransitionProps} timeout={300}>\r\n            <Paper>\r\n              <div className={classes.positionSizeViewChat} > \r\n                {renderHeader()}\r\n                {renderContentChat()}\r\n                {openEmojiGiphy && renderEmojiGiphy()}\r\n                {renderInput()}\r\n              </div>\r\n            </Paper>\r\n          </Fade>\r\n        )}\r\n      </Popper>\r\n    )\r\n  };\r\n\r\n  const handleClick = (newPlacement: PopperPlacementType) => {\r\n    setOpen(true)\r\n    setPlacement(newPlacement);\r\n  };\r\n\r\n  const renderAvatar = () => {\r\n    return (\r\n      <div className={classes.positionAvatar}>\r\n        <StyledBadge\r\n          overlap=\"circle\"\r\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right', }}\r\n          variant= { online ? \"dot\" : \"standard\" }\r\n        >\r\n          <Avatar src={avatarImage} onClick={() => handleClick(\"top-start\")} className={classes.large} alt=\"nhadatmoi.net\"/>\r\n        </StyledBadge>\r\n      </div>\r\n    )\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {viewChat()}\r\n      <Grid container justify=\"center\">\r\n        <Grid item>\r\n          { !open && renderAvatar()}\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}