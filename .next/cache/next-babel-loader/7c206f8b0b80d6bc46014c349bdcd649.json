{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"C:\\\\Users\\\\manh nhan\\\\Desktop\\\\Nhadatmoi\\\\pages\\\\channel\\\\[slug].tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Layout from '../../components/Layout/Layout';\nimport { apolloClient } from \"../../utils\";\nimport { GET_AD_SELL_LEASE_COMMENTS, GET_AD_SELL_LEASE_RATINGS } from \"../../graphql/reviews/queries\";\nimport { GET_USER_BY_ID } from \"../../graphql/user/queries/index\";\nimport \"../../assets/scss/style.scss\";\nimport { mainURL } from \"../../constants\";\nimport UserComponent from \"../../components/User/Index\";\n\n// @ts-ignore\nconst UserPage = props => {\n  let metaTitle = `Chuyên viên tư vấn ${props.infoUser.first_name} ${props.infoUser.last_name}`;\n  return __jsx(Layout, _extends({\n    title: metaTitle,\n    description: \"metaDescription\"\n  }, props, {\n    image: \"https://static.nhadatmoi.net/project/1585911111698_chung-cu-b2-truong-sa-phuong-17-quan-binh-thanh-1.jpg\",\n    canonical: mainURL + '/nguoi-dung/' + props.infoUser.id,\n    path: 'nguoi-dung',\n    dataCompare: {},\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), __jsx(UserComponent, {\n    comments: props.comments.data.adSellLeaseComments.edges,\n    ratings: props.ratings.data.adSellLeaseRatings.edges,\n    infoUser: props.infoUser,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }));\n}; // @ts-ignore\n\n\nUserPage.getInitialProps = async function (props) {\n  let id = props.query.id;\n\n  let dataFilter = _JSON$stringify({\n    id: id\n  });\n\n  let comments = await apolloClient.query({\n    query: GET_AD_SELL_LEASE_COMMENTS,\n    variables: {\n      \"page\": 1,\n      \"limit\": 15,\n      \"filter\": dataFilter\n    }\n  }).then(response => {\n    return response;\n  });\n  let ratings = await apolloClient.query({\n    query: GET_AD_SELL_LEASE_RATINGS,\n    variables: {\n      \"page\": 1,\n      \"limit\": 15,\n      \"filter\": dataFilter\n    }\n  }).then(response => {\n    return response;\n  });\n  let infoUser = await apolloClient.query({\n    query: GET_USER_BY_ID,\n    variables: {\n      \"id\": id\n    }\n  }).then(response => {\n    return response.data.user;\n  });\n  return {\n    comments: comments,\n    ratings: ratings,\n    infoUser: infoUser\n  };\n};\n\nexport default UserPage;","map":{"version":3,"sources":["C:/Users/manh nhan/Desktop/Nhadatmoi/pages/channel/[slug].tsx"],"names":["React","Layout","apolloClient","GET_AD_SELL_LEASE_COMMENTS","GET_AD_SELL_LEASE_RATINGS","GET_USER_BY_ID","mainURL","UserComponent","UserPage","props","metaTitle","infoUser","first_name","last_name","id","comments","data","adSellLeaseComments","edges","ratings","adSellLeaseRatings","getInitialProps","query","dataFilter","variables","then","response","user"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,SAAQC,YAAR,QAA2B,aAA3B;AACA,SAAQC,0BAAR,EAAoCC,yBAApC,QAAoE,+BAApE;AACA,SAAQC,cAAR,QAA8B,kCAA9B;AACA,OAAO,8BAAP;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;;AAuEA;AACA,MAAMC,QAA8B,GAAIC,KAAD,IAAuB;AAC5D,MAAIC,SAAS,GAAI,sBAAqBD,KAAK,CAACE,QAAN,CAAeC,UAAY,IAAGH,KAAK,CAACE,QAAN,CAAeE,SAAU,EAA7F;AACA,SACE,MAAC,MAAD;AACE,IAAA,KAAK,EAAEH,SADT;AAEE,IAAA,WAAW,EAAE;AAFf,KAGMD,KAHN;AAIE,IAAA,KAAK,EAAE,0GAJT;AAKE,IAAA,SAAS,EAAGH,OAAO,GAAG,cAAV,GAA2BG,KAAK,CAACE,QAAN,CAAeG,EALxD;AAME,IAAA,IAAI,EAAE,YANR;AAOE,IAAA,WAAW,EAAE,EAPf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASE,MAAC,aAAD;AACE,IAAA,QAAQ,EAAEL,KAAK,CAACM,QAAN,CAAeC,IAAf,CAAoBC,mBAApB,CAAwCC,KADpD;AAEE,IAAA,OAAO,EAAET,KAAK,CAACU,OAAN,CAAcH,IAAd,CAAmBI,kBAAnB,CAAsCF,KAFjD;AAGE,IAAA,QAAQ,EAAET,KAAK,CAACE,QAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF;AAiBD,CAnBD,C,CAqBA;;;AACAH,QAAQ,CAACa,eAAT,GAA2B,gBAAeZ,KAAf,EAAiC;AAC1D,MAAIK,EAAE,GAAGL,KAAK,CAACa,KAAN,CAAYR,EAArB;;AACA,MAAIS,UAAU,GAAG,gBAAe;AAAET,IAAAA,EAAE,EAAEA;AAAN,GAAf,CAAjB;;AACA,MAAIC,QAAQ,GAAG,MAAMb,YAAY,CAACoB,KAAb,CAAmB;AAACA,IAAAA,KAAK,EAAEnB,0BAAR;AAAoCqB,IAAAA,SAAS,EAAE;AACnF,cAAQ,CAD2E;AAEnF,eAAS,EAF0E;AAGnF,gBAAUD;AAHyE;AAA/C,GAAnB,EAIfE,IAJe,CAIVC,QAAQ,IAAI;AACrB,WAAOA,QAAP;AACD,GANoB,CAArB;AAQA,MAAIP,OAAO,GAAG,MAAMjB,YAAY,CAACoB,KAAb,CAAmB;AAACA,IAAAA,KAAK,EAAElB,yBAAR;AAAmCoB,IAAAA,SAAS,EAAE;AACnF,cAAQ,CAD2E;AAEnF,eAAS,EAF0E;AAGnF,gBAAUD;AAHyE;AAA9C,GAAnB,EAIhBE,IAJgB,CAIXC,QAAQ,IAAI;AACnB,WAAOA,QAAP;AACD,GANmB,CAApB;AAQA,MAAIf,QAAQ,GAAG,MAAMT,YAAY,CAACoB,KAAb,CAAmB;AAACA,IAAAA,KAAK,EAAEjB,cAAR;AAAwBmB,IAAAA,SAAS,EAAE;AACzE,YAAMV;AADmE;AAAnC,GAAnB,EAEfW,IAFe,CAEVC,QAAQ,IAAI;AACnB,WAAOA,QAAQ,CAACV,IAAT,CAAcW,IAArB;AACH,GAJoB,CAArB;AAMA,SAAO;AACLZ,IAAAA,QAAQ,EAAEA,QADL;AAELI,IAAAA,OAAO,EAAEA,OAFJ;AAGLR,IAAAA,QAAQ,EAAEA;AAHL,GAAP;AAKD,CA9BD;;AAgCA,eAAeH,QAAf","sourcesContent":["import React from 'react';\r\nimport {NextPage} from \"next\";\r\nimport Layout from '../../components/Layout/Layout';\r\nimport {apolloClient} from \"../../utils\";\r\nimport {GET_AD_SELL_LEASE_COMMENTS, GET_AD_SELL_LEASE_RATINGS} from \"../../graphql/reviews/queries\";\r\nimport {GET_USER_BY_ID } from \"../../graphql/user/queries/index\"\r\nimport \"../../assets/scss/style.scss\";\r\nimport { mainURL } from \"../../constants\";\r\nimport UserComponent from \"../../components/User/Index\"\r\n \r\ninterface IndexProps {\r\n  url: { query: { id: string }},\r\n  comments: { data: { adSellLeaseComments: { edges: CommentsProp[]}} },\r\n  ratings: { data: { adSellLeaseRatings: { edges: RatingsProp[]}} },\r\n  infoUser: UserProp\r\n}\r\n\r\ninterface QueryProp { \r\n  query: { id: string } \r\n}\r\n\r\ninterface UserProp {\r\n  address: string\r\n  avatar: string\r\n  birthday: string\r\n  email: string\r\n  facebook: string\r\n  first_name: string\r\n  gender: string\r\n  google_id: string\r\n  intro: string\r\n  id: string\r\n  last_name: string\r\n  phone: string\r\n  mobile: string\r\n  skype: string\r\n  username: string\r\n  viber: string\r\n  website: string\r\n  zalo: string\r\n  created_at: string\r\n  updated_at: string\r\n}\r\n\r\ninterface CommentsProp {\r\n  node: {\r\n    id: string,\r\n    ad_sell_lease_id: string,\r\n    content: string,\r\n    user_id: string,\r\n    media: string,\r\n    user: {\r\n      first_name: string,\r\n      last_name: string,\r\n      avatar: string,\r\n    }\r\n    like_number: string,\r\n    created_at: string,\r\n  },\r\n}\r\n\r\ninterface RatingsProp {\r\n  node: {\r\n    id: string,\r\n    ad_sell_lease_id: string,\r\n    content: string,\r\n    user_id: string,\r\n    media: string,\r\n    user: {\r\n      first_name: string,\r\n      last_name: string,\r\n      avatar: string,\r\n    }\r\n    rate: number,\r\n    like_number: string,\r\n    created_at: string,\r\n  },\r\n}\r\n\r\n// @ts-ignore\r\nconst UserPage: NextPage<IndexProps> = (props: IndexProps) => {\r\n  let metaTitle = `Chuyên viên tư vấn ${props.infoUser.first_name } ${props.infoUser.last_name}`\r\n  return (\r\n    <Layout\r\n      title={metaTitle}\r\n      description={\"metaDescription\"}\r\n      {...props}\r\n      image={\"https://static.nhadatmoi.net/project/1585911111698_chung-cu-b2-truong-sa-phuong-17-quan-binh-thanh-1.jpg\"}\r\n      canonical={ mainURL + '/nguoi-dung/' + props.infoUser.id}\r\n      path={'nguoi-dung'}\r\n      dataCompare={{  }}\r\n    >\r\n      <UserComponent \r\n        comments={props.comments.data.adSellLeaseComments.edges}\r\n        ratings={props.ratings.data.adSellLeaseRatings.edges}\r\n        infoUser={props.infoUser}\r\n      />\r\n    </Layout>\r\n  );\r\n};\r\n\r\n// @ts-ignore\r\nUserPage.getInitialProps = async function(props: QueryProp) {\r\n  let id = props.query.id;\r\n  let dataFilter = JSON.stringify({ id: id });\r\n  let comments = await apolloClient.query({query: GET_AD_SELL_LEASE_COMMENTS, variables: {\r\n      \"page\": 1,\r\n      \"limit\": 15,\r\n      \"filter\": dataFilter\r\n    }}).then(response => {\r\n    return response;\r\n  });\r\n\r\n  let ratings = await apolloClient.query({query: GET_AD_SELL_LEASE_RATINGS, variables: {\r\n    \"page\": 1,\r\n    \"limit\": 15,\r\n    \"filter\": dataFilter\r\n  }}).then(response => {\r\n    return response;\r\n  });\r\n\r\n  let infoUser = await apolloClient.query({query: GET_USER_BY_ID, variables: {\r\n    \"id\": id\r\n    }}).then(response => { \r\n      return response.data.user\r\n  })\r\n  \r\n  return {\r\n    comments: comments,\r\n    ratings: ratings,\r\n    infoUser: infoUser\r\n  };\r\n};\r\n\r\nexport default UserPage;\r\n"]},"metadata":{},"sourceType":"module"}