{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\manh nhan\\\\Desktop\\\\Nhadatmoi\\\\components\\\\Chat\\\\Index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport Popper from '@material-ui/core/Popper';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { Grid, InputBase, Fade, Typography, Paper, CardHeader, Avatar, TextField, Badge, Divider, Tooltip, Input, IconButton } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport TagFacesIcon from '@material-ui/icons/TagFaces';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport CloseIcon from '@material-ui/icons/Close';\nimport SendIcon from '@material-ui/icons/Send';\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport 'moment/locale/es';\nmoment.locale('vi');\nimport { makeStyles, withStyles, createStyles } from '@material-ui/core/styles';\nimport { dataEmoji, arrChat, giphyDefault, theme, themeTextfieldAdmin, themeTextfieldUser } from \"./constant\"; // const theme = createMuiTheme({\n//   overrides: {\n//     MuiInput: {\n//       root: {\n//         position: \"initial\",\n//       },\n//       fullWidth: {\n//         minHeight: \"50px\"\n//       }\n//     }\n//   },\n// });\n// const themeTextfieldAdmin = createMuiTheme({\n//   overrides: {\n//     MuiTextField: {\n//       root: {\n//         borderRadius: \"16px!important\",\n//       },\n//     },\n//     MuiOutlinedInput: {\n//       multiline: {\n//         borderRadius: \"16px!important\",\n//       },\n//       inputMultiline: {\n//         fontSize: \"13px\"\n//       }\n//     }\n//   }\n// })\n// const themeTextfieldUser = createMuiTheme({\n//   overrides: {\n//     MuiInput: {\n//       root: {\n//         borderRadius: \"16px!important\",\n//       },\n//     },\n//     MuiOutlinedInput: {\n//       multiline: {\n//         borderRadius: \"16px!important\",\n//       },\n//       inputMultiline: {\n//         fontSize: \"13px\"\n//       }\n//     }\n//   }\n// })\n\nconst useStyles = makeStyles(theme => createStyles({\n  root: {\n    width: 550,\n    zIndex: 900\n  },\n  textAdmin: {\n    // borderRadius: \"8px!important\",\n    backgroundColor: \"#DBF4FD\",\n    color: \"white\",\n    // fontSize: \"13px\",\n    border: \"1px \"\n  },\n  textUser: {\n    backgroundColor: \"white\",\n    color: \"black\" // fontSize: \"13px\",\n\n  },\n  textFieldChatContent: {\n    marginLeft: \"30px\"\n  },\n  dispalyImageGiphy: {\n    width: \"75px\",\n    height: \"60px\",\n    display: 'inline-block',\n    padding: '2px'\n  },\n  imgListGiphy: {\n    width: \"100%\",\n    height: \"100%\",\n    borderRadius: '10px'\n  },\n  viewContentImageGiphy: {\n    // textAlign: \"right\",\n    float: \"right\",\n    width: \"250px\",\n    height: \"150px\",\n    padding: \"5px 0px 5px 0px\"\n  },\n  imgGiphy: {\n    width: \"100%\",\n    height: \"100%\"\n  },\n  textFieldUserChatContent: {\n    marginLeft: \"30px\",\n    padding: '5px',\n    borderRadius: \"16px!important\"\n  },\n  errInternet: {\n    // position: \"absolute\",\n    // bottom: '60px',\n    padding: \"20px\",\n    color: \"red\",\n    fontSize: '13px'\n  },\n  texting: {\n    fontSize: '13px',\n    color: '#aaa',\n    padding: \"5px\",\n    textAlign: 'right'\n  },\n  iconWaring: {\n    fontSize: \"20px\"\n  },\n  rootPaper: {\n    display: 'flex',\n    textAlign: 'center',\n    margin: \"5px 5px 5px 5px\",\n    backgroundColor: \"#f0f0f0\",\n    alignItems: 'center',\n    height: \"27px\",\n    width: \"92%\"\n  },\n  inputBaseGiphy: {\n    marginLeft: theme.spacing(1),\n    flex: 1\n  },\n  buttonEmojiGiphy: {\n    border: '1px solid white',\n    backgroundColor: \"#045EA8\",\n    color: 'white',\n    borderRadius: \"10px\",\n    padding: \"5px\",\n    marginLeft: \"5px\"\n  },\n  iconButton: {\n    padding: 3\n  },\n  inputBase: {\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center',\n    width: \"100%\",\n    position: \"absolute\",\n    boxShadow: \"0px -1px 3px black\",\n    // borderTop: \"3px solid gray\",\n    borderRadius: \"0px 0px\",\n    bottom: \"0px\"\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    height: 50,\n    flex: 1\n  },\n  divider: {\n    height: 28,\n    margin: 4\n  },\n  typography: {\n    padding: theme.spacing(2)\n  },\n  positionSizeViewChat: {\n    backgroundColor: \"white\",\n    zIndex: 900,\n    height: \"550px\",\n    width: \"350px\",\n    position: \"fixed\",\n    right: '30px',\n    bottom: \"70px\",\n    boxShadow: \"0px -1px 3px #b3c5cc\"\n  },\n  emojiGiphy: {\n    height: \"200px\",\n    width: \"320px\",\n    textAlign: 'center',\n    // backgroundColor: \"#bff2ed\",\n    borderTop: '1px solid gray'\n  },\n  textField: {\n    position: \"absolute\",\n    bottom: \"0px\"\n  },\n  exampleWrapper: {\n    position: 'fixed',\n    right: \"60px\",\n    bottom: \"2px\"\n  },\n  large: {\n    width: theme.spacing(7),\n    height: theme.spacing(7)\n  },\n  avatarAdminText: {\n    width: theme.spacing(3),\n    height: theme.spacing(3)\n  },\n  sizeAvatarSmall: {\n    width: theme.spacing(5),\n    height: theme.spacing(5)\n  },\n  positionAvatar: {\n    position: 'fixed',\n    right: \"15px\",\n    bottom: \"80px\"\n  },\n  viewAvatarChatContent: {\n    float: \"left\",\n    marginTop: \"10px\"\n  },\n  radioGroup: {\n    margin: theme.spacing(1, 0)\n  },\n  avatar: {\n    backgroundColor: \"blue\"\n  },\n  media: {\n    height: 100,\n    backgroundColor: \"blue\"\n  },\n  hearder: {\n    backgroundColor: \"#1a75ff\",\n    color: \"white\"\n  },\n  speedDial: {\n    position: 'absolute',\n    '&.MuiSpeedDial-directionUp, &.MuiSpeedDial-directionLeft': {\n      bottom: theme.spacing(2),\n      right: theme.spacing(2)\n    },\n    '&.MuiSpeedDial-directionDown, &.MuiSpeedDial-directionRight': {\n      top: theme.spacing(2),\n      left: theme.spacing(2)\n    }\n  },\n  sizeIcon: {\n    fontSize: '30px'\n  },\n  textSizeNewDate: {\n    fontSize: \"13px\"\n  }\n}));\nconst StyledBadge = withStyles(theme => createStyles({\n  badge: {\n    backgroundColor: '#44b700',\n    color: '#44b700',\n    boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\n    '&::after': {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      borderRadius: '50%',\n      animation: '$ripple 1.2s infinite ease-in-out',\n      border: '1px solid currentColor',\n      content: '\"\"'\n    }\n  },\n  '@keyframes ripple': {\n    '0%': {\n      transform: 'scale(.8)',\n      opacity: 1\n    },\n    '100%': {\n      transform: 'scale(2.4)',\n      opacity: 0\n    }\n  }\n}))(Badge);\nlet valueInputChat = \"\";\nexport default function PositionedPopper() {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [open, setOpen] = React.useState(false);\n  const [placement, setPlacement] = React.useState();\n  const [online, setOnline] = React.useState(true);\n  const [internet, setInternet] = React.useState(false);\n  const classes = useStyles();\n  const [texting, setTexting] = React.useState(false);\n  const [valueInput, setValueInput] = React.useState(\"\");\n  const [giphyData, setGiphyData] = React.useState();\n  const [openEmojiGiphy, setOpenEmojiGiphy] = React.useState(false);\n  const [indexEmoji, setIndexEmoji] = React.useState();\n  const [valueSearchGiphy, setValueSearchGiphy] = React.useState(\"\");\n\n  const onCloseChat = () => {\n    setOpen(false);\n  };\n\n  const setOnKeyPress = event => {\n    setTexting(true);\n  };\n\n  const setOnBlur = event => {\n    setTexting(true);\n  };\n\n  const setOnKeyDown = event => {\n    if (event.keyCode == 13) {\n      arrChat.push({\n        message: event.target.value,\n        type: 'user',\n        image: {\n          url: \"\",\n          width: \"\",\n          height: \"\"\n        },\n        date: String(new Date().getTime())\n      });\n      setValueInput(\"\");\n    }\n  };\n\n  const senMesssage = () => {\n    arrChat.push({\n      message: valueInput,\n      type: 'user',\n      image: {\n        url: \"\",\n        width: \"\",\n        height: \"\"\n      },\n      date: String(new Date().getTime())\n    });\n    setValueInput(\"\");\n  };\n\n  const renderHeader = () => {\n    return __jsx(CardHeader, {\n      className: classes.hearder,\n      avatar: __jsx(StyledBadge, {\n        overlap: \"circle\",\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'right'\n        },\n        variant: online ? \"dot\" : \"standard\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 11\n        }\n      }, __jsx(Avatar, {\n        className: classes.sizeAvatarSmall,\n        alt: \"nhadatmoi.net\",\n        src: \"https://image.crisp.chat/avatar/operator/da8d4459-5ea3-4119-bca1-9170f49ee69c/240/?1585999578742&quot\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 13\n        }\n      })),\n      title: \"Nguy\\u1EC5n Thanh Huy\\u1EC1n\",\n      action: __jsx(IconButton, {\n        color: \"inherit\",\n        \"aria-label\": \"settings\",\n        onClick: () => onCloseChat(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 11\n        }\n      }, __jsx(CloseIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 13\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 7\n      }\n    });\n  };\n\n  const setChangeInput = value => {\n    setValueInput(value);\n  };\n\n  let api = \"https://api.giphy.com/v1/gifs/search?\";\n  let apiKey = \"api_key=UgTMyvovmg74m8fPN6qYiB623nwS1IPc\";\n  let limit = \"&limit=20\";\n  let offset = \"&offset=0\";\n  let rating = \"&rating=G\";\n  let lang = \"&lang=vi\";\n\n  const searchGiphy = async event => {\n    setValueSearchGiphy(event.target.value);\n    let query = `&q=${event.target.value}`;\n    let url = api + apiKey + query + limit + offset + rating + lang;\n    let getData = await axios.get(url, {\n      params: {\n        ID: 12345\n      }\n    }).then(function (response) {// setGiphyData(response.data.data)\n    });\n  }; // let dataSearch: any = []\n\n\n  let dataSearch = giphyDefault; // if(Array.isArray(giphyData)){\n  //   giphyData.map((item: any, index: number) => {\n  //     // dataSearch.push({ image:  item.images.original.url })\n  //     dataSearch.push({ \n  //       image: {\n  //         url: item.images.fixed_width.url,\n  //         height: item.images.fixed_width.height,\n  //         width: item.images.fixed_width.width,\n  //       }})\n  //   })\n  // }\n\n  const setItemGiphy = (index, name) => {\n    setOpenEmojiGiphy(!openEmojiGiphy);\n\n    if (name == \"giphyDefault\") {\n      arrChat.push({\n        message: \"\",\n        type: 'user',\n        image: {\n          url: giphyDefault[index].image.url,\n          width: giphyDefault[index].image.width,\n          height: giphyDefault[index].image.height\n        },\n        date: String(new Date().getTime())\n      });\n    } else if (name == \"dataSearch\") {\n      arrChat.push({\n        message: \"\",\n        type: 'user',\n        image: {\n          url: giphyDefault[index].image.url,\n          width: giphyDefault[index].image.width,\n          height: giphyDefault[index].image.height\n        },\n        date: String(new Date().getTime())\n      });\n    }\n  };\n\n  const renderEmojiGiphy = () => {\n    return __jsx(\"div\", {\n      className: classes.emojiGiphy,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 7\n      }\n    }, __jsx(\"button\", {\n      className: classes.buttonEmojiGiphy,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 11\n      }\n    }, \"Bi\\u1EC3u t\\u01B0\\u1EE3ng\"), __jsx(\"button\", {\n      className: classes.buttonEmojiGiphy,\n      style: {\n        backgroundColor: \"#85adad\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 11\n      }\n    }, \"\\u1EA2nh \\u0111\\u1ED9ng\"), __jsx(Paper, {\n      component: \"form\",\n      className: classes.rootPaper,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 9\n      }\n    }, __jsx(IconButton, {\n      type: \"submit\",\n      className: classes.iconButton,\n      \"aria-label\": \"search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 11\n      }\n    }, __jsx(SearchIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 13\n      }\n    })), __jsx(InputBase, {\n      onChange: e => searchGiphy(e),\n      className: classes.inputBaseGiphy,\n      placeholder: \"T\\xECm ki\\u1EBFm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 11\n      }\n    })), __jsx(\"div\", {\n      style: {\n        overflowX: 'auto',\n        height: '130px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 9\n      }\n    }, dataEmoji.map((item, index) => {\n      return __jsx(\"div\", {\n        onClick: () => setIndexEmoji(index),\n        key: index,\n        style: {\n          display: 'inline-block',\n          fontSize: '20px',\n          cursor: \"pointer\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 15\n        }\n      }, item.native);\n    })));\n  };\n\n  const renderContentChat = () => {\n    return __jsx(\"div\", {\n      style: {\n        overflowY: \"auto\",\n        padding: \"8px\",\n        height: \"430px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 7\n      }\n    }, __jsx(Typography, {\n      align: \"center\",\n      className: classes.textSizeNewDate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 9\n      }\n    }, moment().format('LLL')), __jsx(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 9\n      }\n    }), arrChat.map((item, index) => {\n      let checkNewDate = false;\n\n      if (index > 0 && moment(Number(arrChat[index - 1].date)).format('YYYY-MM-DD') != moment(Number(arrChat[index].date)).format('YYYY-MM-DD')) {\n        checkNewDate = true;\n      }\n\n      let setViewAvatar = false;\n\n      if (item.type === 'admin' && index > 0 && (index === arrChat.length || arrChat[index - 1].type != arrChat[index].type)) {\n        setViewAvatar = true;\n      }\n\n      return __jsx(\"div\", {\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 13\n        }\n      }, checkNewDate && __jsx(Typography, {\n        align: \"center\",\n        className: classes.textSizeNewDate,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 33\n        }\n      }, moment(Number(item.date)).format(\"LLL\"), \" \", __jsx(Divider, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 59\n        }\n      })), item.type === 'admin' ? __jsx(ThemeProvider, {\n        theme: themeTextfieldAdmin,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 17\n        }\n      }, __jsx(\"div\", {\n        className: classes.viewAvatarChatContent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 19\n        }\n      }, setViewAvatar ? __jsx(Avatar, {\n        className: classes.avatarAdminText,\n        alt: \"nhadatmoi.net\",\n        src: \"https://image.crisp.chat/avatar/operator/da8d4459-5ea3-4119-bca1-9170f49ee69c/240/?1585999578742&quot\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 25\n        }\n      }) : \"\"), __jsx(\"div\", {\n        className: classes.textFieldChatContent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 19\n        }\n      }, item.image.url ? __jsx(Tooltip, {\n        title: moment(Number(item.date)).fromNow(),\n        placement: \"top\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 25\n        }\n      }, __jsx(\"div\", {\n        className: classes.viewContentImageGiphy,\n        style: {\n          width: `${item.image.width}px`,\n          height: `${item.image.height}px`\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 27\n        }\n      }, __jsx(\"img\", {\n        className: classes.imgGiphy,\n        alt: \"giphy\",\n        src: item.image.url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 29\n        }\n      }))) : __jsx(Tooltip, {\n        title: moment(Number(item.date)).fromNow(),\n        placement: \"top\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 25\n        }\n      }, __jsx(TextField, {\n        fullWidth: true,\n        label: \"\",\n        className: classes.textAdmin,\n        value: item.message,\n        margin: \"dense\",\n        id: \"outlined-basic\",\n        multiline: true,\n        InputProps: {\n          readOnly: true\n        },\n        variant: \"outlined\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 27\n        }\n      })))) : __jsx(ThemeProvider, {\n        theme: themeTextfieldUser,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 17\n        }\n      }, item.image.url ? __jsx(Tooltip, {\n        title: moment(Number(item.date)).fromNow(),\n        placement: \"top\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 23\n        }\n      }, __jsx(\"div\", {\n        className: classes.viewContentImageGiphy,\n        style: {\n          width: `${item.image.width}px`,\n          height: `${item.image.height}px`\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 25\n        }\n      }, __jsx(\"img\", {\n        className: classes.imgGiphy,\n        alt: \"giphy\",\n        src: item.image.url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 27\n        }\n      }))) : __jsx(Tooltip, {\n        title: moment(Number(item.date)).fromNow(),\n        placement: \"top\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 581,\n          columnNumber: 23\n        }\n      }, __jsx(\"div\", {\n        className: classes.textFieldUserChatContent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 25\n        }\n      }, __jsx(\"span\", {\n        style: {\n          fontSize: '100px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 27\n        }\n      }, \"\\u23EF\"), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 597,\n          columnNumber: 27\n        }\n      }, \"I will display \\u23EF\"), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 27\n        }\n      }, \"I will display \\u23EF\"), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 27\n        }\n      }, item.message)))));\n    }), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 9\n      }\n    }, openEmojiGiphy && renderEmojiGiphy()));\n  };\n\n  console.log(\"valueInputChat\", valueInputChat);\n  valueInputChat = valueInputChat + \"🎅🏼\" + valueInput;\n\n  const renderInput = () => {\n    return __jsx(Paper, {\n      component: \"form\",\n      className: classes.inputBase,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 7\n      }\n    }, __jsx(ThemeProvider, {\n      theme: theme,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627,\n        columnNumber: 9\n      }\n    }, __jsx(Input, {\n      fullWidth: true // disabled={internet}\n      ,\n      margin: \"dense\",\n      id: \"outlined-basic\",\n      autoFocus: true // value={valueInput}\n      ,\n      value: \"🎅🏼🎅🏼🎅🏼🎅🏼🎅🏼🎅🏼\" + \"text text text &#129409;\",\n      multiline: true,\n      onChange: e => setChangeInput(e.target.value),\n      onKeyPress: e => setOnKeyPress(e),\n      onBlur: e => setOnBlur(e),\n      onKeyDown: e => setOnKeyDown(e),\n      placeholder: \"Nh\\u1EADp tin nh\\u1EAFn ...\",\n      autoComplete: \"false\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 11\n      }\n    }), openEmojiGiphy ? __jsx(Tooltip, {\n      title: \"Ch\\xE8n bi\\u1EC3u t\\u01B0\\u1EE3ng\",\n      placement: \"top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645,\n        columnNumber: 15\n      }\n    }, __jsx(ExpandMoreIcon, {\n      className: classes.sizeIcon,\n      onClick: () => setOpenEmojiGiphy(!openEmojiGiphy),\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 17\n      }\n    })) : __jsx(Tooltip, {\n      title: \"Ch\\xE8n bi\\u1EC3u t\\u01B0\\u1EE3ng\",\n      placement: \"top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 15\n      }\n    }, __jsx(TagFacesIcon, {\n      className: classes.sizeIcon,\n      onClick: () => setOpenEmojiGiphy(!openEmojiGiphy),\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 653,\n        columnNumber: 17\n      }\n    })), valueInput ? __jsx(Tooltip, {\n      title: \"Th\\xEAm t\\u1EADp tin\",\n      placement: \"top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 15\n      }\n    }, __jsx(SendIcon, {\n      onClick: senMesssage,\n      className: classes.sizeIcon,\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662,\n        columnNumber: 17\n      }\n    })) : __jsx(Tooltip, {\n      title: \"Th\\xEAm t\\u1EADp tin\",\n      placement: \"top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 15\n      }\n    }, __jsx(AddCircleOutlineIcon, {\n      className: classes.sizeIcon,\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668,\n        columnNumber: 17\n      }\n    }))));\n  };\n\n  const viewChat = () => {\n    return __jsx(Popper, {\n      open: open,\n      anchorEl: anchorEl,\n      placement: placement,\n      transition: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 7\n      }\n    }, ({\n      TransitionProps\n    }) => __jsx(Fade, _extends({}, TransitionProps, {\n      timeout: 300,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 11\n      }\n    }), __jsx(Paper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 686,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      className: classes.positionSizeViewChat,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687,\n        columnNumber: 15\n      }\n    }, renderHeader(), renderContentChat(), renderInput()))));\n  };\n\n  const handleClick = newPlacement => {\n    setOpen(true);\n    setPlacement(newPlacement);\n  };\n\n  const renderAvatar = () => {\n    return __jsx(\"div\", {\n      className: classes.positionAvatar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 706,\n        columnNumber: 7\n      }\n    }, __jsx(StyledBadge, {\n      overlap: \"circle\",\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'right'\n      } // variant= { online ? \"dot\" : \"standard\" }\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 707,\n        columnNumber: 9\n      }\n    }, __jsx(Avatar, {\n      onClick: () => handleClick(\"top-start\"),\n      className: classes.large,\n      alt: \"nhadatmoi.net\",\n      src: \"https://image.crisp.chat/avatar/operator/da8d4459-5ea3-4119-bca1-9170f49ee69c/240/?1585999578742&quot\" // src=\"https://file.vforum.vn/hinh/2018/03/hinh-mau-trang-tinh-tron-hinh-nen-anh-dai-dien-anh-bia-toan-mau-trang1.png\"\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 728,\n      columnNumber: 5\n    }\n  }, viewChat(), __jsx(Grid, {\n    container: true,\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 730,\n      columnNumber: 7\n    }\n  }, __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 731,\n      columnNumber: 9\n    }\n  }, !open && renderAvatar())));\n}","map":{"version":3,"sources":["C:/Users/manh nhan/Desktop/Nhadatmoi/components/Chat/Index.tsx"],"names":["React","Popper","ThemeProvider","Grid","InputBase","Fade","Typography","Paper","CardHeader","Avatar","TextField","Badge","Divider","Tooltip","Input","IconButton","SearchIcon","AddCircleOutlineIcon","TagFacesIcon","ExpandMoreIcon","CloseIcon","SendIcon","axios","moment","locale","makeStyles","withStyles","createStyles","dataEmoji","arrChat","giphyDefault","theme","themeTextfieldAdmin","themeTextfieldUser","useStyles","root","width","zIndex","textAdmin","backgroundColor","color","border","textUser","textFieldChatContent","marginLeft","dispalyImageGiphy","height","display","padding","imgListGiphy","borderRadius","viewContentImageGiphy","float","imgGiphy","textFieldUserChatContent","errInternet","fontSize","texting","textAlign","iconWaring","rootPaper","margin","alignItems","inputBaseGiphy","spacing","flex","buttonEmojiGiphy","iconButton","inputBase","position","boxShadow","bottom","input","divider","typography","positionSizeViewChat","right","emojiGiphy","borderTop","textField","exampleWrapper","large","avatarAdminText","sizeAvatarSmall","positionAvatar","viewAvatarChatContent","marginTop","radioGroup","avatar","media","hearder","speedDial","top","left","sizeIcon","textSizeNewDate","StyledBadge","badge","palette","background","paper","animation","content","transform","opacity","valueInputChat","PositionedPopper","anchorEl","setAnchorEl","useState","open","setOpen","placement","setPlacement","online","setOnline","internet","setInternet","classes","setTexting","valueInput","setValueInput","giphyData","setGiphyData","openEmojiGiphy","setOpenEmojiGiphy","indexEmoji","setIndexEmoji","valueSearchGiphy","setValueSearchGiphy","onCloseChat","setOnKeyPress","event","setOnBlur","setOnKeyDown","keyCode","push","message","target","value","type","image","url","date","String","Date","getTime","senMesssage","renderHeader","vertical","horizontal","setChangeInput","api","apiKey","limit","offset","rating","lang","searchGiphy","query","getData","get","params","ID","then","response","dataSearch","setItemGiphy","index","name","renderEmojiGiphy","e","overflowX","map","item","cursor","native","renderContentChat","overflowY","format","checkNewDate","Number","setViewAvatar","length","fromNow","readOnly","console","log","renderInput","viewChat","TransitionProps","handleClick","newPlacement","renderAvatar"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport Popper, { PopperPlacementType } from '@material-ui/core/Popper';\r\nimport SpeedDialIcon from '@material-ui/lab/SpeedDialIcon';\r\nimport SpeedDial, { SpeedDialProps } from '@material-ui/lab/SpeedDial';\r\nimport SpeedDialAction from '@material-ui/lab/SpeedDialAction';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\nimport { \r\n  Grid, Button, InputBase, Fade,\r\n  Typography, Paper, Card, CardHeader, CardContent,\r\n  CardActionArea, CardMedia, Avatar, TextField,\r\n  Badge, Divider, Tooltip, Input, Chip, IconButton\r\n} from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport TagFacesIcon from '@material-ui/icons/TagFaces';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport DirectionsIcon from '@material-ui/icons/Directions';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport axios, {Method} from \"axios\";\r\nimport moment from \"moment\"\r\nimport 'moment/locale/es'   \r\nmoment.locale('vi')\r\nimport { Theme, makeStyles, withStyles, createStyles } from '@material-ui/core/styles';\r\nimport {\r\n  dataEmoji, \r\n  arrChat,\r\n  giphyDefault,   \r\n  theme,\r\n  themeTextfieldAdmin, \r\n  themeTextfieldUser\r\n} from \"./constant\"\r\n\r\n\r\n// const theme = createMuiTheme({\r\n//   overrides: {\r\n//     MuiInput: {\r\n//       root: {\r\n//         position: \"initial\",\r\n//       },\r\n//       fullWidth: {\r\n//         minHeight: \"50px\"\r\n//       }\r\n//     }\r\n//   },\r\n// });\r\n\r\n// const themeTextfieldAdmin = createMuiTheme({\r\n//   overrides: {\r\n//     MuiTextField: {\r\n//       root: {\r\n//         borderRadius: \"16px!important\",\r\n//       },\r\n//     },\r\n//     MuiOutlinedInput: {\r\n//       multiline: {\r\n//         borderRadius: \"16px!important\",\r\n//       },\r\n//       inputMultiline: {\r\n//         fontSize: \"13px\"\r\n//       }\r\n//     }\r\n//   }\r\n// })\r\n\r\n// const themeTextfieldUser = createMuiTheme({\r\n//   overrides: {\r\n//     MuiInput: {\r\n//       root: {\r\n//         borderRadius: \"16px!important\",\r\n//       },\r\n//     },\r\n//     MuiOutlinedInput: {\r\n//       multiline: {\r\n//         borderRadius: \"16px!important\",\r\n//       },\r\n//       inputMultiline: {\r\n//         fontSize: \"13px\"\r\n//       }\r\n//     }\r\n//   }\r\n// })\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: 550,\r\n      zIndex: 900,\r\n    },\r\n    textAdmin: {\r\n      // borderRadius: \"8px!important\",\r\n      backgroundColor: \"#DBF4FD\",\r\n      color: \"white\",\r\n      // fontSize: \"13px\",\r\n      border: \"1px \"\r\n    },\r\n    textUser: {\r\n      backgroundColor: \"white\",\r\n      color: \"black\",\r\n      // fontSize: \"13px\",\r\n    },\r\n    textFieldChatContent: {\r\n      marginLeft: \"30px\"\r\n    },\r\n   \r\n    dispalyImageGiphy: {\r\n      width: \"75px\", \r\n      height: \"60px\", \r\n      display: 'inline-block', \r\n      padding: '2px'\r\n    },\r\n    imgListGiphy: {\r\n      width:\"100%\", \r\n      height: \"100%\", \r\n      borderRadius: '10px',\r\n    },\r\n    viewContentImageGiphy: {\r\n      // textAlign: \"right\",\r\n      float: \"right\",\r\n      width: \"250px\", \r\n      height: \"150px\", \r\n      padding: \"5px 0px 5px 0px\",\r\n    },\r\n    imgGiphy: {\r\n      width:\"100%\", \r\n      height: \"100%\", \r\n    },\r\n    textFieldUserChatContent: {\r\n      marginLeft: \"30px\", \r\n      padding: '5px', \r\n      borderRadius: \"16px!important\"\r\n    },\r\n    errInternet: {\r\n      // position: \"absolute\",\r\n      // bottom: '60px',\r\n      padding: \"20px\",\r\n      color: \"red\",\r\n      fontSize: '13px',\r\n    },\r\n    texting: {\r\n      fontSize: '13px',\r\n      color: '#aaa',\r\n      padding: \"5px\",\r\n      textAlign: 'right'\r\n    },\r\n    iconWaring: {\r\n      fontSize:\"20px\",\r\n    },\r\n    rootPaper: {\r\n      display: 'flex',\r\n      textAlign: 'center',\r\n      margin: \"5px 5px 5px 5px\",\r\n      backgroundColor: \"#f0f0f0\",\r\n      alignItems: 'center',\r\n      height: \"27px\",\r\n      width: \"92%\",\r\n    },\r\n    inputBaseGiphy: {\r\n      marginLeft: theme.spacing(1),\r\n      flex: 1,\r\n    },\r\n    buttonEmojiGiphy: {\r\n      border: '1px solid white', \r\n      backgroundColor: \"#045EA8\",\r\n      color: 'white', \r\n      borderRadius: \"10px\", \r\n      padding: \"5px\",\r\n      marginLeft: \"5px\"\r\n    },\r\n    iconButton: {\r\n      padding: 3,\r\n    },\r\n    inputBase: {\r\n      padding: '2px 4px',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      width: \"100%\",\r\n      position: \"absolute\",\r\n      boxShadow: \"0px -1px 3px black\",\r\n      // borderTop: \"3px solid gray\",\r\n      borderRadius: \"0px 0px\",\r\n      bottom: \"0px\"\r\n    },\r\n    input: {\r\n      marginLeft: theme.spacing(1),\r\n      height: 50 ,\r\n      flex: 1,\r\n    },\r\n    divider: {\r\n      height: 28,\r\n      margin: 4,\r\n    },\r\n    typography: {\r\n      padding: theme.spacing(2),\r\n    },\r\n    positionSizeViewChat: {\r\n      backgroundColor: \"white\",\r\n      zIndex: 900,\r\n      height:\"550px\", \r\n      width: \"350px\",\r\n      position: \"fixed\",\r\n      right: '30px',\r\n      bottom: \"70px\",\r\n      boxShadow: \"0px -1px 3px #b3c5cc\",\r\n    },\r\n    emojiGiphy: {\r\n      height:\"200px\", \r\n      width: \"320px\",\r\n      textAlign: 'center',\r\n      // backgroundColor: \"#bff2ed\",\r\n      borderTop: '1px solid gray',\r\n    },\r\n    textField: {\r\n      position: \"absolute\",\r\n      bottom: \"0px\"\r\n    },\r\n    exampleWrapper: {\r\n      position: 'fixed',\r\n      right: \"60px\", \r\n      bottom: \"2px\",\r\n    },\r\n    large: {\r\n      width: theme.spacing(7),\r\n      height: theme.spacing(7),\r\n    },\r\n    avatarAdminText: {\r\n      width: theme.spacing(3),\r\n      height: theme.spacing(3),\r\n    },\r\n    sizeAvatarSmall: {\r\n      width: theme.spacing(5),\r\n      height: theme.spacing(5),\r\n    },\r\n    positionAvatar: {\r\n      position: 'fixed',\r\n      right: \"15px\", \r\n      bottom: \"80px\",\r\n    },\r\n    viewAvatarChatContent: {\r\n      float: \"left\",\r\n      marginTop: \"10px\"\r\n    },\r\n    radioGroup: {\r\n      margin: theme.spacing(1, 0),\r\n    },\r\n    avatar: {\r\n      backgroundColor: \"blue\",\r\n    },\r\n    media: {\r\n      height: 100,\r\n      backgroundColor: \"blue\"\r\n    },\r\n    hearder: {\r\n      backgroundColor: \"#1a75ff\",\r\n      color: \"white\"\r\n    },\r\n    speedDial: {\r\n      position: 'absolute',\r\n      '&.MuiSpeedDial-directionUp, &.MuiSpeedDial-directionLeft': {\r\n        bottom: theme.spacing(2),\r\n        right: theme.spacing(2),\r\n      },\r\n      '&.MuiSpeedDial-directionDown, &.MuiSpeedDial-directionRight': {\r\n        top: theme.spacing(2),\r\n        left: theme.spacing(2),\r\n      },\r\n    },\r\n    sizeIcon: {\r\n      fontSize: '30px'\r\n    },\r\n    textSizeNewDate: {\r\n      fontSize: \"13px\"\r\n    }\r\n  }),\r\n);\r\n\r\nconst StyledBadge = withStyles((theme: Theme) =>\r\n  createStyles({\r\n    badge: {\r\n      backgroundColor: '#44b700',\r\n      color: '#44b700',\r\n      boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n      '&::after': {\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        borderRadius: '50%',\r\n        animation: '$ripple 1.2s infinite ease-in-out',\r\n        border: '1px solid currentColor',\r\n        content: '\"\"',\r\n      },\r\n    },\r\n    '@keyframes ripple': {\r\n      '0%': {\r\n        transform: 'scale(.8)',\r\n        opacity: 1,\r\n      },\r\n      '100%': {\r\n        transform: 'scale(2.4)',\r\n        opacity: 0,\r\n      },\r\n    },\r\n  }),\r\n)(Badge);\r\n \r\n\r\nlet valueInputChat = \"\"\r\n\r\nexport default function PositionedPopper() {\r\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [placement, setPlacement] = React.useState<PopperPlacementType>();\r\n  const [online, setOnline] = React.useState<boolean>(true)\r\n  const [internet, setInternet] = React.useState<boolean>(false)\r\n  const classes = useStyles();\r\n  const [texting, setTexting] = React.useState<boolean>(false)\r\n  const [valueInput, setValueInput] = React.useState(\"\")\r\n  const [giphyData, setGiphyData] = React.useState<any>()\r\n  const [openEmojiGiphy, setOpenEmojiGiphy] = React.useState<boolean>(false)\r\n  const [indexEmoji, setIndexEmoji] = React.useState<number>()\r\n  const [valueSearchGiphy, setValueSearchGiphy] = React.useState(\"\")\r\n\r\n  const onCloseChat = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  const setOnKeyPress = (event: any) => {\r\n    setTexting(true)\r\n  }\r\n  \r\n  const setOnBlur = (event: any) => {\r\n    setTexting(true)\r\n  }\r\n\r\n  const setOnKeyDown = (event: any) => {\r\n    if(event.keyCode == 13){\r\n      arrChat.push({ message: event.target.value, type: 'user', image: { url: \"\", width: \"\", height: \"\" }, date: String(new Date().getTime()) })\r\n      setValueInput(\"\")\r\n    }\r\n  }\r\n\r\n  const senMesssage = () => {\r\n    arrChat.push({ message: valueInput, type: 'user', image: { url: \"\", width: \"\", height: \"\" }, date: String(new Date().getTime()) })\r\n    setValueInput(\"\")\r\n  }\r\n\r\n  const renderHeader = () => {\r\n    return (\r\n      <CardHeader\r\n        className={classes.hearder}\r\n        avatar={\r\n          <StyledBadge\r\n            overlap=\"circle\"\r\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n            variant= { online ? \"dot\" : \"standard\" }\r\n          >\r\n            <Avatar \r\n              className={classes.sizeAvatarSmall} \r\n              alt=\"nhadatmoi.net\" \r\n              src=\"https://image.crisp.chat/avatar/operator/da8d4459-5ea3-4119-bca1-9170f49ee69c/240/?1585999578742&quot\"\r\n            />\r\n          </StyledBadge>\r\n        }\r\n        title=\"Nguyễn Thanh Huyền\"\r\n        action={\r\n          <IconButton color='inherit' aria-label=\"settings\" onClick={() => onCloseChat()} >\r\n            <CloseIcon/>\r\n          </IconButton>\r\n        }\r\n      />\r\n    )\r\n  }\r\n  \r\n  const setChangeInput = (value: any) => {\r\n    setValueInput(value)\r\n  }\r\n\r\n    \r\n  let api = \"https://api.giphy.com/v1/gifs/search?\"\r\n  let apiKey = \"api_key=UgTMyvovmg74m8fPN6qYiB623nwS1IPc\"\r\n  let limit = \"&limit=20\"\r\n  let offset = \"&offset=0\"\r\n  let rating = \"&rating=G\"\r\n  let lang = \"&lang=vi\"\r\n  const searchGiphy = async (event: any)=>  { \r\n    setValueSearchGiphy(event.target.value)\r\n    let query =  `&q=${event.target.value}`\r\n    let url = api + apiKey + query + limit + offset + rating + lang\r\n    let getData = await axios.get(url, { params: { ID: 12345 } })\r\n      .then(function (response) {\r\n        // setGiphyData(response.data.data)\r\n      })\r\n  }\r\n\r\n  // let dataSearch: any = []\r\n  let dataSearch = giphyDefault\r\n  // if(Array.isArray(giphyData)){\r\n  //   giphyData.map((item: any, index: number) => {\r\n  //     // dataSearch.push({ image:  item.images.original.url })\r\n  //     dataSearch.push({ \r\n  //       image: {\r\n  //         url: item.images.fixed_width.url,\r\n  //         height: item.images.fixed_width.height,\r\n  //         width: item.images.fixed_width.width,\r\n  //       }})\r\n  //   })\r\n  // }\r\n\r\n  const setItemGiphy = (index: number, name: string) => {\r\n    setOpenEmojiGiphy(!openEmojiGiphy)\r\n    if(name == \"giphyDefault\") {\r\n      arrChat.push({ \r\n        message: \"\", \r\n        type: 'user', \r\n        image: {\r\n          url: giphyDefault[index].image.url,\r\n          width: giphyDefault[index].image.width,\r\n          height: giphyDefault[index].image.height,\r\n        },\r\n        date: String(new Date().getTime()) \r\n      })\r\n    } else if ( name == \"dataSearch\") {\r\n      arrChat.push({ \r\n        message: \"\", \r\n        type: 'user', \r\n        image: {\r\n          url: giphyDefault[index].image.url,\r\n          width: giphyDefault[index].image.width,\r\n          height: giphyDefault[index].image.height,\r\n        },\r\n        date: String(new Date().getTime())\r\n      })\r\n    }\r\n  }\r\n  const renderEmojiGiphy = () => {\r\n    return (\r\n      <div className={classes.emojiGiphy}>\r\n          <button className={classes.buttonEmojiGiphy} >\r\n            Biểu tượng\r\n          </button>\r\n          <button className={classes.buttonEmojiGiphy} style={{ backgroundColor: \"#85adad\"}}>\r\n            Ảnh động\r\n          </button>\r\n        <Paper component=\"form\" className={classes.rootPaper}>\r\n          <IconButton type=\"submit\" className={classes.iconButton} aria-label=\"search\">\r\n            <SearchIcon />\r\n          </IconButton>\r\n          <InputBase\r\n            onChange={(e) => searchGiphy(e)}\r\n            className={classes.inputBaseGiphy}\r\n            placeholder=\"Tìm kiếm\"\r\n          />\r\n          {/* <IconButton type=\"submit\" className={classes.iconButton} aria-label=\"search\">\r\n            <SearchIcon />\r\n          </IconButton> */}\r\n        </Paper>\r\n        <div style={{ overflowX: 'auto', height: '130px' }}>\r\n          {dataEmoji.map((item: any, index: number) => {\r\n            return (\r\n              <div onClick={() => setIndexEmoji(index)} key={index} style={{ display: 'inline-block', fontSize: '20px', cursor: \"pointer\"}}>\r\n                {item.native}\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n        {/* <div style={{ overflowX: 'auto', height: '130px' }}>\r\n          {valueSearchGiphy \r\n            ? dataSearch.map((item: any, index: number) => {\r\n                return (\r\n                  <div className={classes.dispalyImageGiphy} >\r\n                    <img \r\n                      className={classes.imgListGiphy} \r\n                      alt=\"giphy\" \r\n                      src={item.image.url} \r\n                      onClick={() => setItemGiphy(index, \"dataSearch\")} \r\n                    />\r\n                  </div>\r\n                )\r\n              })\r\n            : giphyDefault.map((item: any, index: number) => {\r\n                return (\r\n                  <div className={classes.dispalyImageGiphy} >\r\n                    <img \r\n                      className={classes.imgListGiphy} \r\n                      alt=\"giphy\" \r\n                      src={item.image.url} \r\n                      onClick={() => setItemGiphy(index, \"giphyDefault\")} \r\n                    />\r\n                  </div>\r\n                )\r\n              })\r\n          }\r\n        </div> */}\r\n      \r\n      </div>\r\n    )\r\n  }\r\n\r\n  const renderContentChat = () => {\r\n    return (\r\n      <div style={{ overflowY: \"auto\", padding: \"8px\", height: \"430px\" }}>\r\n        <Typography align=\"center\" className={classes.textSizeNewDate}>\r\n          {moment().format('LLL')}\r\n        </Typography>\r\n        <Divider />\r\n        {arrChat.map((item: any, index: number) => {\r\n          let checkNewDate = false\r\n          if(index > 0 && (moment(Number(arrChat[index - 1].date)).format('YYYY-MM-DD') != moment(Number(arrChat[index].date)).format('YYYY-MM-DD'))) {\r\n            checkNewDate = true\r\n          }\r\n          let setViewAvatar = false\r\n          if(item.type === 'admin' && index > 0 && (index === arrChat.length || arrChat[index - 1].type != arrChat[index].type)) {\r\n            setViewAvatar =  true\r\n          }\r\n          return (\r\n            <div key={index}>\r\n              { checkNewDate && <Typography align=\"center\" className={classes.textSizeNewDate}>\r\n                {moment(Number(item.date)).format(\"LLL\")} <Divider /></Typography>}\r\n              { item.type === 'admin' \r\n              ? <ThemeProvider theme={themeTextfieldAdmin}>\r\n                  <div className={classes.viewAvatarChatContent}>\r\n                    {\r\n                      setViewAvatar \r\n                      ? <Avatar \r\n                          className={classes.avatarAdminText} \r\n                          alt=\"nhadatmoi.net\" \r\n                          src=\"https://image.crisp.chat/avatar/operator/da8d4459-5ea3-4119-bca1-9170f49ee69c/240/?1585999578742&quot\"\r\n                        />\r\n                      : \"\"\r\n                    }\r\n                  </div>\r\n                  <div className={classes.textFieldChatContent}>\r\n                    {\r\n                      item.image.url \r\n                      ? <Tooltip title={moment(Number(item.date)).fromNow()} placement=\"top\">\r\n                          <div className={classes.viewContentImageGiphy} style={{ width: `${item.image.width}px`, height: `${item.image.height}px`}} >\r\n                            <img \r\n                              className={classes.imgGiphy} \r\n                              alt=\"giphy\" \r\n                              src={item.image.url} \r\n                            />\r\n                          </div>\r\n                        </Tooltip>\r\n                      : <Tooltip title={moment(Number(item.date)).fromNow()} placement=\"top\">\r\n                          <TextField \r\n                            fullWidth\r\n                            label=\"\"\r\n                            className={classes.textAdmin}\r\n                            value={item.message}\r\n                            margin=\"dense\"\r\n                            id=\"outlined-basic\" \r\n                            multiline={true}\r\n                            InputProps={{\r\n                              readOnly: true\r\n                            }}\r\n                            variant=\"outlined\" \r\n                          />\r\n                        </Tooltip>\r\n                    }\r\n                  </div>\r\n                  </ThemeProvider>\r\n              : <ThemeProvider theme={themeTextfieldUser}>\r\n                  {\r\n                    item.image.url\r\n                    ? <Tooltip title={moment(Number(item.date)).fromNow()} placement=\"top\">\r\n                        <div className={classes.viewContentImageGiphy} style={{ width: `${item.image.width}px`, height: `${item.image.height}px`}} >\r\n                          <img \r\n                            className={classes.imgGiphy} \r\n                            alt=\"giphy\" \r\n                            src={item.image.url} \r\n                          />\r\n                        </div>\r\n                      </Tooltip>\r\n                    : <Tooltip title={moment(Number(item.date)).fromNow()} placement=\"top\">\r\n                        <div className={classes.textFieldUserChatContent}>\r\n                          {/* <TextField \r\n                            fullWidth\r\n                            label=\"\"\r\n                            className={classes.textUser}\r\n                            value={item.message}\r\n                            margin=\"dense\"\r\n                            id=\"outlined-basic\" \r\n                            multiline={true}\r\n                            InputProps={{\r\n                              readOnly: true\r\n                            }}\r\n                            variant=\"outlined\" \r\n                          />  */}\r\n                          <span style={{fontSize : '100px'}}>&#9199;</span>\r\n                          <p>I will display &#9199;</p>\r\n                          <p>I will display &#x23EF;</p>\r\n                          <p>{item.message}</p>\r\n                        </div>\r\n                      </Tooltip>\r\n                  }\r\n                  </ThemeProvider>\r\n              }\r\n            </div>\r\n          )\r\n        })}\r\n        <div>\r\n          {openEmojiGiphy && renderEmojiGiphy()}\r\n        </div>\r\n        {/* {!internet \r\n          ? <p className={classes.errInternet}>\r\n              <u>Không thể gửi tin nhắn này. Kiểm tra kết nối internet và thử lại</u>\r\n            </p>\r\n          : \"\"\r\n        }\r\n        {texting && <p className={classes.texting}>Đang nhập ...</p>} */}\r\n      </div>\r\n    )\r\n  }\r\n \r\n  console.log(\"valueInputChat\", valueInputChat) \r\n  valueInputChat = valueInputChat + \"🎅🏼\" + valueInput\r\n  const renderInput = () => {\r\n    return (\r\n      <Paper component=\"form\" className={classes.inputBase}>\r\n        <ThemeProvider theme={theme}>\r\n          <Input \r\n            fullWidth\r\n            // disabled={internet}\r\n            margin=\"dense\"\r\n            id=\"outlined-basic\" \r\n            autoFocus={true}\r\n            // value={valueInput}\r\n            value={\"🎅🏼🎅🏼🎅🏼🎅🏼🎅🏼🎅🏼\" + \"text text text &#129409;\"}\r\n            multiline={true}\r\n            onChange={(e) => setChangeInput(e.target.value)}\r\n            onKeyPress={(e) => setOnKeyPress(e)}\r\n            onBlur={(e) => setOnBlur(e)}\r\n            onKeyDown={(e) => setOnKeyDown(e)}\r\n            placeholder=\"Nhập tin nhắn ...\"\r\n            autoComplete=\"false\"\r\n          />\r\n          { openEmojiGiphy \r\n            ? <Tooltip title=\"Chèn biểu tượng\" placement=\"top\"> \r\n                <ExpandMoreIcon \r\n                  className={classes.sizeIcon}\r\n                  onClick={() => setOpenEmojiGiphy(!openEmojiGiphy)}\r\n                  color=\"primary\"\r\n                />\r\n              </Tooltip> \r\n            : <Tooltip title=\"Chèn biểu tượng\" placement=\"top\"> \r\n                <TagFacesIcon \r\n                  className={classes.sizeIcon}\r\n                  onClick={() => setOpenEmojiGiphy(!openEmojiGiphy)}\r\n                  color=\"primary\"\r\n                />\r\n              </Tooltip>\r\n          }\r\n          { valueInput\r\n            ? <Tooltip title=\"Thêm tập tin\" placement=\"top\">\r\n                <SendIcon \r\n                  onClick={senMesssage} \r\n                  className={classes.sizeIcon} color=\"primary\"\r\n                />\r\n              </Tooltip>\r\n            : <Tooltip title=\"Thêm tập tin\" placement=\"top\">\r\n                <AddCircleOutlineIcon className={classes.sizeIcon} color=\"primary\"/>\r\n              </Tooltip>\r\n          }\r\n        </ThemeProvider>\r\n      </Paper>\r\n    )\r\n  }\r\n\r\n  const viewChat = () => {\r\n    return (\r\n      <Popper \r\n        open={open} \r\n        anchorEl={anchorEl}\r\n        placement={placement} \r\n        transition\r\n      >\r\n        {({ TransitionProps }) => (\r\n          <Fade {...TransitionProps} timeout={300}>\r\n            <Paper>\r\n              <div className={classes.positionSizeViewChat} >\r\n                {renderHeader()}\r\n                {renderContentChat()}\r\n                {renderInput()}\r\n              </div>\r\n            </Paper>\r\n          </Fade>\r\n        )}\r\n      </Popper>\r\n    )\r\n  }\r\n\r\n  const handleClick = (newPlacement: PopperPlacementType) => {\r\n    setOpen(true)\r\n    setPlacement(newPlacement);\r\n  }\r\n\r\n  const renderAvatar = () => {\r\n    return (\r\n      <div className={classes.positionAvatar}>\r\n        <StyledBadge\r\n          overlap=\"circle\"\r\n          anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'right',\r\n          }}\r\n          // variant= { online ? \"dot\" : \"standard\" }\r\n        >\r\n          <Avatar \r\n            onClick={() => handleClick(\"top-start\")}\r\n            className={classes.large} \r\n            alt=\"nhadatmoi.net\" \r\n            src=\"https://image.crisp.chat/avatar/operator/da8d4459-5ea3-4119-bca1-9170f49ee69c/240/?1585999578742&quot\"\r\n            // src=\"https://file.vforum.vn/hinh/2018/03/hinh-mau-trang-tinh-tron-hinh-nen-anh-dai-dien-anh-bia-toan-mau-trang1.png\"\r\n          />\r\n        </StyledBadge>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {viewChat()}\r\n      <Grid container justify=\"center\">\r\n        <Grid item>\r\n          { !open && renderAvatar()}\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}