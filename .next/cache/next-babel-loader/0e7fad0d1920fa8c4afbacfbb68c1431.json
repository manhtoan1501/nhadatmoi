{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { apolloClient } from \"../../utils\";\nimport { GET_LOCATION_FROM_SLUG } from \"../../graphql/location/queries\";\nimport Validator from \"../validator\";\n\nconst processDataFromQuery = async (query, typePage, type1ASL, type2ASL) => {\n  let typeSlug = '';\n\n  if (type2ASL || type1ASL) {\n    typeSlug = '/' + query.slug;\n  }\n\n  let dataQuery = {\n    city: \"\",\n    district: \"\",\n    ward: \"\",\n    home_direction: \"\",\n    price_range: {\n      max: 0,\n      min: 0\n    },\n    area_range: {\n      max: 0,\n      min: 0\n    },\n    bed_room_number: {\n      max: 0,\n      min: 0\n    },\n    title: \"\",\n    name: \"\",\n    page: 1,\n    limit: 48,\n    sort_by: {\n      time: \"newest\"\n    },\n    type2: type2ASL,\n    type1: type1ASL,\n    type_slug: typeSlug,\n    parent_slug: query.slug,\n    child_slug: query.location\n  };\n  let propObject = {\n    location: {},\n    statusCode: 200,\n    dataQuery: dataQuery,\n    slug: query.location\n  };\n  delete query.slug;\n\n  if (typePage === 'ad-sell-lease-location') {\n    let locationSlug = query.location;\n    let locationObject = await apolloClient.query({\n      query: GET_LOCATION_FROM_SLUG,\n      variables: {\n        \"slug\": locationSlug\n      }\n    }).then(response => {\n      return response;\n    });\n\n    if (!Validator.isBlank(locationObject.data.location) && !Validator.isBlank(locationObject.data.location.city)) {\n      propObject.location = locationObject.data.location;\n\n      if (!Validator.isBlank(locationObject.data.location.city.id)) {\n        dataQuery.city = locationObject.data.location.city.id;\n      }\n\n      if (!Validator.isBlank(locationObject.data.location.district) && !Validator.isBlank(locationObject.data.location.district.id)) {\n        dataQuery.district = locationObject.data.location.district.id;\n      }\n\n      if (!Validator.isBlank(locationObject.data.location.ward) && !Validator.isBlank(locationObject.data.location.ward.id)) {\n        dataQuery.ward = locationObject.data.location.ward.id;\n      }\n    } else {\n      propObject.statusCode = 404;\n      return propObject;\n    }\n  }\n\n  try {\n    if (!Validator.isBlank(query.bed_room_number)) {\n      query.bed_room_number = JSON.parse(query.bed_room_number);\n    }\n\n    if (!Validator.isBlank(query.price_range)) {\n      query.price_range = JSON.parse(query.price_range);\n    }\n\n    if (!Validator.isBlank(query.area_range)) {\n      query.area_range = JSON.parse(query.area_range);\n    }\n\n    if (!Validator.isBlank(query.sort_by)) {\n      query.sort_by = JSON.parse(query.sort_by);\n    }\n  } catch (e) {\n    propObject.statusCode = 404;\n  }\n\n  dataQuery = _Object$assign(dataQuery, query);\n  dataQuery.page = Number(dataQuery.page);\n  dataQuery.limit = Number(dataQuery.limit);\n  propObject.dataQuery = dataQuery;\n  return propObject;\n};\n\nexport default {\n  processQueryData: processDataFromQuery\n};","map":{"version":3,"sources":["C:/Users/toan/Desktop/NDM/chat/modules/LayeredNavigation/processDataFromQuery.tsx"],"names":["apolloClient","GET_LOCATION_FROM_SLUG","Validator","processDataFromQuery","query","typePage","type1ASL","type2ASL","typeSlug","slug","dataQuery","city","district","ward","home_direction","price_range","max","min","area_range","bed_room_number","title","name","page","limit","sort_by","time","type2","type1","type_slug","parent_slug","child_slug","location","propObject","statusCode","locationSlug","locationObject","variables","then","response","isBlank","data","id","JSON","parse","e","Number","processQueryData"],"mappings":"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","sourcesContent":["import {apolloClient} from \"../../utils\";\r\nimport {GET_LOCATION_FROM_SLUG} from \"../../graphql/location/queries\";\r\nimport Validator from \"../validator\";\r\n\r\nconst processDataFromQuery = async (query: any, typePage: string, type1ASL: string, type2ASL: string) => {\r\n  let typeSlug = '';\r\n  if (type2ASL || type1ASL) {\r\n    typeSlug = '/' + query.slug;\r\n  }\r\n  let dataQuery = {\r\n    city: \"\",\r\n    district: \"\",\r\n    ward: \"\",\r\n    home_direction: \"\",\r\n    price_range: {\r\n      max: 0,\r\n      min: 0\r\n    },\r\n    area_range: {\r\n      max: 0,\r\n      min: 0\r\n    },\r\n    bed_room_number:  {\r\n      max: 0,\r\n      min: 0\r\n    },\r\n    title: \"\",\r\n    name: \"\",\r\n    page: 1,\r\n    limit: 48,\r\n    sort_by: {\r\n      time: \"newest\"\r\n    },\r\n    type2: type2ASL,\r\n    type1: type1ASL,\r\n    type_slug: typeSlug,\r\n    parent_slug: query.slug,\r\n    child_slug: query.location\r\n  };\r\n\r\n  let propObject = {\r\n    location: {},\r\n    statusCode: 200,\r\n    dataQuery: dataQuery,\r\n    slug: query.location\r\n  };\r\n  delete query.slug;\r\n  if (typePage === 'ad-sell-lease-location') {\r\n    let locationSlug = query.location;\r\n    let locationObject = await apolloClient.query({query: GET_LOCATION_FROM_SLUG, variables: {\r\n        \"slug\": locationSlug\r\n      }}).then(response => {\r\n      return response;\r\n    });\r\n\r\n    if (!Validator.isBlank(locationObject.data.location) && !Validator.isBlank(locationObject.data.location.city)) {\r\n      propObject.location = locationObject.data.location;\r\n      if (!Validator.isBlank(locationObject.data.location.city.id)) {\r\n        dataQuery.city = locationObject.data.location.city.id;\r\n      }\r\n      if (!Validator.isBlank(locationObject.data.location.district) && !Validator.isBlank(locationObject.data.location.district.id)) {\r\n        dataQuery.district = locationObject.data.location.district.id;\r\n      }\r\n      if (!Validator.isBlank(locationObject.data.location.ward) && !Validator.isBlank(locationObject.data.location.ward.id)) {\r\n        dataQuery.ward = locationObject.data.location.ward.id;\r\n      }\r\n    } else {\r\n      propObject.statusCode = 404;\r\n      return propObject;\r\n    }\r\n  }\r\n\r\n  try {\r\n    if (!Validator.isBlank(query.bed_room_number)) {\r\n      query.bed_room_number = JSON.parse(query.bed_room_number);\r\n    }\r\n    if (!Validator.isBlank(query.price_range)) {\r\n      query.price_range = JSON.parse(query.price_range);\r\n    }\r\n    if (!Validator.isBlank(query.area_range)) {\r\n      query.area_range = JSON.parse(query.area_range);\r\n    }\r\n    if (!Validator.isBlank(query.sort_by)) {\r\n      query.sort_by = JSON.parse(query.sort_by);\r\n    }\r\n  } catch (e) {\r\n    propObject.statusCode = 404;\r\n  }\r\n\r\n  dataQuery = Object.assign(dataQuery, query);\r\n  dataQuery.page = Number(dataQuery.page);\r\n  dataQuery.limit = Number(dataQuery.limit);\r\n  propObject.dataQuery = dataQuery;\r\n  return propObject;\r\n};\r\nexport default {\r\n  processQueryData: processDataFromQuery\r\n}\r\n"]},"metadata":{},"sourceType":"module"}