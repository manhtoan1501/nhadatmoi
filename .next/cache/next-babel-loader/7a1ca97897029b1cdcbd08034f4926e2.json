{"ast":null,"code":"import { apolloClient } from \"../../utils\";\nimport { GET_LOCATION_FROM_SLUG } from \"../../graphql/location/queries\";\nimport Validator from \"../validator\";\n\nconst processQueryData = async (query, typePage) => {\n  let dataQuery = {\n    city: \"\",\n    district: \"\",\n    ward: \"\",\n    home_direction: \"\",\n    price_range: {\n      max: 0,\n      min: 0\n    },\n    area_range: {\n      max: 0,\n      min: 0\n    },\n    bed_room_number: {\n      max: 0,\n      min: 0\n    },\n    title: \"\",\n    name: \"\",\n    page: 1,\n    limit: 12,\n    sort_by: {\n      time: \"newest\"\n    }\n  };\n  let propObject = {\n    location: {},\n    statusCode: 200,\n    dataQuery: dataQuery,\n    slug: query.slug\n  };\n\n  if (typePage === 'ad-sell-lease-location') {\n    let locationSlug = query.slug;\n    let locationObject = await apolloClient.query({\n      query: GET_LOCATION_FROM_SLUG,\n      variables: {\n        \"slug\": locationSlug\n      }\n    }).then(response => {\n      return response;\n    });\n\n    if (!Validator.isBlank(locationObject.data.location) && !Validator.isBlank(locationObject.data.location.city)) {\n      propObject.location = locationObject.data.location;\n\n      if (!Validator.isBlank(locationObject.data.location.city.id)) {\n        dataQuery.city = locationObject.data.location.city.id;\n      }\n\n      if (!Validator.isBlank(locationObject.data.location.district) && !Validator.isBlank(locationObject.data.location.district.id)) {\n        dataQuery.district = locationObject.data.location.district.id;\n      }\n\n      if (!Validator.isBlank(locationObject.data.location.ward) && !Validator.isBlank(locationObject.data.location.ward.id)) {\n        dataQuery.ward = locationObject.data.location.ward.id;\n      }\n    } else {\n      propObject.statusCode = 404;\n      return propObject;\n    }\n  }\n\n  try {\n    if (!Validator.isBlank(query.bed_room_number)) {\n      query.bed_room_number = JSON.parse(query.bed_room_number);\n    }\n\n    if (!Validator.isBlank(query.price_range)) {\n      query.price_range = JSON.parse(query.price_range);\n    }\n\n    if (!Validator.isBlank(query.area_range)) {\n      query.area_range = JSON.parse(query.area_range);\n    }\n\n    if (!Validator.isBlank(query.sort_by)) {\n      query.sort_by = JSON.parse(query.sort_by);\n    }\n  } catch (e) {\n    propObject.statusCode = 404;\n  }\n\n  dataQuery = Object.assign(dataQuery, query);\n  dataQuery.page = Number(dataQuery.page);\n  dataQuery.limit = Number(dataQuery.limit);\n  propObject.dataQuery = dataQuery;\n  return propObject;\n};\n\nexport default {\n  processQueryData\n};","map":null,"metadata":{},"sourceType":"module"}