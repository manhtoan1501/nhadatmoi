{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Validator from \"../validator\";\nimport QueryString from \"query-string\";\n\nconst processQueryString = data => {\n  let dataQueryNew = {};\n\n  if (!Validator.isBlank(data.title)) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      title: data.title\n    });\n  }\n\n  if (!Validator.isBlank(data.name)) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      name: data.name\n    });\n  }\n\n  if (!Validator.isBlank(data.city)) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      city: data.city\n    });\n  }\n\n  if (!Validator.isBlank(data.district)) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      district: data.district\n    });\n  }\n\n  if (!Validator.isBlank(data.ward)) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      ward: data.ward\n    });\n  }\n\n  if (!Validator.isBlank(data.home_direction)) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      home_direction: data.home_direction\n    });\n  }\n\n  if (!Validator.isBlank(data.area_range) && (!Validator.isBlank(data.area_range.max) || !Validator.isBlank(data.area_range.min))) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      area_range: data.area_range\n    });\n  }\n\n  if (!Validator.isBlank(data.price_range) && (!Validator.isBlank(data.price_range.max) || !Validator.isBlank(data.price_range.min))) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      price_range: data.price_range\n    });\n  }\n\n  if (!Validator.isBlank(data.bed_room_number) && (!Validator.isBlank(data.bed_room_number.max) || !Validator.isBlank(data.bed_room_number.min))) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      bed_room_number: data.bed_room_number\n    });\n  }\n\n  if (!Validator.isBlank(data.sort_by)) {\n    if (!Validator.isBlank(data.sort_by.time) && data.sort_by.time === \"newest\") {} else {\n      dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n        sort_by: data.sort_by\n      });\n    }\n  }\n\n  return dataQueryNew;\n};\n\nconst processQueryUrl = (data, typePage) => {\n  let dataQueryNew = {};\n\n  if (!Validator.isBlank(data.title)) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      title: data.title\n    });\n  }\n\n  if (!Validator.isBlank(data.name)) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      name: data.name\n    });\n  }\n\n  if (!Validator.isBlank(data.page) && data.page !== 1) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      page: data.page\n    });\n  }\n\n  if (!Validator.isBlank(data.limit) && data.limit !== 12) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      limit: data.limit\n    });\n  }\n\n  if (!Validator.isBlank(data.home_direction)) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      home_direction: data.home_direction\n    });\n  }\n\n  if (!Validator.isBlank(data.area_range) && (!Validator.isBlank(data.area_range.max) || !Validator.isBlank(data.area_range.min))) {\n    let areaRangeString = _JSON$stringify(data.area_range);\n\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      area_range: areaRangeString\n    });\n  }\n\n  if (!Validator.isBlank(data.price_range) && (!Validator.isBlank(data.price_range.max) || !Validator.isBlank(data.price_range.min))) {\n    let areaRangeString = _JSON$stringify(data.price_range);\n\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      price_range: areaRangeString\n    });\n  }\n\n  if (!Validator.isBlank(data.bed_room_number) && (!Validator.isBlank(data.bed_room_number.max) || !Validator.isBlank(data.bed_room_number.min))) {\n    let areaRangeString = _JSON$stringify(data.bed_room_number);\n\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      bed_room_number: areaRangeString\n    });\n  }\n\n  if (!Validator.isBlank(data.sort_by)) {\n    if (!Validator.isBlank(data.sort_by.time) && data.sort_by.time === \"newest\") {} else {\n      let sortByString = _JSON$stringify(data.sort_by);\n\n      dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n        sort_by: sortByString\n      });\n    }\n  }\n\n  return QueryString.stringify(dataQueryNew, {\n    arrayFormat: 'bracket'\n  });\n};\n\nexport default {\n  processQueryUrl,\n  processQueryString\n};","map":null,"metadata":{},"sourceType":"module"}