{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\manh nhan\\\\Desktop\\\\Nhadatmoi\\\\components\\\\Chat\\\\Index.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Popper from '@material-ui/core/Popper';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { Grid, InputBase, Fade, Typography, Paper, CardHeader, Avatar, TextField, Divider, Tooltip, Input, IconButton } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport TagFacesIcon from '@material-ui/icons/TagFaces';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport CloseIcon from '@material-ui/icons/Close';\nimport SendIcon from '@material-ui/icons/Send';\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport 'moment/locale/es';\nmoment.locale('vi');\nimport { dataEmoji, arrChat, giphyDefault, theme, useStyles, themeTextfieldAdmin, themeTextfieldUser, StyledBadge } from \"./constant\"; // const useStyles = makeStyles((theme: Theme) =>\n//   createStyles({\n//     root: {\n//       width: 550,\n//       zIndex: 900,\n//     },\n//     textAdmin: {\n//       // borderRadius: \"8px!important\",\n//       backgroundColor: \"#DBF4FD\",\n//       color: \"white\",\n//       // fontSize: \"13px\",\n//       border: \"1px \"\n//     },\n//     textUser: {\n//       backgroundColor: \"white\",\n//       color: \"black\",\n//       // fontSize: \"13px\",\n//     },\n//     textFieldChatContent: {\n//       marginLeft: \"30px\"\n//     },\n//     dispalyImageGiphy: {\n//       width: \"75px\", \n//       height: \"60px\", \n//       display: 'inline-block', \n//       padding: '2px'\n//     },\n//     imgListGiphy: {\n//       width:\"100%\", \n//       height: \"100%\", \n//       borderRadius: '10px',\n//     },\n//     viewContentImageGiphy: {\n//       // textAlign: \"right\",\n//       float: \"right\",\n//       width: \"250px\", \n//       height: \"150px\", \n//       padding: \"5px 0px 5px 0px\",\n//     },\n//     imgGiphy: {\n//       width:\"100%\", \n//       height: \"100%\", \n//     },\n//     textFieldUserChatContent: {\n//       marginLeft: \"30px\", \n//       padding: '5px', \n//       borderRadius: \"16px!important\"\n//     },\n//     errInternet: {\n//       // position: \"absolute\",\n//       // bottom: '60px',\n//       padding: \"20px\",\n//       color: \"red\",\n//       fontSize: '13px',\n//     },\n//     texting: {\n//       fontSize: '13px',\n//       color: '#aaa',\n//       padding: \"5px\",\n//       textAlign: 'right'\n//     },\n//     iconWaring: {\n//       fontSize:\"20px\",\n//     },\n//     rootPaper: {\n//       display: 'flex',\n//       textAlign: 'center',\n//       margin: \"5px 5px 5px 5px\",\n//       backgroundColor: \"#f0f0f0\",\n//       alignItems: 'center',\n//       height: \"27px\",\n//       width: \"92%\",\n//     },\n//     inputBaseGiphy: {\n//       marginLeft: theme.spacing(1),\n//       flex: 1,\n//     },\n//     buttonEmojiGiphy: {\n//       border: '1px solid white', \n//       backgroundColor: \"#045EA8\",\n//       color: 'white', \n//       borderRadius: \"10px\", \n//       padding: \"5px\",\n//       marginLeft: \"5px\"\n//     },\n//     iconButton: {\n//       padding: 3,\n//     },\n//     inputBase: {\n//       padding: '2px 4px',\n//       display: 'flex',\n//       alignItems: 'center',\n//       width: \"100%\",\n//       position: \"absolute\",\n//       boxShadow: \"0px -1px 3px black\",\n//       // borderTop: \"3px solid gray\",\n//       borderRadius: \"0px 0px\",\n//       bottom: \"0px\"\n//     },\n//     input: {\n//       marginLeft: theme.spacing(1),\n//       height: 50 ,\n//       flex: 1,\n//     },\n//     divider: {\n//       height: 28,\n//       margin: 4,\n//     },\n//     typography: {\n//       padding: theme.spacing(2),\n//     },\n//     positionSizeViewChat: {\n//       backgroundColor: \"white\",\n//       zIndex: 900,\n//       height:\"550px\", \n//       width: \"350px\",\n//       position: \"fixed\",\n//       right: '30px',\n//       bottom: \"70px\",\n//       boxShadow: \"0px -1px 3px #b3c5cc\",\n//     },\n//     emojiGiphy: {\n//       height:\"200px\", \n//       width: \"320px\",\n//       textAlign: 'center',\n//       // backgroundColor: \"#bff2ed\",\n//       borderTop: '1px solid gray',\n//     },\n//     textField: {\n//       position: \"absolute\",\n//       bottom: \"0px\"\n//     },\n//     exampleWrapper: {\n//       position: 'fixed',\n//       right: \"60px\", \n//       bottom: \"2px\",\n//     },\n//     large: {\n//       width: theme.spacing(7),\n//       height: theme.spacing(7),\n//     },\n//     avatarAdminText: {\n//       width: theme.spacing(3),\n//       height: theme.spacing(3),\n//     },\n//     sizeAvatarSmall: {\n//       width: theme.spacing(5),\n//       height: theme.spacing(5),\n//     },\n//     positionAvatar: {\n//       position: 'fixed',\n//       right: \"15px\", \n//       bottom: \"80px\",\n//     },\n//     viewAvatarChatContent: {\n//       float: \"left\",\n//       marginTop: \"10px\"\n//     },\n//     radioGroup: {\n//       margin: theme.spacing(1, 0),\n//     },\n//     avatar: {\n//       backgroundColor: \"blue\",\n//     },\n//     media: {\n//       height: 100,\n//       backgroundColor: \"blue\"\n//     },\n//     hearder: {\n//       backgroundColor: \"#1a75ff\",\n//       color: \"white\"\n//     },\n//     speedDial: {\n//       position: 'absolute',\n//       '&.MuiSpeedDial-directionUp, &.MuiSpeedDial-directionLeft': {\n//         bottom: theme.spacing(2),\n//         right: theme.spacing(2),\n//       },\n//       '&.MuiSpeedDial-directionDown, &.MuiSpeedDial-directionRight': {\n//         top: theme.spacing(2),\n//         left: theme.spacing(2),\n//       },\n//     },\n//     sizeIcon: {\n//       fontSize: '30px'\n//     },\n//     textSizeNewDate: {\n//       fontSize: \"13px\"\n//     }\n//   }),\n// );\n// const StyledBadge = withStyles((theme: Theme) =>\n//   createStyles({\n//     badge: {\n//       backgroundColor: '#44b700',\n//       color: '#44b700',\n//       boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\n//       '&::after': {\n//         position: 'absolute',\n//         top: 0,\n//         left: 0,\n//         width: '100%',\n//         height: '100%',\n//         borderRadius: '50%',\n//         animation: '$ripple 1.2s infinite ease-in-out',\n//         border: '1px solid currentColor',\n//         content: '\"\"',\n//       },\n//     },\n//     '@keyframes ripple': {\n//       '0%': {\n//         transform: 'scale(.8)',\n//         opacity: 1,\n//       },\n//       '100%': {\n//         transform: 'scale(2.4)',\n//         opacity: 0,\n//       },\n//     },\n//   }),\n// )(Badge);\n\nvar valueInputChat = \"\";\nexport default function PositionedPopper() {\n  var _this = this;\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      anchorEl = _React$useState2[0],\n      setAnchorEl = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      open = _React$useState4[0],\n      setOpen = _React$useState4[1];\n\n  var _React$useState5 = React.useState(),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      placement = _React$useState6[0],\n      setPlacement = _React$useState6[1];\n\n  var _React$useState7 = React.useState(true),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      online = _React$useState8[0],\n      setOnline = _React$useState8[1];\n\n  var _React$useState9 = React.useState(false),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      internet = _React$useState10[0],\n      setInternet = _React$useState10[1];\n\n  var classes = useStyles();\n\n  var _React$useState11 = React.useState(false),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      texting = _React$useState12[0],\n      setTexting = _React$useState12[1];\n\n  var _React$useState13 = React.useState(\"\"),\n      _React$useState14 = _slicedToArray(_React$useState13, 2),\n      valueInput = _React$useState14[0],\n      setValueInput = _React$useState14[1];\n\n  var _React$useState15 = React.useState(),\n      _React$useState16 = _slicedToArray(_React$useState15, 2),\n      giphyData = _React$useState16[0],\n      setGiphyData = _React$useState16[1];\n\n  var _React$useState17 = React.useState(false),\n      _React$useState18 = _slicedToArray(_React$useState17, 2),\n      openEmojiGiphy = _React$useState18[0],\n      setOpenEmojiGiphy = _React$useState18[1];\n\n  var _React$useState19 = React.useState(),\n      _React$useState20 = _slicedToArray(_React$useState19, 2),\n      indexEmoji = _React$useState20[0],\n      setIndexEmoji = _React$useState20[1];\n\n  var _React$useState21 = React.useState(\"\"),\n      _React$useState22 = _slicedToArray(_React$useState21, 2),\n      valueSearchGiphy = _React$useState22[0],\n      setValueSearchGiphy = _React$useState22[1];\n\n  var onCloseChat = function onCloseChat() {\n    setOpen(false);\n  };\n\n  var setOnKeyPress = function setOnKeyPress(event) {\n    setTexting(true);\n  };\n\n  var setOnBlur = function setOnBlur(event) {\n    setTexting(true);\n  };\n\n  var setOnKeyDown = function setOnKeyDown(event) {\n    if (event.keyCode == 13) {\n      arrChat.push({\n        message: event.target.value,\n        type: 'user',\n        image: {\n          url: \"\",\n          width: \"\",\n          height: \"\"\n        },\n        date: String(new Date().getTime())\n      });\n      setValueInput(\"\");\n    }\n  };\n\n  var senMesssage = function senMesssage() {\n    arrChat.push({\n      message: valueInput,\n      type: 'user',\n      image: {\n        url: \"\",\n        width: \"\",\n        height: \"\"\n      },\n      date: String(new Date().getTime())\n    });\n    setValueInput(\"\");\n  };\n\n  var renderHeader = function renderHeader() {\n    return __jsx(CardHeader, {\n      className: classes.hearder,\n      avatar: __jsx(StyledBadge, {\n        overlap: \"circle\",\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'right'\n        },\n        variant: online ? \"dot\" : \"standard\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }\n      }, __jsx(Avatar, {\n        className: classes.sizeAvatarSmall,\n        alt: \"nhadatmoi.net\",\n        src: \"https://image.crisp.chat/avatar/operator/da8d4459-5ea3-4119-bca1-9170f49ee69c/240/?1585999578742&quot\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 13\n        }\n      })),\n      title: \"Nguy\\u1EC5n Thanh Huy\\u1EC1n\",\n      action: __jsx(IconButton, {\n        color: \"inherit\",\n        \"aria-label\": \"settings\",\n        onClick: function onClick() {\n          return onCloseChat();\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }\n      }, __jsx(CloseIcon, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }\n      })),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 7\n      }\n    });\n  };\n\n  var setChangeInput = function setChangeInput(value) {\n    setValueInput(value);\n  };\n\n  var api = \"https://api.giphy.com/v1/gifs/search?\";\n  var apiKey = \"api_key=UgTMyvovmg74m8fPN6qYiB623nwS1IPc\";\n  var limit = \"&limit=20\";\n  var offset = \"&offset=0\";\n  var rating = \"&rating=G\";\n  var lang = \"&lang=vi\";\n\n  var searchGiphy = function searchGiphy(event) {\n    var query, url, getData;\n    return _regeneratorRuntime.async(function searchGiphy$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setValueSearchGiphy(event.target.value);\n            query = \"&q=\".concat(event.target.value);\n            url = api + apiKey + query + limit + offset + rating + lang;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(axios.get(url, {\n              params: {\n                ID: 12345\n              }\n            }).then(function (response) {// setGiphyData(response.data.data)\n            }));\n\n          case 5:\n            getData = _context.sent;\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }; // let dataSearch: any = []\n\n\n  var dataSearch = giphyDefault; // if(Array.isArray(giphyData)){\n  //   giphyData.map((item: any, index: number) => {\n  //     // dataSearch.push({ image:  item.images.original.url })\n  //     dataSearch.push({ \n  //       image: {\n  //         url: item.images.fixed_width.url,\n  //         height: item.images.fixed_width.height,\n  //         width: item.images.fixed_width.width,\n  //       }})\n  //   })\n  // }\n\n  var setItemGiphy = function setItemGiphy(index, name) {\n    setOpenEmojiGiphy(!openEmojiGiphy);\n\n    if (name == \"giphyDefault\") {\n      arrChat.push({\n        message: \"\",\n        type: 'user',\n        image: {\n          url: giphyDefault[index].image.url,\n          width: giphyDefault[index].image.width,\n          height: giphyDefault[index].image.height\n        },\n        date: String(new Date().getTime())\n      });\n    } else if (name == \"dataSearch\") {\n      arrChat.push({\n        message: \"\",\n        type: 'user',\n        image: {\n          url: giphyDefault[index].image.url,\n          width: giphyDefault[index].image.width,\n          height: giphyDefault[index].image.height\n        },\n        date: String(new Date().getTime())\n      });\n    }\n  };\n\n  var renderEmojiGiphy = function renderEmojiGiphy() {\n    return __jsx(\"div\", {\n      className: classes.emojiGiphy,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 7\n      }\n    }, __jsx(\"button\", {\n      className: classes.buttonEmojiGiphy,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 11\n      }\n    }, \"Bi\\u1EC3u t\\u01B0\\u1EE3ng\"), __jsx(\"button\", {\n      className: classes.buttonEmojiGiphy,\n      style: {\n        backgroundColor: \"#85adad\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 11\n      }\n    }, \"\\u1EA2nh \\u0111\\u1ED9ng\"), __jsx(Paper, {\n      component: \"form\",\n      className: classes.rootPaper,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }\n    }, __jsx(IconButton, {\n      type: \"submit\",\n      className: classes.iconButton,\n      \"aria-label\": \"search\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 11\n      }\n    }, __jsx(SearchIcon, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 13\n      }\n    })), __jsx(InputBase, {\n      onChange: function onChange(e) {\n        return searchGiphy(e);\n      },\n      className: classes.inputBaseGiphy,\n      placeholder: \"T\\xECm ki\\u1EBFm\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 11\n      }\n    })), __jsx(\"div\", {\n      style: {\n        overflowX: 'auto',\n        height: '130px'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 9\n      }\n    }, dataEmoji.map(function (item, index) {\n      return __jsx(\"div\", {\n        onClick: function onClick() {\n          return setIndexEmoji(index);\n        },\n        key: index,\n        style: {\n          display: 'inline-block',\n          fontSize: '20px',\n          cursor: \"pointer\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 15\n        }\n      }, item[\"native\"]);\n    })));\n  };\n\n  var renderContentChat = function renderContentChat() {\n    return __jsx(\"div\", {\n      style: {\n        overflowY: \"auto\",\n        padding: \"8px\",\n        height: \"430px\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 7\n      }\n    }, __jsx(Typography, {\n      align: \"center\",\n      className: classes.textSizeNewDate,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 9\n      }\n    }, moment().format('LLL')), __jsx(Divider, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 9\n      }\n    }), arrChat.map(function (item, index) {\n      var checkNewDate = false;\n\n      if (index > 0 && moment(Number(arrChat[index - 1].date)).format('YYYY-MM-DD') != moment(Number(arrChat[index].date)).format('YYYY-MM-DD')) {\n        checkNewDate = true;\n      }\n\n      var setViewAvatar = false;\n\n      if (item.type === 'admin' && index > 0 && (index === arrChat.length || arrChat[index - 1].type != arrChat[index].type)) {\n        setViewAvatar = true;\n      }\n\n      return __jsx(\"div\", {\n        key: index,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 13\n        }\n      }, checkNewDate && __jsx(Typography, {\n        align: \"center\",\n        className: classes.textSizeNewDate,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 33\n        }\n      }, moment(Number(item.date)).format(\"LLL\"), \" \", __jsx(Divider, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 59\n        }\n      })), item.type === 'admin' ? __jsx(ThemeProvider, {\n        theme: themeTextfieldAdmin,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 17\n        }\n      }, __jsx(\"div\", {\n        className: classes.viewAvatarChatContent,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 19\n        }\n      }, setViewAvatar ? __jsx(Avatar, {\n        className: classes.avatarAdminText,\n        alt: \"nhadatmoi.net\",\n        src: \"https://image.crisp.chat/avatar/operator/da8d4459-5ea3-4119-bca1-9170f49ee69c/240/?1585999578742&quot\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 25\n        }\n      }) : \"\"), __jsx(\"div\", {\n        className: classes.textFieldChatContent,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 19\n        }\n      }, item.image.url ? __jsx(Tooltip, {\n        title: moment(Number(item.date)).fromNow(),\n        placement: \"top\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 25\n        }\n      }, __jsx(\"div\", {\n        className: classes.viewContentImageGiphy,\n        style: {\n          width: \"\".concat(item.image.width, \"px\"),\n          height: \"\".concat(item.image.height, \"px\")\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 27\n        }\n      }, __jsx(\"img\", {\n        className: classes.imgGiphy,\n        alt: \"giphy\",\n        src: item.image.url,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 29\n        }\n      }))) : __jsx(Tooltip, {\n        title: moment(Number(item.date)).fromNow(),\n        placement: \"top\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 25\n        }\n      }, __jsx(TextField, {\n        fullWidth: true,\n        label: \"\",\n        className: classes.textAdmin,\n        value: item.message,\n        margin: \"dense\",\n        id: \"outlined-basic\",\n        multiline: true,\n        InputProps: {\n          readOnly: true\n        },\n        variant: \"outlined\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 27\n        }\n      })))) : __jsx(ThemeProvider, {\n        theme: themeTextfieldUser,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 17\n        }\n      }, item.image.url ? __jsx(Tooltip, {\n        title: moment(Number(item.date)).fromNow(),\n        placement: \"top\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 23\n        }\n      }, __jsx(\"div\", {\n        className: classes.viewContentImageGiphy,\n        style: {\n          width: \"\".concat(item.image.width, \"px\"),\n          height: \"\".concat(item.image.height, \"px\")\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 25\n        }\n      }, __jsx(\"img\", {\n        className: classes.imgGiphy,\n        alt: \"giphy\",\n        src: item.image.url,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 27\n        }\n      }))) : __jsx(Tooltip, {\n        title: moment(Number(item.date)).fromNow(),\n        placement: \"top\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 23\n        }\n      }, __jsx(\"div\", {\n        className: classes.textFieldUserChatContent,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 25\n        }\n      }, __jsx(\"span\", {\n        style: {\n          fontSize: '100px'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 27\n        }\n      }, \"\\u23EF\"), __jsx(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 27\n        }\n      }, \"I will display \\u23EF\"), __jsx(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 27\n        }\n      }, \"I will display \\u23EF\"), __jsx(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 27\n        }\n      }, item.message)))));\n    }), __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 9\n      }\n    }, openEmojiGiphy && renderEmojiGiphy()));\n  };\n\n  console.log(\"valueInputChat\", valueInputChat);\n  valueInputChat = valueInputChat + \"🎅🏼\" + valueInput;\n\n  var renderInput = function renderInput() {\n    return __jsx(Paper, {\n      component: \"form\",\n      className: classes.inputBase,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 7\n      }\n    }, __jsx(ThemeProvider, {\n      theme: theme,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564,\n        columnNumber: 9\n      }\n    }, __jsx(Input, {\n      fullWidth: true // disabled={internet}\n      ,\n      margin: \"dense\",\n      id: \"outlined-basic\",\n      autoFocus: true // value={valueInput}\n      ,\n      value: \"🎅🏼🎅🏼🎅🏼🎅🏼🎅🏼🎅🏼\" + \"text text text &#129409;\",\n      multiline: true,\n      onChange: function onChange(e) {\n        return setChangeInput(e.target.value);\n      },\n      onKeyPress: function onKeyPress(e) {\n        return setOnKeyPress(e);\n      },\n      onBlur: function onBlur(e) {\n        return setOnBlur(e);\n      },\n      onKeyDown: function onKeyDown(e) {\n        return setOnKeyDown(e);\n      },\n      placeholder: \"Nh\\u1EADp tin nh\\u1EAFn ...\",\n      autoComplete: \"false\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 11\n      }\n    }), openEmojiGiphy ? __jsx(Tooltip, {\n      title: \"Ch\\xE8n bi\\u1EC3u t\\u01B0\\u1EE3ng\",\n      placement: \"top\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 15\n      }\n    }, __jsx(ExpandMoreIcon, {\n      className: classes.sizeIcon,\n      onClick: function onClick() {\n        return setOpenEmojiGiphy(!openEmojiGiphy);\n      },\n      color: \"primary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 17\n      }\n    })) : __jsx(Tooltip, {\n      title: \"Ch\\xE8n bi\\u1EC3u t\\u01B0\\u1EE3ng\",\n      placement: \"top\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589,\n        columnNumber: 15\n      }\n    }, __jsx(TagFacesIcon, {\n      className: classes.sizeIcon,\n      onClick: function onClick() {\n        return setOpenEmojiGiphy(!openEmojiGiphy);\n      },\n      color: \"primary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 17\n      }\n    })), valueInput ? __jsx(Tooltip, {\n      title: \"Th\\xEAm t\\u1EADp tin\",\n      placement: \"top\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 15\n      }\n    }, __jsx(SendIcon, {\n      onClick: senMesssage,\n      className: classes.sizeIcon,\n      color: \"primary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 17\n      }\n    })) : __jsx(Tooltip, {\n      title: \"Th\\xEAm t\\u1EADp tin\",\n      placement: \"top\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 604,\n        columnNumber: 15\n      }\n    }, __jsx(AddCircleOutlineIcon, {\n      className: classes.sizeIcon,\n      color: \"primary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 17\n      }\n    }))));\n  };\n\n  var viewChat = function viewChat() {\n    return __jsx(Popper, {\n      open: open,\n      anchorEl: anchorEl,\n      placement: placement,\n      transition: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 7\n      }\n    }, function (_ref) {\n      var TransitionProps = _ref.TransitionProps;\n      return __jsx(Fade, _extends({}, TransitionProps, {\n        timeout: 300,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 622,\n          columnNumber: 11\n        }\n      }), __jsx(Paper, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 13\n        }\n      }, __jsx(\"div\", {\n        className: classes.positionSizeViewChat,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 15\n        }\n      }, renderHeader(), renderContentChat(), renderInput())));\n    });\n  };\n\n  var handleClick = function handleClick(newPlacement) {\n    setOpen(true);\n    setPlacement(newPlacement);\n  };\n\n  var renderAvatar = function renderAvatar() {\n    return __jsx(\"div\", {\n      className: classes.positionAvatar,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 643,\n        columnNumber: 7\n      }\n    }, __jsx(StyledBadge, {\n      overlap: \"circle\",\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'right'\n      } // variant= { online ? \"dot\" : \"standard\" }\n      ,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644,\n        columnNumber: 9\n      }\n    }, __jsx(Avatar, {\n      onClick: function onClick() {\n        return handleClick(\"top-start\");\n      },\n      className: classes.large,\n      alt: \"nhadatmoi.net\",\n      src: \"https://image.crisp.chat/avatar/operator/da8d4459-5ea3-4119-bca1-9170f49ee69c/240/?1585999578742&quot\" // src=\"https://file.vforum.vn/hinh/2018/03/hinh-mau-trang-tinh-tron-hinh-nen-anh-dai-dien-anh-bia-toan-mau-trang1.png\"\n      ,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 11\n      }\n    })));\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 665,\n      columnNumber: 5\n    }\n  }, viewChat(), __jsx(Grid, {\n    container: true,\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 667,\n      columnNumber: 7\n    }\n  }, __jsx(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 668,\n      columnNumber: 9\n    }\n  }, !open && renderAvatar())));\n}","map":{"version":3,"sources":["C:/Users/manh nhan/Desktop/Nhadatmoi/components/Chat/Index.tsx"],"names":["React","Popper","ThemeProvider","Grid","InputBase","Fade","Typography","Paper","CardHeader","Avatar","TextField","Divider","Tooltip","Input","IconButton","SearchIcon","AddCircleOutlineIcon","TagFacesIcon","ExpandMoreIcon","CloseIcon","SendIcon","axios","moment","locale","dataEmoji","arrChat","giphyDefault","theme","useStyles","themeTextfieldAdmin","themeTextfieldUser","StyledBadge","valueInputChat","PositionedPopper","useState","anchorEl","setAnchorEl","open","setOpen","placement","setPlacement","online","setOnline","internet","setInternet","classes","texting","setTexting","valueInput","setValueInput","giphyData","setGiphyData","openEmojiGiphy","setOpenEmojiGiphy","indexEmoji","setIndexEmoji","valueSearchGiphy","setValueSearchGiphy","onCloseChat","setOnKeyPress","event","setOnBlur","setOnKeyDown","keyCode","push","message","target","value","type","image","url","width","height","date","String","Date","getTime","senMesssage","renderHeader","hearder","vertical","horizontal","sizeAvatarSmall","setChangeInput","api","apiKey","limit","offset","rating","lang","searchGiphy","query","get","params","ID","then","response","getData","dataSearch","setItemGiphy","index","name","renderEmojiGiphy","emojiGiphy","buttonEmojiGiphy","backgroundColor","rootPaper","iconButton","e","inputBaseGiphy","overflowX","map","item","display","fontSize","cursor","renderContentChat","overflowY","padding","textSizeNewDate","format","checkNewDate","Number","setViewAvatar","length","viewAvatarChatContent","avatarAdminText","textFieldChatContent","fromNow","viewContentImageGiphy","imgGiphy","textAdmin","readOnly","textFieldUserChatContent","console","log","renderInput","inputBase","sizeIcon","viewChat","TransitionProps","positionSizeViewChat","handleClick","newPlacement","renderAvatar","positionAvatar","large","root"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAA4C,0BAA5C;AACA,SAAyBC,aAAzB,QAA8C,0BAA9C;AACA,SACEC,IADF,EACgBC,SADhB,EAC2BC,IAD3B,EAEEC,UAFF,EAEcC,KAFd,EAE2BC,UAF3B,EAG6BC,MAH7B,EAGqCC,SAHrC,EAISC,OAJT,EAIkBC,OAJlB,EAI2BC,KAJ3B,EAIwCC,UAJxC,QAKO,mBALP;AAMA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,oBAAP,MAAiC,qCAAjC;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,KAAP,MAA4B,OAA5B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAO,kBAAP;AACAA,MAAM,CAACC,MAAP,CAAc,IAAd;AAEA,SACEC,SADF,EACcC,OADd,EACuBC,YADvB,EACqCC,KADrC,EAC4CC,SAD5C,EAEEC,mBAFF,EAEuBC,kBAFvB,EAE2CC,WAF3C,QAGO,YAHP,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,IAAIC,cAAc,GAAG,EAArB;AAEA,eAAe,SAASC,gBAAT,GAA4B;AAAA;;AAAA,wBACTjC,KAAK,CAACkC,QAAN,CAAyC,IAAzC,CADS;AAAA;AAAA,MAClCC,QADkC;AAAA,MACxBC,WADwB;;AAAA,yBAEjBpC,KAAK,CAACkC,QAAN,CAAe,KAAf,CAFiB;AAAA;AAAA,MAElCG,IAFkC;AAAA,MAE5BC,OAF4B;;AAAA,yBAGPtC,KAAK,CAACkC,QAAN,EAHO;AAAA;AAAA,MAGlCK,SAHkC;AAAA,MAGvBC,YAHuB;;AAAA,yBAIbxC,KAAK,CAACkC,QAAN,CAAwB,IAAxB,CAJa;AAAA;AAAA,MAIlCO,MAJkC;AAAA,MAI1BC,SAJ0B;;AAAA,yBAKT1C,KAAK,CAACkC,QAAN,CAAwB,KAAxB,CALS;AAAA;AAAA,MAKlCS,QALkC;AAAA,MAKxBC,WALwB;;AAMzC,MAAMC,OAAO,GAAGjB,SAAS,EAAzB;;AANyC,0BAOX5B,KAAK,CAACkC,QAAN,CAAwB,KAAxB,CAPW;AAAA;AAAA,MAOlCY,OAPkC;AAAA,MAOzBC,UAPyB;;AAAA,0BAQL/C,KAAK,CAA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","sourcesContent":["import React from 'react';\r\nimport Popper, { PopperPlacementType } from '@material-ui/core/Popper';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport { \r\n  Grid, Button, InputBase, Fade,\r\n  Typography, Paper, Card, CardHeader, CardContent,\r\n  CardActionArea, CardMedia, Avatar, TextField,\r\n  Badge, Divider, Tooltip, Input, Chip, IconButton\r\n} from '@material-ui/core';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport TagFacesIcon from '@material-ui/icons/TagFaces';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport axios, {Method} from \"axios\";\r\nimport moment from \"moment\"\r\nimport 'moment/locale/es'   \r\nmoment.locale('vi')\r\nimport { Theme, makeStyles, withStyles, createStyles } from '@material-ui/core/styles';\r\nimport { \r\n  dataEmoji,  arrChat, giphyDefault, theme, useStyles,\r\n  themeTextfieldAdmin, themeTextfieldUser, StyledBadge\r\n} from \"./constant\"\r\n\r\n// const useStyles = makeStyles((theme: Theme) =>\r\n//   createStyles({\r\n//     root: {\r\n//       width: 550,\r\n//       zIndex: 900,\r\n//     },\r\n//     textAdmin: {\r\n//       // borderRadius: \"8px!important\",\r\n//       backgroundColor: \"#DBF4FD\",\r\n//       color: \"white\",\r\n//       // fontSize: \"13px\",\r\n//       border: \"1px \"\r\n//     },\r\n//     textUser: {\r\n//       backgroundColor: \"white\",\r\n//       color: \"black\",\r\n//       // fontSize: \"13px\",\r\n//     },\r\n//     textFieldChatContent: {\r\n//       marginLeft: \"30px\"\r\n//     },\r\n   \r\n//     dispalyImageGiphy: {\r\n//       width: \"75px\", \r\n//       height: \"60px\", \r\n//       display: 'inline-block', \r\n//       padding: '2px'\r\n//     },\r\n//     imgListGiphy: {\r\n//       width:\"100%\", \r\n//       height: \"100%\", \r\n//       borderRadius: '10px',\r\n//     },\r\n//     viewContentImageGiphy: {\r\n//       // textAlign: \"right\",\r\n//       float: \"right\",\r\n//       width: \"250px\", \r\n//       height: \"150px\", \r\n//       padding: \"5px 0px 5px 0px\",\r\n//     },\r\n//     imgGiphy: {\r\n//       width:\"100%\", \r\n//       height: \"100%\", \r\n//     },\r\n//     textFieldUserChatContent: {\r\n//       marginLeft: \"30px\", \r\n//       padding: '5px', \r\n//       borderRadius: \"16px!important\"\r\n//     },\r\n//     errInternet: {\r\n//       // position: \"absolute\",\r\n//       // bottom: '60px',\r\n//       padding: \"20px\",\r\n//       color: \"red\",\r\n//       fontSize: '13px',\r\n//     },\r\n//     texting: {\r\n//       fontSize: '13px',\r\n//       color: '#aaa',\r\n//       padding: \"5px\",\r\n//       textAlign: 'right'\r\n//     },\r\n//     iconWaring: {\r\n//       fontSize:\"20px\",\r\n//     },\r\n//     rootPaper: {\r\n//       display: 'flex',\r\n//       textAlign: 'center',\r\n//       margin: \"5px 5px 5px 5px\",\r\n//       backgroundColor: \"#f0f0f0\",\r\n//       alignItems: 'center',\r\n//       height: \"27px\",\r\n//       width: \"92%\",\r\n//     },\r\n//     inputBaseGiphy: {\r\n//       marginLeft: theme.spacing(1),\r\n//       flex: 1,\r\n//     },\r\n//     buttonEmojiGiphy: {\r\n//       border: '1px solid white', \r\n//       backgroundColor: \"#045EA8\",\r\n//       color: 'white', \r\n//       borderRadius: \"10px\", \r\n//       padding: \"5px\",\r\n//       marginLeft: \"5px\"\r\n//     },\r\n//     iconButton: {\r\n//       padding: 3,\r\n//     },\r\n//     inputBase: {\r\n//       padding: '2px 4px',\r\n//       display: 'flex',\r\n//       alignItems: 'center',\r\n//       width: \"100%\",\r\n//       position: \"absolute\",\r\n//       boxShadow: \"0px -1px 3px black\",\r\n//       // borderTop: \"3px solid gray\",\r\n//       borderRadius: \"0px 0px\",\r\n//       bottom: \"0px\"\r\n//     },\r\n//     input: {\r\n//       marginLeft: theme.spacing(1),\r\n//       height: 50 ,\r\n//       flex: 1,\r\n//     },\r\n//     divider: {\r\n//       height: 28,\r\n//       margin: 4,\r\n//     },\r\n//     typography: {\r\n//       padding: theme.spacing(2),\r\n//     },\r\n//     positionSizeViewChat: {\r\n//       backgroundColor: \"white\",\r\n//       zIndex: 900,\r\n//       height:\"550px\", \r\n//       width: \"350px\",\r\n//       position: \"fixed\",\r\n//       right: '30px',\r\n//       bottom: \"70px\",\r\n//       boxShadow: \"0px -1px 3px #b3c5cc\",\r\n//     },\r\n//     emojiGiphy: {\r\n//       height:\"200px\", \r\n//       width: \"320px\",\r\n//       textAlign: 'center',\r\n//       // backgroundColor: \"#bff2ed\",\r\n//       borderTop: '1px solid gray',\r\n//     },\r\n//     textField: {\r\n//       position: \"absolute\",\r\n//       bottom: \"0px\"\r\n//     },\r\n//     exampleWrapper: {\r\n//       position: 'fixed',\r\n//       right: \"60px\", \r\n//       bottom: \"2px\",\r\n//     },\r\n//     large: {\r\n//       width: theme.spacing(7),\r\n//       height: theme.spacing(7),\r\n//     },\r\n//     avatarAdminText: {\r\n//       width: theme.spacing(3),\r\n//       height: theme.spacing(3),\r\n//     },\r\n//     sizeAvatarSmall: {\r\n//       width: theme.spacing(5),\r\n//       height: theme.spacing(5),\r\n//     },\r\n//     positionAvatar: {\r\n//       position: 'fixed',\r\n//       right: \"15px\", \r\n//       bottom: \"80px\",\r\n//     },\r\n//     viewAvatarChatContent: {\r\n//       float: \"left\",\r\n//       marginTop: \"10px\"\r\n//     },\r\n//     radioGroup: {\r\n//       margin: theme.spacing(1, 0),\r\n//     },\r\n//     avatar: {\r\n//       backgroundColor: \"blue\",\r\n//     },\r\n//     media: {\r\n//       height: 100,\r\n//       backgroundColor: \"blue\"\r\n//     },\r\n//     hearder: {\r\n//       backgroundColor: \"#1a75ff\",\r\n//       color: \"white\"\r\n//     },\r\n//     speedDial: {\r\n//       position: 'absolute',\r\n//       '&.MuiSpeedDial-directionUp, &.MuiSpeedDial-directionLeft': {\r\n//         bottom: theme.spacing(2),\r\n//         right: theme.spacing(2),\r\n//       },\r\n//       '&.MuiSpeedDial-directionDown, &.MuiSpeedDial-directionRight': {\r\n//         top: theme.spacing(2),\r\n//         left: theme.spacing(2),\r\n//       },\r\n//     },\r\n//     sizeIcon: {\r\n//       fontSize: '30px'\r\n//     },\r\n//     textSizeNewDate: {\r\n//       fontSize: \"13px\"\r\n//     }\r\n//   }),\r\n// );\r\n\r\n// const StyledBadge = withStyles((theme: Theme) =>\r\n//   createStyles({\r\n//     badge: {\r\n//       backgroundColor: '#44b700',\r\n//       color: '#44b700',\r\n//       boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\r\n//       '&::after': {\r\n//         position: 'absolute',\r\n//         top: 0,\r\n//         left: 0,\r\n//         width: '100%',\r\n//         height: '100%',\r\n//         borderRadius: '50%',\r\n//         animation: '$ripple 1.2s infinite ease-in-out',\r\n//         border: '1px solid currentColor',\r\n//         content: '\"\"',\r\n//       },\r\n//     },\r\n//     '@keyframes ripple': {\r\n//       '0%': {\r\n//         transform: 'scale(.8)',\r\n//         opacity: 1,\r\n//       },\r\n//       '100%': {\r\n//         transform: 'scale(2.4)',\r\n//         opacity: 0,\r\n//       },\r\n//     },\r\n//   }),\r\n// )(Badge);\r\n \r\n\r\nlet valueInputChat = \"\"\r\n\r\nexport default function PositionedPopper() {\r\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [placement, setPlacement] = React.useState<PopperPlacementType>();\r\n  const [online, setOnline] = React.useState<boolean>(true)\r\n  const [internet, setInternet] = React.useState<boolean>(false)\r\n  const classes = useStyles();\r\n  const [texting, setTexting] = React.useState<boolean>(false)\r\n  const [valueInput, setValueInput] = React.useState(\"\")\r\n  const [giphyData, setGiphyData] = React.useState<any>()\r\n  const [openEmojiGiphy, setOpenEmojiGiphy] = React.useState<boolean>(false)\r\n  const [indexEmoji, setIndexEmoji] = React.useState<number>()\r\n  const [valueSearchGiphy, setValueSearchGiphy] = React.useState(\"\")\r\n\r\n  const onCloseChat = () => {\r\n    setOpen(false)\r\n  }\r\n\r\n  const setOnKeyPress = (event: any) => {\r\n    setTexting(true)\r\n  }\r\n  \r\n  const setOnBlur = (event: any) => {\r\n    setTexting(true)\r\n  }\r\n\r\n  const setOnKeyDown = (event: any) => {\r\n    if(event.keyCode == 13){\r\n      arrChat.push({ message: event.target.value, type: 'user', image: { url: \"\", width: \"\", height: \"\" }, date: String(new Date().getTime()) })\r\n      setValueInput(\"\")\r\n    }\r\n  }\r\n\r\n  const senMesssage = () => {\r\n    arrChat.push({ message: valueInput, type: 'user', image: { url: \"\", width: \"\", height: \"\" }, date: String(new Date().getTime()) })\r\n    setValueInput(\"\")\r\n  }\r\n\r\n  const renderHeader = () => {\r\n    return (\r\n      <CardHeader\r\n        className={classes.hearder}\r\n        avatar={\r\n          <StyledBadge\r\n            overlap=\"circle\"\r\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n            variant= { online ? \"dot\" : \"standard\" }\r\n          >\r\n            <Avatar \r\n              className={classes.sizeAvatarSmall} \r\n              alt=\"nhadatmoi.net\" \r\n              src=\"https://image.crisp.chat/avatar/operator/da8d4459-5ea3-4119-bca1-9170f49ee69c/240/?1585999578742&quot\"\r\n            />\r\n          </StyledBadge>\r\n        }\r\n        title=\"Nguyễn Thanh Huyền\"\r\n        action={\r\n          <IconButton color='inherit' aria-label=\"settings\" onClick={() => onCloseChat()} >\r\n            <CloseIcon/>\r\n          </IconButton>\r\n        }\r\n      />\r\n    )\r\n  }\r\n  \r\n  const setChangeInput = (value: any) => {\r\n    setValueInput(value)\r\n  }\r\n\r\n    \r\n  let api = \"https://api.giphy.com/v1/gifs/search?\"\r\n  let apiKey = \"api_key=UgTMyvovmg74m8fPN6qYiB623nwS1IPc\"\r\n  let limit = \"&limit=20\"\r\n  let offset = \"&offset=0\"\r\n  let rating = \"&rating=G\"\r\n  let lang = \"&lang=vi\"\r\n  const searchGiphy = async (event: any)=>  { \r\n    setValueSearchGiphy(event.target.value)\r\n    let query =  `&q=${event.target.value}`\r\n    let url = api + apiKey + query + limit + offset + rating + lang\r\n    let getData = await axios.get(url, { params: { ID: 12345 } })\r\n      .then(function (response) {\r\n        // setGiphyData(response.data.data)\r\n      })\r\n  }\r\n\r\n  // let dataSearch: any = []\r\n  let dataSearch = giphyDefault\r\n  // if(Array.isArray(giphyData)){\r\n  //   giphyData.map((item: any, index: number) => {\r\n  //     // dataSearch.push({ image:  item.images.original.url })\r\n  //     dataSearch.push({ \r\n  //       image: {\r\n  //         url: item.images.fixed_width.url,\r\n  //         height: item.images.fixed_width.height,\r\n  //         width: item.images.fixed_width.width,\r\n  //       }})\r\n  //   })\r\n  // }\r\n\r\n  const setItemGiphy = (index: number, name: string) => {\r\n    setOpenEmojiGiphy(!openEmojiGiphy)\r\n    if(name == \"giphyDefault\") {\r\n      arrChat.push({ \r\n        message: \"\", \r\n        type: 'user', \r\n        image: {\r\n          url: giphyDefault[index].image.url,\r\n          width: giphyDefault[index].image.width,\r\n          height: giphyDefault[index].image.height,\r\n        },\r\n        date: String(new Date().getTime()) \r\n      })\r\n    } else if ( name == \"dataSearch\") {\r\n      arrChat.push({ \r\n        message: \"\", \r\n        type: 'user', \r\n        image: {\r\n          url: giphyDefault[index].image.url,\r\n          width: giphyDefault[index].image.width,\r\n          height: giphyDefault[index].image.height,\r\n        },\r\n        date: String(new Date().getTime())\r\n      })\r\n    }\r\n  }\r\n  const renderEmojiGiphy = () => {\r\n    return (\r\n      <div className={classes.emojiGiphy}>\r\n          <button className={classes.buttonEmojiGiphy} >\r\n            Biểu tượng\r\n          </button>\r\n          <button className={classes.buttonEmojiGiphy} style={{ backgroundColor: \"#85adad\"}}>\r\n            Ảnh động\r\n          </button>\r\n        <Paper component=\"form\" className={classes.rootPaper}>\r\n          <IconButton type=\"submit\" className={classes.iconButton} aria-label=\"search\">\r\n            <SearchIcon />\r\n          </IconButton>\r\n          <InputBase\r\n            onChange={(e) => searchGiphy(e)}\r\n            className={classes.inputBaseGiphy}\r\n            placeholder=\"Tìm kiếm\"\r\n          />\r\n          {/* <IconButton type=\"submit\" className={classes.iconButton} aria-label=\"search\">\r\n            <SearchIcon />\r\n          </IconButton> */}\r\n        </Paper>\r\n        <div style={{ overflowX: 'auto', height: '130px' }}>\r\n          {dataEmoji.map((item: any, index: number) => {\r\n            return (\r\n              <div onClick={() => setIndexEmoji(index)} key={index} style={{ display: 'inline-block', fontSize: '20px', cursor: \"pointer\"}}>\r\n                {item.native}\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n        {/* <div style={{ overflowX: 'auto', height: '130px' }}>\r\n          {valueSearchGiphy \r\n            ? dataSearch.map((item: any, index: number) => {\r\n                return (\r\n                  <div className={classes.dispalyImageGiphy} >\r\n                    <img \r\n                      className={classes.imgListGiphy} \r\n                      alt=\"giphy\" \r\n                      src={item.image.url} \r\n                      onClick={() => setItemGiphy(index, \"dataSearch\")} \r\n                    />\r\n                  </div>\r\n                )\r\n              })\r\n            : giphyDefault.map((item: any, index: number) => {\r\n                return (\r\n                  <div className={classes.dispalyImageGiphy} >\r\n                    <img \r\n                      className={classes.imgListGiphy} \r\n                      alt=\"giphy\" \r\n                      src={item.image.url} \r\n                      onClick={() => setItemGiphy(index, \"giphyDefault\")} \r\n                    />\r\n                  </div>\r\n                )\r\n              })\r\n          }\r\n        </div> */}\r\n      \r\n      </div>\r\n    )\r\n  }\r\n\r\n  const renderContentChat = () => {\r\n    return (\r\n      <div style={{ overflowY: \"auto\", padding: \"8px\", height: \"430px\" }}>\r\n        <Typography align=\"center\" className={classes.textSizeNewDate}>\r\n          {moment().format('LLL')}\r\n        </Typography>\r\n        <Divider />\r\n        {arrChat.map((item: any, index: number) => {\r\n          let checkNewDate = false\r\n          if(index > 0 && (moment(Number(arrChat[index - 1].date)).format('YYYY-MM-DD') != moment(Number(arrChat[index].date)).format('YYYY-MM-DD'))) {\r\n            checkNewDate = true\r\n          }\r\n          let setViewAvatar = false\r\n          if(item.type === 'admin' && index > 0 && (index === arrChat.length || arrChat[index - 1].type != arrChat[index].type)) {\r\n            setViewAvatar =  true\r\n          }\r\n          return (\r\n            <div key={index}>\r\n              { checkNewDate && <Typography align=\"center\" className={classes.textSizeNewDate}>\r\n                {moment(Number(item.date)).format(\"LLL\")} <Divider /></Typography>}\r\n              { item.type === 'admin' \r\n              ? <ThemeProvider theme={themeTextfieldAdmin}>\r\n                  <div className={classes.viewAvatarChatContent}>\r\n                    {\r\n                      setViewAvatar \r\n                      ? <Avatar \r\n                          className={classes.avatarAdminText} \r\n                          alt=\"nhadatmoi.net\" \r\n                          src=\"https://image.crisp.chat/avatar/operator/da8d4459-5ea3-4119-bca1-9170f49ee69c/240/?1585999578742&quot\"\r\n                        />\r\n                      : \"\"\r\n                    }\r\n                  </div>\r\n                  <div className={classes.textFieldChatContent}>\r\n                    {\r\n                      item.image.url \r\n                      ? <Tooltip title={moment(Number(item.date)).fromNow()} placement=\"top\">\r\n                          <div className={classes.viewContentImageGiphy} style={{ width: `${item.image.width}px`, height: `${item.image.height}px`}} >\r\n                            <img \r\n                              className={classes.imgGiphy} \r\n                              alt=\"giphy\" \r\n                              src={item.image.url} \r\n                            />\r\n                          </div>\r\n                        </Tooltip>\r\n                      : <Tooltip title={moment(Number(item.date)).fromNow()} placement=\"top\">\r\n                          <TextField \r\n                            fullWidth\r\n                            label=\"\"\r\n                            className={classes.textAdmin}\r\n                            value={item.message}\r\n                            margin=\"dense\"\r\n                            id=\"outlined-basic\" \r\n                            multiline={true}\r\n                            InputProps={{\r\n                              readOnly: true\r\n                            }}\r\n                            variant=\"outlined\" \r\n                          />\r\n                        </Tooltip>\r\n                    }\r\n                  </div>\r\n                  </ThemeProvider>\r\n              : <ThemeProvider theme={themeTextfieldUser}>\r\n                  {\r\n                    item.image.url\r\n                    ? <Tooltip title={moment(Number(item.date)).fromNow()} placement=\"top\">\r\n                        <div className={classes.viewContentImageGiphy} style={{ width: `${item.image.width}px`, height: `${item.image.height}px`}} >\r\n                          <img \r\n                            className={classes.imgGiphy} \r\n                            alt=\"giphy\" \r\n                            src={item.image.url} \r\n                          />\r\n                        </div>\r\n                      </Tooltip>\r\n                    : <Tooltip title={moment(Number(item.date)).fromNow()} placement=\"top\">\r\n                        <div className={classes.textFieldUserChatContent}>\r\n                          {/* <TextField \r\n                            fullWidth\r\n                            label=\"\"\r\n                            className={classes.textUser}\r\n                            value={item.message}\r\n                            margin=\"dense\"\r\n                            id=\"outlined-basic\" \r\n                            multiline={true}\r\n                            InputProps={{\r\n                              readOnly: true\r\n                            }}\r\n                            variant=\"outlined\" \r\n                          />  */}\r\n                          <span style={{fontSize : '100px'}}>&#9199;</span>\r\n                          <p>I will display &#9199;</p>\r\n                          <p>I will display &#x23EF;</p>\r\n                          <p>{item.message}</p>\r\n                        </div>\r\n                      </Tooltip>\r\n                  }\r\n                  </ThemeProvider>\r\n              }\r\n            </div>\r\n          )\r\n        })}\r\n        <div>\r\n          {openEmojiGiphy && renderEmojiGiphy()}\r\n        </div>\r\n        {/* {!internet \r\n          ? <p className={classes.errInternet}>\r\n              <u>Không thể gửi tin nhắn này. Kiểm tra kết nối internet và thử lại</u>\r\n            </p>\r\n          : \"\"\r\n        }\r\n        {texting && <p className={classes.texting}>Đang nhập ...</p>} */}\r\n      </div>\r\n    )\r\n  }\r\n \r\n  console.log(\"valueInputChat\", valueInputChat) \r\n  valueInputChat = valueInputChat + \"🎅🏼\" + valueInput\r\n  const renderInput = () => {\r\n    return (\r\n      <Paper component=\"form\" className={classes.inputBase}>\r\n        <ThemeProvider theme={theme}>\r\n          <Input \r\n            fullWidth\r\n            // disabled={internet}\r\n            margin=\"dense\"\r\n            id=\"outlined-basic\" \r\n            autoFocus={true}\r\n            // value={valueInput}\r\n            value={\"🎅🏼🎅🏼🎅🏼🎅🏼🎅🏼🎅🏼\" + \"text text text &#129409;\"}\r\n            multiline={true}\r\n            onChange={(e) => setChangeInput(e.target.value)}\r\n            onKeyPress={(e) => setOnKeyPress(e)}\r\n            onBlur={(e) => setOnBlur(e)}\r\n            onKeyDown={(e) => setOnKeyDown(e)}\r\n            placeholder=\"Nhập tin nhắn ...\"\r\n            autoComplete=\"false\"\r\n          />\r\n          { openEmojiGiphy \r\n            ? <Tooltip title=\"Chèn biểu tượng\" placement=\"top\"> \r\n                <ExpandMoreIcon \r\n                  className={classes.sizeIcon}\r\n                  onClick={() => setOpenEmojiGiphy(!openEmojiGiphy)}\r\n                  color=\"primary\"\r\n                />\r\n              </Tooltip> \r\n            : <Tooltip title=\"Chèn biểu tượng\" placement=\"top\"> \r\n                <TagFacesIcon \r\n                  className={classes.sizeIcon}\r\n                  onClick={() => setOpenEmojiGiphy(!openEmojiGiphy)}\r\n                  color=\"primary\"\r\n                />\r\n              </Tooltip>\r\n          }\r\n          { valueInput\r\n            ? <Tooltip title=\"Thêm tập tin\" placement=\"top\">\r\n                <SendIcon \r\n                  onClick={senMesssage} \r\n                  className={classes.sizeIcon} color=\"primary\"\r\n                />\r\n              </Tooltip>\r\n            : <Tooltip title=\"Thêm tập tin\" placement=\"top\">\r\n                <AddCircleOutlineIcon className={classes.sizeIcon} color=\"primary\"/>\r\n              </Tooltip>\r\n          }\r\n        </ThemeProvider>\r\n      </Paper>\r\n    )\r\n  }\r\n\r\n  const viewChat = () => {\r\n    return (\r\n      <Popper \r\n        open={open} \r\n        anchorEl={anchorEl}\r\n        placement={placement} \r\n        transition\r\n      >\r\n        {({ TransitionProps }) => (\r\n          <Fade {...TransitionProps} timeout={300}>\r\n            <Paper>\r\n              <div className={classes.positionSizeViewChat} >\r\n                {renderHeader()}\r\n                {renderContentChat()}\r\n                {renderInput()}\r\n              </div>\r\n            </Paper>\r\n          </Fade>\r\n        )}\r\n      </Popper>\r\n    )\r\n  }\r\n\r\n  const handleClick = (newPlacement: PopperPlacementType) => {\r\n    setOpen(true)\r\n    setPlacement(newPlacement);\r\n  }\r\n\r\n  const renderAvatar = () => {\r\n    return (\r\n      <div className={classes.positionAvatar}>\r\n        <StyledBadge\r\n          overlap=\"circle\"\r\n          anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'right',\r\n          }}\r\n          // variant= { online ? \"dot\" : \"standard\" }\r\n        >\r\n          <Avatar \r\n            onClick={() => handleClick(\"top-start\")}\r\n            className={classes.large} \r\n            alt=\"nhadatmoi.net\" \r\n            src=\"https://image.crisp.chat/avatar/operator/da8d4459-5ea3-4119-bca1-9170f49ee69c/240/?1585999578742&quot\"\r\n            // src=\"https://file.vforum.vn/hinh/2018/03/hinh-mau-trang-tinh-tron-hinh-nen-anh-dai-dien-anh-bia-toan-mau-trang1.png\"\r\n          />\r\n        </StyledBadge>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {viewChat()}\r\n      <Grid container justify=\"center\">\r\n        <Grid item>\r\n          { !open && renderAvatar()}\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}