{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { apolloClient } from \"../../utils\";\nimport { GET_LOCATION_FROM_SLUG } from \"../../graphql/location/queries\";\nimport Validator from \"../validator\";\n\nvar processQueryData = function processQueryData(query, typePage) {\n  var dataQuery, propObject, locationSlug, locationObject;\n  return _regeneratorRuntime.async(function processQueryData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          dataQuery = {\n            city: \"\",\n            district: \"\",\n            ward: \"\",\n            home_direction: \"\",\n            price_range: {\n              max: 0,\n              min: 0\n            },\n            area_range: {\n              max: 0,\n              min: 0\n            },\n            bed_room_number: {\n              max: 0,\n              min: 0\n            },\n            title: \"\",\n            name: \"\",\n            page: 1,\n            limit: 12,\n            sort_by: {\n              time: \"newest\"\n            }\n          };\n          propObject = {\n            location: {},\n            statusCode: 200,\n            dataQuery: dataQuery,\n            slug: query.slug\n          };\n\n          if (!(typePage === 'ad-sell-lease-location')) {\n            _context.next = 16;\n            break;\n          }\n\n          locationSlug = query.slug;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(apolloClient.query({\n            query: GET_LOCATION_FROM_SLUG,\n            variables: {\n              \"slug\": locationSlug\n            }\n          }).then(function (response) {\n            return response;\n          }));\n\n        case 6:\n          locationObject = _context.sent;\n\n          if (!(!Validator.isBlank(locationObject.data.location) && !Validator.isBlank(locationObject.data.location.city))) {\n            _context.next = 14;\n            break;\n          }\n\n          propObject.location = locationObject.data.location;\n\n          if (!Validator.isBlank(locationObject.data.location.city.id)) {\n            dataQuery.city = locationObject.data.location.city.id;\n          }\n\n          if (!Validator.isBlank(locationObject.data.location.district) && !Validator.isBlank(locationObject.data.location.district.id)) {\n            dataQuery.district = locationObject.data.location.district.id;\n          }\n\n          if (!Validator.isBlank(locationObject.data.location.ward) && !Validator.isBlank(locationObject.data.location.ward.id)) {\n            dataQuery.ward = locationObject.data.location.ward.id;\n          }\n\n          _context.next = 16;\n          break;\n\n        case 14:\n          propObject.statusCode = 404;\n          return _context.abrupt(\"return\", propObject);\n\n        case 16:\n          try {\n            if (!Validator.isBlank(query.bed_room_number)) {\n              query.bed_room_number = JSON.parse(query.bed_room_number);\n            }\n\n            if (!Validator.isBlank(query.price_range)) {\n              query.price_range = JSON.parse(query.price_range);\n            }\n\n            if (!Validator.isBlank(query.area_range)) {\n              query.area_range = JSON.parse(query.area_range);\n            }\n\n            if (!Validator.isBlank(query.sort_by)) {\n              query.sort_by = JSON.parse(query.sort_by);\n            }\n          } catch (e) {\n            propObject.statusCode = 404;\n          }\n\n          dataQuery = Object.assign(dataQuery, query);\n          dataQuery.page = Number(dataQuery.page);\n          dataQuery.limit = Number(dataQuery.limit);\n          propObject.dataQuery = dataQuery;\n          return _context.abrupt(\"return\", propObject);\n\n        case 22:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default {\n  processQueryData: processQueryData\n};","map":null,"metadata":{},"sourceType":"module"}