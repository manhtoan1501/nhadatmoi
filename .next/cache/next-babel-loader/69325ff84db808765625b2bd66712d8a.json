{"ast":null,"code":"import _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nvar _jsxFileName = \"C:\\\\Users\\\\manh nhan\\\\Desktop\\\\new_ndm\\\\components\\\\Channel\\\\Tabs\\\\Members.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { Avatar } from \"@material-ui/core\";\nimport PhoneInTalkIcon from '@material-ui/icons/PhoneInTalk';\nimport { memberStyles } from \"../Constant\";\nimport { GET_MEMBER_CHANNEL_BY_ID } from \"../../../graphql/channel/queries\";\nimport { apolloClient } from \"../../../utils\";\nimport LoadingCircle from \"../LoadingCircle\";\n;\n;\n\nconst Info = props => {\n  const classes = memberStyles();\n  const [members, getMembers] = React.useState([]);\n  const [loading, setLoading] = React.useState(true);\n\n  const getMemberChannel = async () => {\n    let id = props.channelId;\n    let members = await apolloClient.query({\n      query: GET_MEMBER_CHANNEL_BY_ID,\n      variables: {\n        \"id\": id,\n        \"limit\": 18,\n        \"page\": 1\n      }\n    }).then(response => {\n      return response.data.channelMembers.edges;\n    });\n\n    if (_Array$isArray(members)) {\n      getMembers(members);\n      setLoading(false);\n    }\n  };\n\n  React.useEffect(() => {\n    getMemberChannel();\n  });\n\n  const renderMembers = () => {\n    return __jsx(Grid, {\n      container: true,\n      direction: \"row\",\n      alignItems: \"center\",\n      spacing: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, members.map((item, index) => {\n      let phone = item.node.mobile || item.node.phone;\n      return __jsx(Grid, {\n        key: index,\n        item: true,\n        lg: 2,\n        md: 3,\n        sm: 4,\n        xs: 6,\n        className: classes.marginMember,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: classes.members,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, __jsx(Avatar, {\n        alt: \"\",\n        className: classes.avatar,\n        src: item.node.avatar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        className: classes.nameMember,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, __jsx(Typography, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, item.node.first_name, \" \", item.node.last_name)), __jsx(\"a\", {\n        title: \"G\\u1ECDi ngay\",\n        href: `${phone}`,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, __jsx(PhoneInTalkIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      })), __jsx(Typography, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, phone ? phone : \"SĐT: Đang cập nhật ... \")));\n    }));\n  };\n\n  return __jsx(\"div\", {\n    className: classes.rootMember,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, __jsx(Typography, {\n    variant: \"h5\",\n    className: classes.titleMember,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"Danh s\\xE1ch m\\xF4i gi\\u1EDBi\"), loading ? __jsx(LoadingCircle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }) : \"\", renderMembers());\n};\n\nexport default Info;","map":{"version":3,"sources":["C:/Users/manh nhan/Desktop/new_ndm/components/Channel/Tabs/Members.tsx"],"names":["React","Grid","Typography","Avatar","PhoneInTalkIcon","memberStyles","GET_MEMBER_CHANNEL_BY_ID","apolloClient","LoadingCircle","Info","props","classes","members","getMembers","useState","loading","setLoading","getMemberChannel","id","channelId","query","variables","then","response","data","channelMembers","edges","useEffect","renderMembers","map","item","index","phone","node","mobile","marginMember","avatar","nameMember","first_name","last_name","rootMember","titleMember"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport PhoneInTalkIcon from '@material-ui/icons/PhoneInTalk';\r\nimport { memberStyles} from \"../Constant\";\r\nimport { GET_MEMBER_CHANNEL_BY_ID } from \"../../../graphql/channel/queries\";\r\nimport { apolloClient } from \"../../../utils\";\r\nimport LoadingCircle from \"../LoadingCircle\";\r\n\r\ninterface InfoProps {\r\n  channelId: string\r\n};\r\n\r\ninterface Member {\r\n  node: {\r\n    avatar: string\r\n    first_name: string\r\n    last_name: string\r\n    mobile: string\r\n    phone: string\r\n  }\r\n};\r\n\r\nconst Info: React.FunctionComponent<InfoProps> = (props: InfoProps) => {\r\n  const classes = memberStyles();\r\n  const [members, getMembers] = React.useState<Member[]>([]);\r\n  const [loading, setLoading] = React.useState(true);\r\n\r\n  const getMemberChannel = async ()=> { \r\n    let id = props.channelId;\r\n    let members = await apolloClient.query({ query: GET_MEMBER_CHANNEL_BY_ID, variables: {\r\n      \"id\": id,\r\n      \"limit\": 18,\r\n      \"page\": 1,\r\n    }})\r\n    .then((response: any) => {\r\n      return response.data.channelMembers.edges\r\n    });\r\n    if(Array.isArray(members)){\r\n      getMembers(members)\r\n      setLoading(false)\r\n    }\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    getMemberChannel();\r\n  });\r\n\r\n  const renderMembers = () => {\r\n    return (\r\n      <Grid container direction=\"row\" alignItems=\"center\" spacing={1}>\r\n        {members.map((item: any, index: number) => {\r\n          let phone = item.node.mobile || item.node.phone\r\n          return (\r\n            <Grid key={index} item lg={2} md={3} sm={4} xs={6} className={classes.marginMember}>\r\n              <div className={classes.members} >\r\n                <Avatar alt=\"\" className={classes.avatar} src={item.node.avatar} />\r\n                <div className={classes.nameMember}>\r\n                  <Typography>{item.node.first_name} {item.node.last_name}</Typography>\r\n                </div>\r\n                <a title=\"Gọi ngay\" href={`${phone}`}>\r\n                  <PhoneInTalkIcon />\r\n                </a>\r\n                <Typography>{phone ? phone : \"SĐT: Đang cập nhật ... \" }</Typography>\r\n              </div>\r\n            </Grid>\r\n          )\r\n        })}\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={classes.rootMember}>\r\n      <Typography variant=\"h5\" className={classes.titleMember}>Danh sách môi giới</Typography>\r\n      {loading ? <LoadingCircle /> : \"\"} \r\n      {renderMembers()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Info;\r\n"]},"metadata":{},"sourceType":"module"}