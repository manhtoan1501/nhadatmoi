{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\manh nhan\\\\Desktop\\\\Nhadatmoi\\\\pages\\\\nguoi-dung\\\\index.tsx\";\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport Layout from '../../components/Layout/Layout';\nimport { apolloClient } from \"../../utils\";\nimport { GET_PROJECT_BY_SLUG } from \"../../graphql/project/queries\";\nimport \"../../assets/scss/style.scss\";\nimport { mainURL } from \"../../constants\";\nimport urlProcess from \"../../modules/urlProcess\";\nimport Users from \"../../components/Users/Index\";\n\nvar ProjectDetailPage = function ProjectDetailPage() {\n  var imageAvatar = 'https://static.nhadatmoi.net/default/home_default.jpg';\n  imageAvatar = urlProcess.processImageUrl(imageAvatar, 'project');\n  useEffect(function () {// let projectId = props.projectDetail.data.project.id;\n    // apolloClient.mutate({mutation: COUNT_VIEW_PROJECT, variables: {\n    //     \"input\": {\n    //       \"id\": projectId\n    //     }\n    //   }}).then((response: any) => {\n    // });\n    // let investorId = props.projectDetail.data.project.investor\n    // apolloClient.query({query: GET_INVESTOR_BY_ID, variables: {\n    //   \"id\": investorId\n    //   }}).then(response => {\n    //     if (!Validator.isBlank(response.data) && !Validator.isBlank(response.data.investor)) {\n    //       setInvestor(response.data.investor);\n    //     }\n    // });\n  }, []);\n  var _id = \"5e7b82a48928eb4d96c1a526\";\n  return __jsx(Layout, {\n    title: \"metaTitle\",\n    description: \"metaDescription\" // {...props}\n    ,\n    image: imageAvatar,\n    canonical: mainURL + '/nguoi-dung/' + _id,\n    path: 'nguoi-dung',\n    dataCompare: \"dataCompare\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, __jsx(Users, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }));\n}; // @ts-ignore\n\n\nProjectDetailPage.getInitialProps = function _callee(props) {\n  var projectSlug, projectDetail;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          projectSlug = props.query.slug;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(apolloClient.query({\n            query: GET_PROJECT_BY_SLUG,\n            variables: {\n              \"slug\": projectSlug\n            }\n          }).then(function (response) {\n            return response;\n          }));\n\n        case 3:\n          projectDetail = _context.sent;\n          return _context.abrupt(\"return\", {\n            projectDetail: projectDetail,\n            slug: \"nguoi-dung\"\n          });\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default ProjectDetailPage;","map":{"version":3,"sources":["C:/Users/manh nhan/Desktop/Nhadatmoi/pages/nguoi-dung/index.tsx"],"names":["React","useEffect","Layout","apolloClient","GET_PROJECT_BY_SLUG","mainURL","urlProcess","Users","ProjectDetailPage","imageAvatar","processImageUrl","_id","getInitialProps","props","projectSlug","query","slug","variables","then","response","projectDetail"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AAEA,OAAOC,MAAP,MAAmB,gCAAnB;AAIA,SAAQC,YAAR,QAA2B,aAA3B;AACA,SAAQC,mBAAR,QAAkC,+BAAlC;AAGA,OAAO,8BAAP;AACA,SAAgCC,OAAhC,QAA8C,iBAA9C;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AAGA,OAAOC,KAAP,MAAkB,8BAAlB;;AAEA,IAAMC,iBAA2B,GAAG,SAA9BA,iBAA8B,GAAM;AACxC,MAAIC,WAAW,GAAG,uDAAlB;AACAA,EAAAA,WAAW,GAAGH,UAAU,CAACI,eAAX,CAA2BD,WAA3B,EAAwC,SAAxC,CAAd;AAEAR,EAAAA,SAAS,CAAC,YAAM,CACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAhBQ,EAgBN,EAhBM,CAAT;AAiBA,MAAIU,GAAG,GAAG,0BAAV;AACA,SACE,MAAC,MAAD;AACE,IAAA,KAAK,EAAC,WADR;AAEE,IAAA,WAAW,EAAC,iBAFd,CAGE;AAHF;AAIE,IAAA,KAAK,EAAEF,WAJT;AAKE,IAAA,SAAS,EAAGJ,OAAO,GAAG,cAAV,GAA2BM,GALzC;AAME,IAAA,IAAI,EAAE,YANR;AAOE,IAAA,WAAW,EAAC,aAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASE,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF;AAaD,CAnCD,C,CAsCA;;;AACAH,iBAAiB,CAACI,eAAlB,GAAoC,iBAAeC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9BC,UAAAA,WAD8B,GAChBD,KAAK,CAACE,KAAN,CAAYC,IADI;AAAA;AAAA,2CAERb,YAAY,CAACY,KAAb,CAAmB;AAACA,YAAAA,KAAK,EAAEX,mBAAR;AAA6Ba,YAAAA,SAAS,EAAE;AACjF,sBAAQH;AADyE;AAAxC,WAAnB,EAEpBI,IAFoB,CAEf,UAAAC,QAAQ,EAAI;AACrB,mBAAOA,QAAP;AACD,WAJyB,CAFQ;;AAAA;AAE9BC,UAAAA,aAF8B;AAAA,2CAO3B;AACLA,YAAAA,aAAa,EAAEA,aADV;AAELJ,YAAAA,IAAI,EAAE;AAFD,WAP2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApC;;AAaA,eAAeR,iBAAf","sourcesContent":["import React, {useEffect} from 'react';\r\nimport {NextPage} from \"next\";\r\nimport Layout from '../../components/Layout/Layout';\r\nimport BannerSlider from \"../../components/PageDetail/BannerSlider\";\r\nimport Main from \"../../components/Project/ProjectMain\";\r\nimport DetailInvestor from \"../../components/Investor/DetailInvestor\"\r\nimport {apolloClient} from \"../../utils\";\r\nimport {GET_PROJECT_BY_SLUG} from \"../../graphql/project/queries\";\r\nimport {GET_INVESTOR_BY_ID} from \"../../graphql/investor/queries\"\r\nimport StringProcess from \"../../modules/stringProcess\";\r\nimport \"../../assets/scss/style.scss\";\r\nimport {localStorageCompareKey, mainURL} from \"../../constants\";\r\nimport urlProcess from \"../../modules/urlProcess\";\r\nimport Validator from \"../../modules/validator\";\r\nimport {COUNT_VIEW_PROJECT} from \"../../graphql/project/mutation\";\r\nimport Users from \"../../components/Users/Index\"\r\n \r\nconst ProjectDetailPage: NextPage = () => {\r\n  let imageAvatar = 'https://static.nhadatmoi.net/default/home_default.jpg';\r\n  imageAvatar = urlProcess.processImageUrl(imageAvatar, 'project');\r\n\r\n  useEffect(() => {\r\n    // let projectId = props.projectDetail.data.project.id;\r\n    // apolloClient.mutate({mutation: COUNT_VIEW_PROJECT, variables: {\r\n    //     \"input\": {\r\n    //       \"id\": projectId\r\n    //     }\r\n    //   }}).then((response: any) => {\r\n    // });\r\n    // let investorId = props.projectDetail.data.project.investor\r\n    // apolloClient.query({query: GET_INVESTOR_BY_ID, variables: {\r\n    //   \"id\": investorId\r\n    //   }}).then(response => {\r\n    //     if (!Validator.isBlank(response.data) && !Validator.isBlank(response.data.investor)) {\r\n    //       setInvestor(response.data.investor);\r\n    //     }\r\n    // });\r\n  }, []);\r\n  let _id = \"5e7b82a48928eb4d96c1a526\"\r\n  return (\r\n    <Layout\r\n      title=\"metaTitle\"\r\n      description=\"metaDescription\"\r\n      // {...props}\r\n      image={imageAvatar}\r\n      canonical={ mainURL + '/nguoi-dung/' + _id}\r\n      path={'nguoi-dung'}\r\n      dataCompare=\"dataCompare\"\r\n    >\r\n      <Users />\r\n    </Layout>\r\n  );\r\n};\r\n\r\n\r\n// @ts-ignore\r\nProjectDetailPage.getInitialProps = async function(props: QueryProp) {\r\n  let projectSlug = props.query.slug;\r\n  let projectDetail = await apolloClient.query({query: GET_PROJECT_BY_SLUG, variables: {\r\n      \"slug\": projectSlug\r\n    }}).then(response => {\r\n    return response;\r\n  });\r\n  return {\r\n    projectDetail: projectDetail,\r\n    slug: \"nguoi-dung\",\r\n  };\r\n};\r\n\r\nexport default ProjectDetailPage;\r\n"]},"metadata":{},"sourceType":"module"}