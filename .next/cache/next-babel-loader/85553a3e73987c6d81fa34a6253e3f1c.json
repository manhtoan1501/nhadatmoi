{"ast":null,"code":"import _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nvar _jsxFileName = \"C:\\\\Users\\\\manh nhan\\\\Desktop\\\\new_ndm\\\\components\\\\LayeredNavigation\\\\LayeredNavigation.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react'; //Import Material Libs\n\nimport Grid from \"@material-ui/core/Grid\";\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Collapse from '@material-ui/core/Collapse';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport Typography from '@material-ui/core/Typography'; //Import Dynamic\n\nimport dynamic from 'next/dynamic'; //Import without SSR Slider\n\nconst Slider = dynamic(() => import('@material-ui/core/Slider'), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('@material-ui/core/Slider')],\n    modules: ['@material-ui/core/Slider']\n  }\n}); //Import Apollo Client\n\nimport { apolloClient } from \"../../utils\"; //Import Query GraphQL\n\nimport { GET_CITY_LIST } from \"../../graphql/city/queries\";\nimport { GET_DISTRICT_LIST } from \"../../graphql/district/queries\";\nimport { GET_WARD_LIST } from \"../../graphql/ward/queries\";\nimport { GET_DIRECTIONS } from \"../../graphql/directions/queries\";\nimport Validator from \"../../modules/validator\";\n\nfunction valueText(value) {\n  return `${value}`;\n}\n\nconst bedRoomNumber = [{\n  node: {\n    id: 1,\n    value: {\n      max: 2,\n      min: 0\n    },\n    name: '0 - 2 phòng'\n  }\n}, {\n  node: {\n    id: 2,\n    value: {\n      max: 5,\n      min: 3\n    },\n    name: '3 - 5 phòng'\n  }\n}, {\n  node: {\n    id: 3,\n    value: {\n      max: 100,\n      min: 6\n    },\n    name: 'trên 5 phòng'\n  }\n}];\n\nconst LayeredNavigation = props => {\n  const [openDirection, setOpenDirection] = React.useState(true);\n\n  const handleClickDirection = () => {\n    setOpenDirection(!openDirection);\n  };\n\n  const [openBedRoom, setOpenBedRoom] = React.useState(true);\n\n  const handleClickBedRoom = () => {\n    setOpenBedRoom(!openBedRoom);\n  };\n\n  let priceRangeValue = [0, 50]; //set Price\n\n  if (!Validator.isBlank(props.dataLayeredNavigation.price_range.max) || !Validator.isBlank(props.dataLayeredNavigation.price_range.min)) {\n    let minValue = Number(props.dataLayeredNavigation.price_range.min / 1000000000);\n    let maxValue = Number(props.dataLayeredNavigation.price_range.max / 1000000000);\n    priceRangeValue = [minValue, maxValue];\n  }\n\n  let areaRangeValue = [0, 500]; //set AreaRangeValue\n\n  if (!Validator.isBlank(props.dataLayeredNavigation.area_range.max) || !Validator.isBlank(props.dataLayeredNavigation.area_range.min)) {\n    areaRangeValue = [props.dataLayeredNavigation.area_range.min, props.dataLayeredNavigation.area_range.max];\n  }\n\n  ;\n  let idBedRoomNumber = -1;\n\n  if (Number(props.dataLayeredNavigation.bed_room_number.max) < 3 && Number(props.dataLayeredNavigation.bed_room_number.max) > 0) {\n    idBedRoomNumber = 1;\n  }\n\n  if (Number(props.dataLayeredNavigation.bed_room_number.max) < 6 && Number(props.dataLayeredNavigation.bed_room_number.max) > 2) {\n    idBedRoomNumber = 2;\n  }\n\n  if (5 < Number(props.dataLayeredNavigation.bed_room_number.max)) {\n    idBedRoomNumber = 3;\n  }\n\n  const [priceValue, setPriceValue] = React.useState(priceRangeValue);\n  const [areaValue, setAreaValue] = React.useState(areaRangeValue);\n  const [citesList, setCitesList] = React.useState();\n  const [districtList, setDistrictList] = React.useState();\n  const [wardList, setWardList] = React.useState();\n  const [directionList, setDirectionList] = React.useState();\n  const [activeBedRoom, setActiveBedRoom] = React.useState(idBedRoomNumber);\n  const [activeDirection, setActiveDirection] = React.useState(String(props.dataLayeredNavigation.home_direction));\n\n  const closeIcon = __jsx(\"svg\", {\n    viewBox: \"0 0 352 512\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, __jsx(\"path\", {\n    d: \"M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }));\n\n  useEffect(() => {\n    apolloClient.query({\n      query: GET_CITY_LIST,\n      variables: {\n        \"page\": 1,\n        \"limit\": 1000,\n        \"filter\": \"'{}'\"\n      }\n    }).then(response => {\n      if (typeof response.data.citys.edges !== \"undefined\") {\n        setCitesList(response.data.citys.edges);\n\n        for (let index in response.data.citys.edges) {\n          if (response.data.citys.edges[index].node.id === props.dataLayeredNavigation.city) {\n            setDefaultCity(response.data.citys.edges[index]);\n          }\n        }\n      }\n    });\n\n    if (!Validator.isBlank(props.dataLayeredNavigation.city)) {\n      updateDistrictLayeredNavigation(props.dataLayeredNavigation.city);\n    }\n\n    if (!Validator.isBlank(props.dataLayeredNavigation.district)) {\n      updateWardLayeredNavigation(props.dataLayeredNavigation.district);\n    }\n\n    apolloClient.query({\n      query: GET_DIRECTIONS,\n      variables: {\n        \"page\": 1,\n        \"limit\": 1000,\n        \"filter\": \"'{}'\"\n      }\n    }).then(response => {\n      if (typeof response.data.directions.edges !== \"undefined\") {\n        setDirectionList(response.data.directions.edges);\n      }\n    });\n  }, []);\n  const filterOptions = createFilterOptions({\n    matchFrom: 'any',\n    stringify: option => option.node.name\n  });\n  const cityDataSelect = {\n    options: citesList,\n    getOptionLabel: option => option.node.name,\n    filterOptions: filterOptions\n  };\n  const districtDataSelect = {\n    options: districtList,\n    getOptionLabel: option => option.node.name,\n    filterOptions: filterOptions\n  };\n  const wardDataSelect = {\n    options: wardList,\n    getOptionLabel: option => option.node.name,\n    filterOptions: filterOptions\n  };\n  const [dataLayeredNavigation, setDataLayeredNavigation] = React.useState(props.dataLayeredNavigation);\n\n  const onChangeCites = value => {\n    if (value) {\n      dataLayeredNavigation.city = value.node.id;\n      dataLayeredNavigation.slug = value.node.slug;\n      updateDistrictLayeredNavigation(value.node.id);\n    } else {\n      dataLayeredNavigation.city = '';\n      dataLayeredNavigation.slug = '';\n    }\n\n    dataLayeredNavigation.district = '';\n    dataLayeredNavigation.ward = '';\n    dataLayeredNavigation.page = 1;\n    setDistrictList([]);\n    setWardList([]);\n    setDataLayeredNavigation(dataLayeredNavigation); //Set Default Value\n\n    setDefaultDistrict(defaultValueLocation);\n    setDefaultWard(defaultValueLocation);\n    props.updateLayeredNavigation(dataLayeredNavigation);\n  };\n\n  const handlePriceChange = (event, newValue) => {\n    setPriceValue(newValue);\n\n    if (_Array$isArray(newValue) && newValue.length != null && newValue.length > 0) {\n      let minValue = 0;\n      let maxValue = 0;\n      newValue.map((value, index) => {\n        if (index === 0) {\n          minValue = value;\n        }\n\n        if (index === 1) {\n          maxValue = value;\n        }\n\n        let dataToFilter = {\n          min: minValue * 1000000000,\n          max: maxValue * 1000000000\n        };\n        dataLayeredNavigation.price_range = dataToFilter;\n        setDataLayeredNavigation(dataLayeredNavigation);\n        delayUpdateLayeredNavigation(dataLayeredNavigation);\n      });\n    }\n  };\n\n  const handleAreaChange = (event, newValue) => {\n    setAreaValue(newValue);\n\n    if (_Array$isArray(newValue) && newValue.length != null && newValue.length > 0) {\n      let minValue = 0;\n      let maxValue = 0;\n      newValue.map((value, index) => {\n        if (index === 0) {\n          minValue = value;\n        }\n\n        if (index === 1) {\n          maxValue = value;\n        }\n\n        let dataToFilter = {\n          min: minValue,\n          max: maxValue\n        };\n        dataLayeredNavigation.area_range = dataToFilter;\n        setDataLayeredNavigation(dataLayeredNavigation);\n        delayUpdateLayeredNavigation(dataLayeredNavigation);\n      });\n    }\n  };\n\n  let timerId = setTimeout(() => {}, 600); // @ts-ignore\n\n  const delayUpdateLayeredNavigation = dataLayeredNavigation => {\n    clearTimeout(timerId);\n    timerId = setTimeout(() => {\n      props.updateLayeredNavigation(dataLayeredNavigation);\n    }, 600);\n  };\n\n  const onChangeDistricts = value => {\n    if (value) {\n      dataLayeredNavigation.district = value.node.id;\n      dataLayeredNavigation.slug = value.node.slug;\n      updateWardLayeredNavigation(value.node.id);\n    } else {\n      let citySlug = defaultCity.node.slug;\n      dataLayeredNavigation.district = '';\n      dataLayeredNavigation.slug = citySlug;\n    }\n\n    dataLayeredNavigation.page = 1;\n    dataLayeredNavigation.ward = '';\n    setWardList([]);\n    setDefaultWard(defaultValueLocation);\n    props.updateLayeredNavigation(dataLayeredNavigation);\n  };\n\n  const onChangeWards = value => {\n    if (value) {\n      dataLayeredNavigation.ward = value.node.id;\n      dataLayeredNavigation.slug = value.node.slug;\n    } else {\n      let districtSlug = defaultDistrict.node.slug;\n      dataLayeredNavigation.district = '';\n      dataLayeredNavigation.ward = '';\n      dataLayeredNavigation.slug = districtSlug;\n    }\n\n    dataLayeredNavigation.page = 1;\n    setDataLayeredNavigation(dataLayeredNavigation);\n    props.updateLayeredNavigation(dataLayeredNavigation);\n  };\n\n  const onClickDirection = value => {\n    if (value !== activeDirection) {\n      dataLayeredNavigation.home_direction = value;\n      setActiveDirection(value);\n    } else {\n      dataLayeredNavigation.home_direction = '';\n      setActiveDirection('');\n    }\n\n    setDataLayeredNavigation(dataLayeredNavigation);\n    props.updateLayeredNavigation(dataLayeredNavigation);\n  };\n\n  const onClickBedRoom = (value, id) => {\n    if (id !== activeBedRoom) {\n      dataLayeredNavigation.bed_room_number = value;\n      setActiveBedRoom(id);\n    } else {\n      dataLayeredNavigation.bed_room_number = {\n        max: 0,\n        min: 0\n      };\n      setActiveBedRoom(-1);\n    }\n\n    setDataLayeredNavigation(dataLayeredNavigation);\n    props.updateLayeredNavigation(dataLayeredNavigation);\n  };\n\n  const updateDistrictLayeredNavigation = cityId => {\n    apolloClient.query({\n      query: GET_DISTRICT_LIST,\n      variables: {\n        \"page\": 1,\n        \"limit\": 100,\n        \"filter\": \"{'city_id': '\" + cityId + \"'}\"\n      }\n    }).then(response => {\n      if (typeof response.data.districts.edges !== \"undefined\") {\n        setDistrictList(response.data.districts.edges);\n\n        for (let index in response.data.districts.edges) {\n          if (response.data.districts.edges[index].node.id === props.dataLayeredNavigation.district) {\n            setDefaultDistrict(response.data.districts.edges[index]);\n          }\n        }\n      }\n    });\n  };\n\n  const updateWardLayeredNavigation = districtId => {\n    apolloClient.query({\n      query: GET_WARD_LIST,\n      variables: {\n        \"page\": 1,\n        \"limit\": 100,\n        \"filter\": \"{'district_id': '\" + districtId + \"'}\"\n      }\n    }).then(response => {\n      if (typeof response.data.wards.edges !== \"undefined\") {\n        setWardList(response.data.wards.edges);\n\n        for (let index in response.data.wards.edges) {\n          if (response.data.wards.edges[index].node.id === props.dataLayeredNavigation.ward) {\n            setDefaultWard(response.data.wards.edges[index]);\n          }\n        }\n      }\n    });\n  };\n\n  const handleFieldChange = (event, title, value) => {\n    dataLayeredNavigation.name = value;\n    dataLayeredNavigation.title = value;\n    setDataLayeredNavigation(dataLayeredNavigation);\n    delayUpdateLayeredNavigation(dataLayeredNavigation);\n  };\n\n  let defaultKeywordValue = '';\n\n  if (!Validator.isBlank(props.dataLayeredNavigation.name)) {\n    defaultKeywordValue = String(props.dataLayeredNavigation.name);\n  }\n\n  if (!Validator.isBlank(props.dataLayeredNavigation.title)) {\n    defaultKeywordValue = String(props.dataLayeredNavigation.title);\n  }\n\n  let defaultValueLocation = {\n    node: {\n      id: '',\n      name: '',\n      slug: ''\n    }\n  };\n  const [defaultCity, setDefaultCity] = React.useState(defaultValueLocation);\n  const [defaultDistrict, setDefaultDistrict] = React.useState(defaultValueLocation);\n  const [defaultWard, setDefaultWard] = React.useState(defaultValueLocation); // @ts-ignore\n\n  return __jsx(Grid, {\n    className: props.className,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392\n    },\n    __self: this\n  }, __jsx(Grid, {\n    container: true,\n    className: \"search_layered__title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393\n    },\n    __self: this\n  }, \"L\\u1ECDc k\\u1EBFt qu\\u1EA3 t\\xECm ki\\u1EBFm\"), __jsx(TextField, {\n    id: \"standard-basic\",\n    label: \"T\\u1EEB kh\\xF3a\",\n    className: \"search_layered__keyword\",\n    defaultValue: defaultKeywordValue,\n    onChange: event => handleFieldChange(event, 'title', event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394\n    },\n    __self: this\n  }), __jsx(FormControl, {\n    className: \"search_layered__select\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401\n    },\n    __self: this\n  }), __jsx(Typography, {\n    id: \"range-slider\",\n    gutterBottom: true,\n    className: \"search_layered__slider__text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 478\n    },\n    __self: this\n  }, \"Di\\u1EC7n t\\xEDch (m\", __jsx(\"sup\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479\n    },\n    __self: this\n  }, \"2\"), \")\"), __jsx(Slider, {\n    className: \"search_layered__slider__content\",\n    value: areaValue,\n    onChange: handleAreaChange,\n    valueLabelDisplay: \"auto\",\n    \"aria-labelledby\": \"range-slider\",\n    max: 500,\n    getAriaValueText: valueText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 481\n    },\n    __self: this\n  }), __jsx(Typography, {\n    id: \"range-slider\",\n    gutterBottom: true,\n    className: \"search_layered__slider__text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491\n    },\n    __self: this\n  }, \"Kho\\u1EA3ng gi\\xE1 (t\\u1EC9 \\u0111\\u1ED3ng)\"), __jsx(Slider, {\n    className: \"search_layered__slider__content\",\n    value: priceValue,\n    onChange: handlePriceChange,\n    valueLabelDisplay: \"auto\",\n    \"aria-labelledby\": \"range-slider\",\n    getAriaValueText: valueText,\n    max: 50,\n    step: 0.5,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494\n    },\n    __self: this\n  }), __jsx(List, {\n    component: \"nav\",\n    \"aria-labelledby\": \"nested-list-subheader\",\n    className: \"search_layered__dropdown\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 505\n    },\n    __self: this\n  }, directionList != null && directionList.length != null && directionList.length > 0 && __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 513\n    },\n    __self: this\n  }, __jsx(ListItem, {\n    button: true,\n    onClick: handleClickDirection,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514\n    },\n    __self: this\n  }, __jsx(ListItemText, {\n    primary: \"H\\u01B0\\u1EDBng nh\\xE0\",\n    className: \"search_layered__expand\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 515\n    },\n    __self: this\n  }), openDirection ? __jsx(ExpandLess, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 516\n    },\n    __self: this\n  }) : __jsx(ExpandMore, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 516\n    },\n    __self: this\n  })), __jsx(Collapse, {\n    in: openDirection,\n    timeout: \"auto\",\n    unmountOnExit: true,\n    className: \"search_layered__expand__list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 518\n    },\n    __self: this\n  }, directionList.map((direction, index) => {\n    return __jsx(ListItemText, {\n      key: \"layered_second_\" + index,\n      primary: \"Hướng \" + direction.node.name,\n      secondary: closeIcon,\n      className: activeDirection === direction.node.id ? 'search_layered__expand__list__item active' : 'search_layered__expand__list__item',\n      onClick: event => onClickDirection(direction.node.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 521\n      },\n      __self: this\n    });\n  }))), __jsx(ListItem, {\n    button: true,\n    onClick: handleClickBedRoom,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 533\n    },\n    __self: this\n  }, __jsx(ListItemText, {\n    primary: \"S\\u1ED1 ph\\xF2ng\",\n    className: \"search_layered__expand\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 534\n    },\n    __self: this\n  }), openBedRoom ? __jsx(ExpandLess, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 535\n    },\n    __self: this\n  }) : __jsx(ExpandMore, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 535\n    },\n    __self: this\n  })), __jsx(Collapse, {\n    in: openBedRoom,\n    timeout: \"auto\",\n    unmountOnExit: true,\n    className: \"search_layered__expand__list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 537\n    },\n    __self: this\n  }, bedRoomNumber.map((bedRoom, index) => {\n    return __jsx(ListItemText, {\n      key: \"layered_navigation_\" + index,\n      primary: bedRoom.node.name,\n      secondary: closeIcon,\n      className: activeBedRoom === bedRoom.node.id ? 'search_layered__expand__list__item active' : 'search_layered__expand__list__item',\n      onClick: event => onClickBedRoom(bedRoom.node.value, bedRoom.node.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540\n      },\n      __self: this\n    });\n  }))));\n};\n\nexport default LayeredNavigation;","map":{"version":3,"sources":["C:/Users/manh nhan/Desktop/new_ndm/components/LayeredNavigation/LayeredNavigation.tsx"],"names":["React","useEffect","Grid","List","ListItem","ListItemText","Collapse","ExpandLess","ExpandMore","FormControl","TextField","createFilterOptions","Typography","dynamic","Slider","ssr","apolloClient","GET_CITY_LIST","GET_DISTRICT_LIST","GET_WARD_LIST","GET_DIRECTIONS","Validator","valueText","value","bedRoomNumber","node","id","max","min","name","LayeredNavigation","props","openDirection","setOpenDirection","useState","handleClickDirection","openBedRoom","setOpenBedRoom","handleClickBedRoom","priceRangeValue","isBlank","dataLayeredNavigation","price_range","minValue","Number","maxValue","areaRangeValue","area_range","idBedRoomNumber","bed_room_number","priceValue","setPriceValue","areaValue","setAreaValue","citesList","setCitesList","districtList","setDistrictList","wardList","setWardList","directionList","setDirectionList","activeBedRoom","setActiveBedRoom","activeDirection","setActiveDirection","String","home_direction","closeIcon","query","variables","then","response","data","citys","edges","index","city","setDefaultCity","updateDistrictLayeredNavigation","district","updateWardLayeredNavigation","directions","filterOptions","matchFrom","stringify","option","cityDataSelect","options","getOptionLabel","districtDataSelect","wardDataSelect","setDataLayeredNavigation","onChangeCites","slug","ward","page","setDefaultDistrict","defaultValueLocation","setDefaultWard","updateLayeredNavigation","handlePriceChange","event","newValue","length","map","dataToFilter","delayUpdateLayeredNavigation","handleAreaChange","timerId","setTimeout","clearTimeout","onChangeDistricts","citySlug","defaultCity","onChangeWards","districtSlug","defaultDistrict","onClickDirection","onClickBedRoom","cityId","districts","districtId","wards","handleFieldChange","title","defaultKeywordValue","defaultWard","className","target","direction","bedRoom"],"mappings":"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","sourcesContent":["import React, {FunctionComponent, useEffect} from 'react';\r\n//Import Material Libs\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\r\nimport Typography from '@material-ui/core/Typography';\r\n//Import Dynamic\r\nimport dynamic from 'next/dynamic';\r\n//Import without SSR Slider\r\nconst Slider = dynamic(() => import('@material-ui/core/Slider'), {\r\n  ssr: false\r\n});\r\n//Import Apollo Client\r\nimport {apolloClient} from \"../../utils\";\r\n//Import Query GraphQL\r\nimport {GET_CITY_LIST} from \"../../graphql/city/queries\"\r\nimport {GET_DISTRICT_LIST} from \"../../graphql/district/queries\";\r\nimport {GET_WARD_LIST} from \"../../graphql/ward/queries\";\r\nimport {GET_DIRECTIONS} from \"../../graphql/directions/queries\";\r\nimport Validator from \"../../modules/validator\";\r\n\r\nfunction valueText(value: number) {\r\n  return `${value}`;\r\n}\r\n\r\nconst bedRoomNumber = [\r\n  {node: {id: 1, value: {max: 2, min: 0}, name: '0 - 2 phòng'}},\r\n  {node: {id: 2, value: {max: 5, min: 3}, name: '3 - 5 phòng'}},\r\n  {node: {id: 3, value: {max: 100, min: 6}, name: 'trên 5 phòng'}}\r\n];\r\n\r\ninterface LayeredNavigationItem {\r\n  node: {\r\n    id: string;\r\n    name: string;\r\n    slug: string;\r\n  }\r\n}\r\ninterface LayeredNavigationBedRoom {\r\n  node: {\r\n    id: number;\r\n    value: RangeValue;\r\n    name: string;\r\n  }\r\n}\r\n\r\ninterface LayeredNavigationProps {\r\n  className: string;\r\n  updateLayeredNavigation: (data: DataLayeredNavigationProps) => void;\r\n  dataLayeredNavigation: DataLayeredNavigationProps;\r\n}\r\n\r\ninterface DataLayeredNavigationProps {\r\n  city: string|null,\r\n  district: string|null,\r\n  ward: string|null,\r\n  home_direction: string|null,\r\n  price_range: RangeValue,\r\n  area_range: RangeValue,\r\n  bed_room_number: RangeValue,\r\n  title: string|null,\r\n  name: string|null,\r\n  page: number|null,\r\n  limit: number|null,\r\n  slug: string|null,\r\n  sort_by: SortByProps\r\n}\r\n\r\ninterface SortByProps {\r\n  time?: \"newest\" | \"oldest\",\r\n  price?: \"low_to_high\" | \"high_to_low\",\r\n  view?: \"low_to_high\" | \"high_to_low\",\r\n  rate?: \"high_to_low\"\r\n}\r\n\r\ninterface RangeValue {\r\n  max: number;\r\n  min: number;\r\n}\r\n\r\nconst LayeredNavigation: FunctionComponent<LayeredNavigationProps> = (props: LayeredNavigationProps) => {\r\n  const [openDirection, setOpenDirection] = React.useState(true);\r\n  const handleClickDirection = () => {\r\n    setOpenDirection(!openDirection);\r\n  };\r\n\r\n  const [openBedRoom, setOpenBedRoom] = React.useState(true);\r\n  const handleClickBedRoom = () => {\r\n    setOpenBedRoom(!openBedRoom);\r\n  };\r\n\r\n  let priceRangeValue = [0, 50];\r\n  //set Price\r\n  if (!Validator.isBlank(props.dataLayeredNavigation.price_range.max) || !Validator.isBlank(props.dataLayeredNavigation.price_range.min)) {\r\n    let minValue = Number(props.dataLayeredNavigation.price_range.min/1000000000);\r\n    let maxValue = Number(props.dataLayeredNavigation.price_range.max/1000000000);\r\n    priceRangeValue = [minValue, maxValue];\r\n  }\r\n\r\n  let areaRangeValue = [0, 500];\r\n  //set AreaRangeValue\r\n  if (!Validator.isBlank(props.dataLayeredNavigation.area_range.max) || !Validator.isBlank(props.dataLayeredNavigation.area_range.min)) {\r\n    areaRangeValue = [props.dataLayeredNavigation.area_range.min, props.dataLayeredNavigation.area_range.max];\r\n  };\r\n\r\n  let idBedRoomNumber = -1;\r\n  if (Number(props.dataLayeredNavigation.bed_room_number.max) < 3 && Number(props.dataLayeredNavigation.bed_room_number.max) > 0) {\r\n    idBedRoomNumber = 1;\r\n  }\r\n  if (Number(props.dataLayeredNavigation.bed_room_number.max) < 6 && Number(props.dataLayeredNavigation.bed_room_number.max) > 2) {\r\n    idBedRoomNumber = 2;\r\n  }\r\n  if (5 < Number(props.dataLayeredNavigation.bed_room_number.max)) {\r\n    idBedRoomNumber = 3;\r\n  }\r\n\r\n  const [priceValue, setPriceValue] = React.useState<number[]>(priceRangeValue);\r\n  const [areaValue, setAreaValue] = React.useState<number[]>(areaRangeValue);\r\n  const [citesList, setCitesList] = React.useState<LayeredNavigationItem[]>();\r\n  const [districtList, setDistrictList] = React.useState<LayeredNavigationItem[]>();\r\n  const [wardList, setWardList] = React.useState<LayeredNavigationItem[]>();\r\n  const [directionList, setDirectionList] = React.useState<LayeredNavigationItem[]>();\r\n  const [activeBedRoom, setActiveBedRoom] = React.useState<number>(idBedRoomNumber);\r\n  const [activeDirection, setActiveDirection] = React.useState<string>(String(props.dataLayeredNavigation.home_direction));\r\n\r\n  const closeIcon = (\r\n    <svg viewBox='0 0 352 512'><path d='M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z'/></svg>\r\n  );\r\n  useEffect(() => {\r\n    apolloClient.query({query: GET_CITY_LIST, variables: {\r\n      \"page\": 1,\r\n      \"limit\": 1000,\r\n      \"filter\": \"'{}'\"\r\n    }}).then(response => {\r\n      if (typeof response.data.citys.edges !== \"undefined\") {\r\n        setCitesList(response.data.citys.edges);\r\n        for (let index in response.data.citys.edges) {\r\n          if (response.data.citys.edges[index].node.id === props.dataLayeredNavigation.city) {\r\n            setDefaultCity(response.data.citys.edges[index]);\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    if (!Validator.isBlank(props.dataLayeredNavigation.city)) {\r\n      updateDistrictLayeredNavigation(props.dataLayeredNavigation.city);\r\n    }\r\n    if (!Validator.isBlank(props.dataLayeredNavigation.district)) {\r\n      updateWardLayeredNavigation(props.dataLayeredNavigation.district);\r\n    }\r\n\r\n    apolloClient.query({query: GET_DIRECTIONS, variables: {\r\n        \"page\": 1,\r\n        \"limit\": 1000,\r\n        \"filter\": \"'{}'\"\r\n      }}).then(response => {\r\n        if (typeof response.data.directions.edges !== \"undefined\") {\r\n          setDirectionList(response.data.directions.edges);\r\n        }\r\n      });\r\n    }, []);\r\n\r\n  const filterOptions = createFilterOptions({\r\n    matchFrom: 'any',\r\n    stringify: (option: LayeredNavigationItem) => option.node.name,\r\n  });\r\n\r\n  const cityDataSelect = {\r\n    options: citesList,\r\n    getOptionLabel: (option: LayeredNavigationItem) => option.node.name,\r\n    filterOptions: filterOptions\r\n  };\r\n\r\n  const districtDataSelect = {\r\n    options: districtList,\r\n    getOptionLabel: (option: LayeredNavigationItem) => option.node.name,\r\n    filterOptions: filterOptions\r\n  };\r\n\r\n  const wardDataSelect = {\r\n    options: wardList,\r\n    getOptionLabel: (option: LayeredNavigationItem) => option.node.name,\r\n    filterOptions: filterOptions\r\n  };\r\n\r\n  const [dataLayeredNavigation, setDataLayeredNavigation] = React.useState<DataLayeredNavigationProps>(props.dataLayeredNavigation);\r\n\r\n  const onChangeCites = (value: LayeredNavigationItem|null) => {\r\n    if (value) {\r\n      dataLayeredNavigation.city = value.node.id;\r\n      dataLayeredNavigation.slug = value.node.slug;\r\n      updateDistrictLayeredNavigation(value.node.id);\r\n    } else {\r\n      dataLayeredNavigation.city = '';\r\n      dataLayeredNavigation.slug = '';\r\n    }\r\n    dataLayeredNavigation.district = '';\r\n    dataLayeredNavigation.ward = '';\r\n    dataLayeredNavigation.page = 1;\r\n    setDistrictList([]);\r\n    setWardList([]);\r\n    setDataLayeredNavigation(dataLayeredNavigation);\r\n    //Set Default Value\r\n    setDefaultDistrict(defaultValueLocation);\r\n    setDefaultWard(defaultValueLocation);\r\n    props.updateLayeredNavigation(dataLayeredNavigation);\r\n  };\r\n\r\n  const handlePriceChange = (event: any, newValue: number | number[]) => {\r\n    setPriceValue(newValue as number[]);\r\n    if (Array.isArray(newValue) && newValue.length != null && newValue.length > 0) {\r\n      let minValue = 0;\r\n      let maxValue = 0;\r\n      newValue.map((value: number, index) => {\r\n        if (index === 0) {\r\n          minValue = value;\r\n        }\r\n        if (index === 1) {\r\n          maxValue = value;\r\n        }\r\n        let dataToFilter = {\r\n          min: minValue*1000000000,\r\n          max: maxValue*1000000000\r\n        };\r\n        dataLayeredNavigation.price_range = dataToFilter;\r\n        setDataLayeredNavigation(dataLayeredNavigation);\r\n        delayUpdateLayeredNavigation(dataLayeredNavigation);\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleAreaChange = (event: any, newValue: number | number[]) => {\r\n    setAreaValue(newValue as number[]);\r\n    if (Array.isArray(newValue) && newValue.length != null && newValue.length > 0) {\r\n      let minValue = 0;\r\n      let maxValue = 0;\r\n      newValue.map((value: number, index) => {\r\n        if (index === 0) {\r\n          minValue = value;\r\n        }\r\n        if (index === 1) {\r\n          maxValue = value;\r\n        }\r\n        let dataToFilter = {\r\n          min: minValue,\r\n          max: maxValue\r\n        };\r\n        dataLayeredNavigation.area_range = dataToFilter;\r\n        setDataLayeredNavigation(dataLayeredNavigation);\r\n        delayUpdateLayeredNavigation(dataLayeredNavigation);\r\n      });\r\n    }\r\n  };\r\n\r\n  let timerId = setTimeout(() => {}, 600);\r\n  // @ts-ignore\r\n  const delayUpdateLayeredNavigation = (dataLayeredNavigation: DataLayeredNavigationProps) => {\r\n    clearTimeout(timerId);\r\n    timerId = setTimeout(() => {\r\n      props.updateLayeredNavigation(dataLayeredNavigation);\r\n    }, 600);\r\n  };\r\n\r\n  const onChangeDistricts = (value: LayeredNavigationItem|null) => {\r\n    if (value) {\r\n      dataLayeredNavigation.district = value.node.id;\r\n      dataLayeredNavigation.slug = value.node.slug;\r\n      updateWardLayeredNavigation(value.node.id);\r\n    } else {\r\n      let citySlug = defaultCity.node.slug;\r\n      dataLayeredNavigation.district = '';\r\n      dataLayeredNavigation.slug = citySlug;\r\n    }\r\n    dataLayeredNavigation.page = 1;\r\n    dataLayeredNavigation.ward = '';\r\n    setWardList([]);\r\n    setDefaultWard(defaultValueLocation);\r\n    props.updateLayeredNavigation(dataLayeredNavigation);\r\n  };\r\n\r\n  const onChangeWards = (value: LayeredNavigationItem|null) => {\r\n    if (value) {\r\n      dataLayeredNavigation.ward = value.node.id;\r\n      dataLayeredNavigation.slug = value.node.slug;\r\n    } else {\r\n      let districtSlug = defaultDistrict.node.slug;\r\n      dataLayeredNavigation.district = '';\r\n      dataLayeredNavigation.ward = '';\r\n      dataLayeredNavigation.slug = districtSlug;\r\n    }\r\n    dataLayeredNavigation.page = 1;\r\n    setDataLayeredNavigation(dataLayeredNavigation);\r\n    props.updateLayeredNavigation(dataLayeredNavigation);\r\n  };\r\n\r\n  const onClickDirection = (value: string) => {\r\n    if (value !== activeDirection) {\r\n      dataLayeredNavigation.home_direction = value;\r\n      setActiveDirection(value);\r\n    } else {\r\n      dataLayeredNavigation.home_direction = '';\r\n      setActiveDirection('');\r\n    }\r\n    setDataLayeredNavigation(dataLayeredNavigation);\r\n    props.updateLayeredNavigation(dataLayeredNavigation);\r\n  };\r\n\r\n  const onClickBedRoom = (value: RangeValue, id: number) => {\r\n    if (id !== activeBedRoom) {\r\n      dataLayeredNavigation.bed_room_number = value;\r\n      setActiveBedRoom(id);\r\n    } else {\r\n      dataLayeredNavigation.bed_room_number = {\r\n        max: 0,\r\n        min: 0\r\n      };\r\n      setActiveBedRoom(-1);\r\n    }\r\n    setDataLayeredNavigation(dataLayeredNavigation);\r\n    props.updateLayeredNavigation(dataLayeredNavigation);\r\n  };\r\n\r\n  const updateDistrictLayeredNavigation = (cityId: string|null) => {\r\n    apolloClient.query({query: GET_DISTRICT_LIST, variables: {\r\n        \"page\": 1,\r\n        \"limit\": 100,\r\n        \"filter\": \"{'city_id': '\"+cityId+\"'}\"\r\n      }}).then(response => {\r\n      if (typeof response.data.districts.edges !== \"undefined\") {\r\n        setDistrictList(response.data.districts.edges);\r\n        for (let index in response.data.districts.edges) {\r\n          if (response.data.districts.edges[index].node.id === props.dataLayeredNavigation.district) {\r\n            setDefaultDistrict(response.data.districts.edges[index]);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const updateWardLayeredNavigation = (districtId: string|null) => {\r\n    apolloClient.query({query: GET_WARD_LIST, variables: {\r\n        \"page\": 1,\r\n        \"limit\": 100,\r\n        \"filter\": \"{'district_id': '\"+districtId+\"'}\"\r\n      }}).then(response => {\r\n      if (typeof response.data.wards.edges !== \"undefined\") {\r\n        setWardList(response.data.wards.edges);\r\n        for (let index in response.data.wards.edges) {\r\n          if (response.data.wards.edges[index].node.id === props.dataLayeredNavigation.ward) {\r\n            setDefaultWard(response.data.wards.edges[index]);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n  const handleFieldChange = (event: any, title: string, value: string) => {\r\n    dataLayeredNavigation.name = value;\r\n    dataLayeredNavigation.title = value;\r\n    setDataLayeredNavigation(dataLayeredNavigation);\r\n    delayUpdateLayeredNavigation(dataLayeredNavigation);\r\n  };\r\n\r\n  let defaultKeywordValue = '';\r\n  if (!Validator.isBlank(props.dataLayeredNavigation.name)) {\r\n    defaultKeywordValue = String(props.dataLayeredNavigation.name);\r\n  }\r\n\r\n  if (!Validator.isBlank(props.dataLayeredNavigation.title)) {\r\n    defaultKeywordValue = String(props.dataLayeredNavigation.title);\r\n  }\r\n\r\n  let defaultValueLocation = {\r\n    node: {\r\n      id: '',\r\n      name: '',\r\n      slug: ''\r\n    }\r\n  };\r\n\r\n  const [defaultCity, setDefaultCity] = React.useState<any>(defaultValueLocation);\r\n  const [defaultDistrict, setDefaultDistrict] = React.useState<any>(defaultValueLocation);\r\n  const [defaultWard, setDefaultWard] = React.useState<any>(defaultValueLocation);\r\n  // @ts-ignore\r\n  return (\r\n    <Grid className={props.className}>\r\n      <Grid container className=\"search_layered__title\">Lọc kết quả tìm kiếm</Grid>\r\n      <TextField\r\n        id=\"standard-basic\"\r\n        label=\"Từ khóa\"\r\n        className=\"search_layered__keyword\"\r\n        defaultValue={defaultKeywordValue}\r\n        onChange={event => handleFieldChange(event, 'title', event.target.value)}\r\n      />\r\n      <FormControl className=\"search_layered__select\">\r\n        {/* {\r\n          // @ts-ignore\r\n          !Validator.isBlank(citesList) && !Validator.isBlank(citesList.length) && citesList.length > 0 && !Validator.isBlank(defaultCity.node.id) &&\r\n          <Autocomplete\r\n            {...cityDataSelect}\r\n            onChange={(event: any, value: LayeredNavigationItem | null) => onChangeCites(value)}\r\n            clearOnEscape\r\n            defaultValue={defaultCity}\r\n            renderInput={params => <TextField {...params} label=\"Tỉnh/Thành phố\" fullWidth/>}\r\n          />\r\n        } */}\r\n        {/* {\r\n          // @ts-ignore\r\n          !Validator.isBlank(citesList) && !Validator.isBlank(citesList.length) && citesList.length > 0 && Validator.isBlank(defaultCity.node.id) &&\r\n          <Autocomplete\r\n            {...cityDataSelect}\r\n            onChange={(event: any, value: LayeredNavigationItem | null) => onChangeCites(value)}\r\n            clearOnEscape\r\n            renderInput={params => <TextField {...params} label=\"Tỉnh/Thành phố\" fullWidth/>}\r\n          />\r\n        } */}\r\n      </FormControl>\r\n      {/* {\r\n        // @ts-ignore\r\n        districtList != null && districtList.length != null\r\n        && districtList.length > 0 && !Validator.isBlank(defaultDistrict.node.id) &&\r\n        <FormControl className=\"search_layered__select\">\r\n          <Autocomplete\r\n            {...districtDataSelect}\r\n            clearOnEscape\r\n            defaultValue={defaultDistrict}\r\n            onChange={(event: any, value: LayeredNavigationItem | null) => onChangeDistricts(value)}\r\n            renderInput={params => <TextField {...params} label=\"Quận/Huyện\" fullWidth/>}\r\n          />\r\n        </FormControl>\r\n      } */}\r\n      {/* {\r\n        // @ts-ignore\r\n        districtList != null && districtList.length != null\r\n        && districtList.length > 0 && Validator.isBlank(defaultDistrict.node.id) &&\r\n        <FormControl className=\"search_layered__select\">\r\n          <Autocomplete\r\n            {...districtDataSelect}\r\n            clearOnEscape\r\n            onChange={(event: any, value: LayeredNavigationItem | null) => onChangeDistricts(value)}\r\n            renderInput={params => <TextField {...params} label=\"Quận/Huyện\" fullWidth/>}\r\n          />\r\n        </FormControl>\r\n      } */}\r\n      {/* {\r\n        wardList != null && wardList.length != null\r\n        && wardList.length > 0 && !Validator.isBlank(defaultWard.node.id) &&\r\n        <FormControl className=\"search_layered__select margin_bottom\">\r\n          <Autocomplete\r\n            {...wardDataSelect}\r\n            clearOnEscape\r\n            defaultValue={defaultWard}\r\n            onChange={(event: any, value: LayeredNavigationItem | null) => onChangeWards(value)}\r\n            renderInput={params => <TextField {...params} label=\"Phường/Xã\" fullWidth/>}\r\n          />\r\n        </FormControl>\r\n      } */}\r\n      {/* {\r\n        wardList != null && wardList.length != null\r\n        && wardList.length > 0 && Validator.isBlank(defaultWard.node.id) &&\r\n        <FormControl className=\"search_layered__select margin_bottom\">\r\n          <Autocomplete\r\n            {...wardDataSelect}\r\n            clearOnEscape\r\n            defaultValue={defaultWard}\r\n            onChange={(event: any, value: LayeredNavigationItem | null) => onChangeWards(value)}\r\n            renderInput={params => <TextField {...params} label=\"Phường/Xã\" fullWidth/>}\r\n          />\r\n        </FormControl>\r\n      } */}\r\n\r\n      <Typography id=\"range-slider\" gutterBottom className=\"search_layered__slider__text\">\r\n        Diện tích (m<sup>2</sup>)\r\n      </Typography>\r\n      <Slider\r\n        className=\"search_layered__slider__content\"\r\n        value={areaValue}\r\n        onChange={handleAreaChange}\r\n        valueLabelDisplay=\"auto\"\r\n        aria-labelledby=\"range-slider\"\r\n        max={500}\r\n        getAriaValueText={valueText}\r\n      />\r\n\r\n      <Typography id=\"range-slider\" gutterBottom className=\"search_layered__slider__text\">\r\n        Khoảng giá (tỉ đồng)\r\n      </Typography>\r\n      <Slider\r\n        className=\"search_layered__slider__content\"\r\n        value={priceValue}\r\n        onChange={handlePriceChange}\r\n        valueLabelDisplay=\"auto\"\r\n        aria-labelledby=\"range-slider\"\r\n        getAriaValueText={valueText}\r\n        max={50}\r\n        step={0.5}\r\n      />\r\n\r\n      <List\r\n        component=\"nav\"\r\n        aria-labelledby=\"nested-list-subheader\"\r\n        className=\"search_layered__dropdown\"\r\n      >\r\n        {\r\n          directionList != null && directionList.length != null\r\n          && directionList.length > 0 &&\r\n          <div>\r\n            <ListItem button onClick={handleClickDirection}>\r\n              <ListItemText primary=\"Hướng nhà\" className=\"search_layered__expand\"/>\r\n              {openDirection ? <ExpandLess/> : <ExpandMore/>}\r\n            </ListItem>\r\n            <Collapse in={openDirection} timeout=\"auto\" unmountOnExit className=\"search_layered__expand__list\">\r\n              {\r\n                directionList.map((direction: LayeredNavigationItem, index:number) => {\r\n                  return <ListItemText\r\n                    key={\"layered_second_\" + index}\r\n                    primary={\"Hướng \" + direction.node.name}\r\n                    secondary={closeIcon}\r\n                    className={(activeDirection === direction.node.id)?'search_layered__expand__list__item active':'search_layered__expand__list__item'}\r\n                    onClick={(event: React.MouseEvent<HTMLElement>) => onClickDirection(direction.node.id)}\r\n                  />\r\n                })\r\n              }\r\n            </Collapse>\r\n          </div>\r\n        }\r\n        <ListItem button onClick={handleClickBedRoom}>\r\n          <ListItemText primary=\"Số phòng\" className=\"search_layered__expand\"/>\r\n          {openBedRoom ? <ExpandLess/> : <ExpandMore/>}\r\n        </ListItem>\r\n        <Collapse in={openBedRoom} timeout=\"auto\" unmountOnExit className=\"search_layered__expand__list\">\r\n          {\r\n            bedRoomNumber.map((bedRoom: LayeredNavigationBedRoom, index:number) => {\r\n              return <ListItemText\r\n                key={\"layered_navigation_\" + index}\r\n                primary={bedRoom.node.name}\r\n                secondary={closeIcon}\r\n                className={(activeBedRoom === bedRoom.node.id)?'search_layered__expand__list__item active':'search_layered__expand__list__item'}\r\n                onClick={(event: React.MouseEvent<HTMLElement>) => onClickBedRoom(bedRoom.node.value, bedRoom.node.id)}\r\n              />\r\n            })\r\n          }\r\n        </Collapse>\r\n      </List>\r\n    </Grid>\r\n  );\r\n};\r\nexport default LayeredNavigation;\r\n"]},"metadata":{},"sourceType":"module"}