{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\manh nhan\\\\Desktop\\\\Nhadatmoi\\\\components\\\\Chat\\\\ChatXX.jsx\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Widget, addResponseMessage, addLinkSnippet, addUserMessage, dropMessages } from 'react-chat-widget';\nimport 'react-chat-widget/lib/styles.css';\nimport './css/style.css';\nimport { Grid } from '@material-ui/core';\nimport BaseContainer, { selector } from 'containers/BaseContainer';\nimport { withStyles } from '@material-ui/core/styles';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport RequestAction from '../../actions/RequestAction';\nimport { I18n } from 'react-redux-i18n';\nconst styles = {}; // import logo from './logo.svg';\n\nclass Chat extends BaseContainer {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleNewUserMessage\", newMessage => {\n      let id = this.props.requestId;\n      let values = {\n        _id: id,\n        message: newMessage\n      };\n\n      if (!values.message.replace(/\\s/g, '').length) {\n        return false;\n      }\n\n      this.props.dispatch(RequestAction.sendMessage(values)).then(data => {\n        if (!data.error) {} else {\n          this.notify(`Response: [${data.error.status}] ${data.error.message}`, 'error');\n        }\n      });\n    });\n\n    this.state = {\n      badge: 0\n    };\n  }\n\n  componentDidMount() {\n    dropMessages();\n    let id = this.props.requestId;\n    this.props.dispatch(RequestAction.getListMessages({\n      _id: id\n    })).then(result => {\n      if (!result.error) {\n        let {\n          messages = []\n        } = result.data;\n        this.renderInitMessages(messages);\n      } else {\n        this.notify(`Response: [${result.error.status}] ${result.error.message}`, 'error');\n      }\n    });\n  } //this function render initial messages when did mount\n\n\n  renderInitMessages(messages = []) {\n    // console.log('messages ', this.props.requestId, messages)\n    const userId = JSON.parse(localStorage.getItem(\"user\"))._id;\n\n    messages.map(mess => {\n      if (String(mess.userId) === String(userId)) {\n        addUserMessage(mess.message);\n      } else {\n        addResponseMessage(mess.name + \": \" + mess.message);\n      }\n    });\n    this.setState({\n      badge: messages.length\n    });\n  }\n\n  render() {\n    return __jsx(Grid, {\n      container: true,\n      style: {\n        zIndex: 2\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, __jsx(Widget, {\n      handleNewUserMessage: this.handleNewUserMessage,\n      title: I18n.t(\"Label.Chat\"),\n      subtitle: false,\n      badge: this.state.badge,\n      senderPlaceHolder: I18n.t(\"Label.chatHolder\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    //sử dụng selector để lấy state từ redux\n    data: selector(state, \"request.data\", {})\n  };\n};\n\nexport default withRouter(connect(mapStateToProps)(withStyles(styles)(Chat)));","map":{"version":3,"sources":["C:/Users/manh nhan/Desktop/Nhadatmoi/components/Chat/ChatXX.jsx"],"names":["React","Component","Widget","addResponseMessage","addLinkSnippet","addUserMessage","dropMessages","Grid","BaseContainer","selector","withStyles","withRouter","connect","RequestAction","I18n","styles","Chat","constructor","props","newMessage","id","requestId","values","_id","message","replace","length","dispatch","sendMessage","then","data","error","notify","status","state","badge","componentDidMount","getListMessages","result","messages","renderInitMessages","userId","JSON","parse","localStorage","getItem","map","mess","String","name","setState","render","zIndex","handleNewUserMessage","t","mapStateToProps"],"mappings":"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","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport { Widget, addResponseMessage, addLinkSnippet, addUserMessage, dropMessages }from 'react-chat-widget';\r\n\r\nimport 'react-chat-widget/lib/styles.css';\r\nimport './css/style.css'\r\nimport { Grid } from '@material-ui/core';\r\nimport BaseContainer, { selector } from 'containers/BaseContainer'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { withRouter } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport RequestAction from '../../actions/RequestAction'\r\nimport { I18n } from 'react-redux-i18n'\r\nconst styles = {\r\n\r\n};\r\n\r\n// import logo from './logo.svg';\r\n\r\nclass Chat extends BaseContainer {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            badge: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        dropMessages()\r\n        let id = this.props.requestId\r\n        this.props.dispatch(RequestAction.getListMessages({\r\n             _id: id\r\n            }))\r\n            .then(result => {\r\n                if (!result.error) {\r\n                    let { messages = [] } = result.data\r\n                    this.renderInitMessages(messages)\r\n                } else {\r\n                    this.notify(`Response: [${result.error.status}] ${result.error.message}`, 'error')\r\n                }\r\n\r\n            })\r\n    }\r\n\r\n    //this function render initial messages when did mount\r\n    renderInitMessages(messages = []) {\r\n        // console.log('messages ', this.props.requestId, messages)\r\n        const userId = JSON.parse(localStorage.getItem(\"user\"))._id\r\n        messages.map(mess => {\r\n            if (String(mess.userId) === String(userId)) {\r\n                addUserMessage(mess.message)\r\n            } else {\r\n                addResponseMessage(mess.name + \": \" + mess.message)\r\n            }\r\n        })\r\n        this.setState({badge: messages.length})\r\n    }\r\n\r\n    handleNewUserMessage = (newMessage) => {\r\n        let id = this.props.requestId\r\n        let values = {\r\n            _id: id,\r\n            message: newMessage\r\n        }\r\n\r\n        if (!values.message.replace(/\\s/g, '').length) {\r\n            return false\r\n        }\r\n        this.props.dispatch(RequestAction.sendMessage(values))\r\n            .then(data => {\r\n                if (!data.error) {\r\n                } else {\r\n                    this.notify(`Response: [${data.error.status}] ${data.error.message}`, 'error')\r\n                }\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid container\r\n                style={{\r\n                    zIndex: 2\r\n                }}>\r\n                <Widget\r\n                    handleNewUserMessage={this.handleNewUserMessage}\r\n                    title={I18n.t(\"Label.Chat\")}\r\n                    subtitle={false}\r\n                    badge={this.state.badge}\r\n                    senderPlaceHolder={I18n.t(\"Label.chatHolder\")}\r\n                />\r\n            </Grid> \r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        //sử dụng selector để lấy state từ redux\r\n        data: selector(state, \"request.data\", {})\r\n    } \r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(withStyles(styles)(Chat)))"]},"metadata":{},"sourceType":"module"}