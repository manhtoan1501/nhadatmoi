{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { apolloClient } from \"../../utils\";\nimport { GET_LOCATION_FROM_SLUG } from \"../../graphql/location/queries\";\nimport Validator from \"../validator\";\n\nvar processQueryData = function processQueryData(query, typePage) {\n  var dataQuery, propObject, locationSlug, locationObject;\n  return _regeneratorRuntime.async(function processQueryData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          dataQuery = {\n            city: \"\",\n            district: \"\",\n            ward: \"\",\n            home_direction: \"\",\n            price_range: {\n              max: 0,\n              min: 0\n            },\n            area_range: {\n              max: 0,\n              min: 0\n            },\n            bed_room_number: {\n              max: 0,\n              min: 0\n            },\n            title: \"\",\n            name: \"\",\n            page: 1,\n            limit: 12,\n            sort_by: {\n              time: \"newest\"\n            }\n          };\n          propObject = {\n            location: {},\n            statusCode: 200,\n            dataQuery: dataQuery,\n            slug: query.slug\n          };\n\n          if (!(typePage === 'ad-sell-lease-location')) {\n            _context.next = 16;\n            break;\n          }\n\n          locationSlug = query.slug;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(apolloClient.query({\n            query: GET_LOCATION_FROM_SLUG,\n            variables: {\n              \"slug\": locationSlug\n            }\n          }).then(function (response) {\n            return response;\n          }));\n\n        case 6:\n          locationObject = _context.sent;\n\n          if (!(!Validator.isBlank(locationObject.data.location) && !Validator.isBlank(locationObject.data.location.city))) {\n            _context.next = 14;\n            break;\n          }\n\n          propObject.location = locationObject.data.location;\n\n          if (!Validator.isBlank(locationObject.data.location.city.id)) {\n            dataQuery.city = locationObject.data.location.city.id;\n          }\n\n          if (!Validator.isBlank(locationObject.data.location.district) && !Validator.isBlank(locationObject.data.location.district.id)) {\n            dataQuery.district = locationObject.data.location.district.id;\n          }\n\n          if (!Validator.isBlank(locationObject.data.location.ward) && !Validator.isBlank(locationObject.data.location.ward.id)) {\n            dataQuery.ward = locationObject.data.location.ward.id;\n          }\n\n          _context.next = 16;\n          break;\n\n        case 14:\n          propObject.statusCode = 404;\n          return _context.abrupt(\"return\", propObject);\n\n        case 16:\n          try {\n            if (!Validator.isBlank(query.bed_room_number)) {\n              query.bed_room_number = JSON.parse(query.bed_room_number);\n            }\n\n            if (!Validator.isBlank(query.price_range)) {\n              query.price_range = JSON.parse(query.price_range);\n            }\n\n            if (!Validator.isBlank(query.area_range)) {\n              query.area_range = JSON.parse(query.area_range);\n            }\n\n            if (!Validator.isBlank(query.sort_by)) {\n              query.sort_by = JSON.parse(query.sort_by);\n            }\n          } catch (e) {\n            propObject.statusCode = 404;\n          }\n\n          dataQuery = Object.assign(dataQuery, query);\n          dataQuery.page = Number(dataQuery.page);\n          dataQuery.limit = Number(dataQuery.limit);\n          propObject.dataQuery = dataQuery;\n          return _context.abrupt(\"return\", propObject);\n\n        case 22:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default {\n  processQueryData: processQueryData\n};","map":{"version":3,"sources":["C:/Users/manh nhan/Desktop/Nhadatmoi/modules/LayeredNavigation/processQueryData.tsx"],"names":["apolloClient","GET_LOCATION_FROM_SLUG","Validator","processQueryData","query","typePage","dataQuery","city","district","ward","home_direction","price_range","max","min","area_range","bed_room_number","title","name","page","limit","sort_by","time","propObject","location","statusCode","slug","locationSlug","variables","then","response","locationObject","isBlank","data","id","JSON","parse","e","Object","assign","Number"],"mappings":"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","sourcesContent":["import {apolloClient} from \"../../utils\";\r\nimport {GET_LOCATION_FROM_SLUG} from \"../../graphql/location/queries\";\r\nimport Validator from \"../validator\";\r\nimport {type} from \"os\";\r\n\r\nconst processQueryData = async (query: any, typePage: string) => {\r\n  let dataQuery = {\r\n    city: \"\",\r\n    district: \"\",\r\n    ward: \"\",\r\n    home_direction: \"\",\r\n    price_range: {\r\n      max: 0,\r\n      min: 0\r\n    },\r\n    area_range: {\r\n      max: 0,\r\n      min: 0\r\n    },\r\n    bed_room_number:  {\r\n      max: 0,\r\n      min: 0\r\n    },\r\n    title: \"\",\r\n    name: \"\",\r\n    page: 1,\r\n    limit: 12,\r\n    sort_by: {\r\n      time: \"newest\"\r\n    }\r\n  };\r\n\r\n  let propObject = {\r\n    location: {},\r\n    statusCode: 200,\r\n    dataQuery: dataQuery,\r\n    slug: query.slug\r\n  };\r\n\r\n  if (typePage === 'ad-sell-lease-location') {\r\n    let locationSlug = query.slug;\r\n    let locationObject = await apolloClient.query({query: GET_LOCATION_FROM_SLUG, variables: {\r\n        \"slug\": locationSlug\r\n      }}).then(response => {\r\n      return response;\r\n    });\r\n\r\n    if (!Validator.isBlank(locationObject.data.location) && !Validator.isBlank(locationObject.data.location.city)) {\r\n      propObject.location = locationObject.data.location;\r\n      if (!Validator.isBlank(locationObject.data.location.city.id)) {\r\n        dataQuery.city = locationObject.data.location.city.id;\r\n      }\r\n      if (!Validator.isBlank(locationObject.data.location.district) && !Validator.isBlank(locationObject.data.location.district.id)) {\r\n        dataQuery.district = locationObject.data.location.district.id;\r\n      }\r\n      if (!Validator.isBlank(locationObject.data.location.ward) && !Validator.isBlank(locationObject.data.location.ward.id)) {\r\n        dataQuery.ward = locationObject.data.location.ward.id;\r\n      }\r\n    } else {\r\n      propObject.statusCode = 404;\r\n      return propObject;\r\n    }\r\n  }\r\n\r\n  try {\r\n    if (!Validator.isBlank(query.bed_room_number)) {\r\n      query.bed_room_number = JSON.parse(query.bed_room_number);\r\n    }\r\n    if (!Validator.isBlank(query.price_range)) {\r\n      query.price_range = JSON.parse(query.price_range);\r\n    }\r\n    if (!Validator.isBlank(query.area_range)) {\r\n      query.area_range = JSON.parse(query.area_range);\r\n    }\r\n    if (!Validator.isBlank(query.sort_by)) {\r\n      query.sort_by = JSON.parse(query.sort_by);\r\n    }\r\n  } catch (e) {\r\n    propObject.statusCode = 404;\r\n  }\r\n\r\n  dataQuery = Object.assign(dataQuery, query);\r\n  dataQuery.page = Number(dataQuery.page);\r\n  dataQuery.limit = Number(dataQuery.limit);\r\n  propObject.dataQuery = dataQuery;\r\n  return propObject;\r\n};\r\nexport default {\r\n  processQueryData\r\n}\r\n"]},"metadata":{},"sourceType":"module"}