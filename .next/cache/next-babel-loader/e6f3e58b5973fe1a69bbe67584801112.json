{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"C:\\\\Users\\\\manh nhan\\\\Desktop\\\\Nhadatmoi\\\\pages\\\\chu-dau-tu\\\\[slug].tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\n//Import Components\nimport Layout from '../../components/Layout/Layout';\nimport DetailInvestor from \"../../components/Investor/DetailInvestor\"; //Import Const\n\nimport { apolloClient } from \"../../utils\";\nimport { GET_INVESTOR_BY_ID } from \"../../graphql/investor/queries\"; //Import Module\n\nimport StringProcess from \"../../modules/stringProcess\";\nimport \"../../assets/scss/style.scss\";\nimport { mainURL } from \"../../constants\";\nimport urlProcess from \"../../modules/urlProcess\";\nimport Validator from \"../../modules/validator\";\n\n// @ts-ignore\nconst ProjectDetailPage = props => {\n  let title = props.projectDetail.data.project.name ? props.projectDetail.data.project.name : 'Xem chi tiết dự án';\n  let albumImage = props.projectDetail.data.project.image;\n  let typeProject = '';\n  let statusProject = '';\n  let yearBuildProject = '';\n\n  let square = __jsx(React.Fragment, null, \"m\", __jsx(\"sup\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"2\"));\n\n  let areaString = __jsx(React.Fragment, null, StringProcess.addCommas(props.projectDetail.data.project.land_area), \" \", square);\n\n  let imageAvatar = 'https://static.nhadatmoi.net/default/home_default.jpg';\n\n  if (props.projectDetail.data.project.cover_image) {\n    imageAvatar = urlProcess.processImageUrl(props.projectDetail.data.project.cover_image, 'project');\n  }\n\n  const freshText = input => {\n    input = StringProcess.stripProperties(input, []);\n    input = StringProcess.stripTags(input, '');\n    input = input.replace(/&nbsp;/g, ' ');\n    return input;\n  };\n\n  const convertDescription = input => {\n    return input.replace(/&#(\\d+);/g, function (match, dec) {\n      return String.fromCharCode(dec);\n    });\n  };\n\n  let metaTitle = '';\n  let metaDescription = '';\n\n  if (props.projectDetail.data.project.seo_title) {\n    metaTitle = props.projectDetail.data.project.seo_title;\n  }\n\n  if (props.projectDetail.data.project.seo_description) {\n    metaDescription = props.projectDetail.data.project.seo_description;\n  }\n\n  if (metaTitle === '' || !metaTitle) {\n    metaTitle = title;\n  }\n\n  if (metaDescription === '' || !metaDescription) {\n    metaDescription = freshText(props.projectDetail.data.project.intro_content);\n    metaDescription = convertDescription(metaDescription);\n    metaDescription = StringProcess.truncateString(metaDescription, 255, '');\n  }\n\n  let initStateInvestor = {\n    id: \"\",\n    name: \"\",\n    description: \"\",\n    slug: \"\",\n    email: \"\",\n    website: \"\",\n    image: \"\",\n    address: {\n      text: \"\"\n    },\n    phone: \"\",\n    mobile: \"\"\n  }; //Count Ad Sell Lease\n\n  const [investor, setInvestor] = React.useState(initStateInvestor);\n  useEffect(() => {\n    let investorId = props.projectDetail.data.project.investor;\n    apolloClient.query({\n      query: GET_INVESTOR_BY_ID,\n      variables: {\n        \"id\": investorId\n      }\n    }).then(response => {\n      if (!Validator.isBlank(response.data) && !Validator.isBlank(response.data.investor)) {\n        setInvestor(response.data.investor);\n      }\n    });\n  }, []);\n  const [dataCompare, setDataCompare] = React.useState({});\n  return __jsx(Layout, _extends({\n    title: metaTitle,\n    description: metaDescription\n  }, props, {\n    image: imageAvatar,\n    canonical: mainURL + '/chu-dau-tu/' + props.slug,\n    path: 'chu-dau-tu',\n    dataCompare: dataCompare,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }), __jsx(DetailInvestor, {\n    investorId: props.projectDetail.data.project.investor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }));\n}; // @ts-ignore\n// ProjectDetailPage.getInitialProps = async function(props: QueryProp) {\n//   console.log(\"props Chu dau tu Pages\", props)\n//   let projectSlug = props.query.slug;\n//   let projectDetail = await apolloClient.query({query: GET_PROJECT_BY_SLUG, variables: {\n//       \"slug\": projectSlug\n//     }}).then(response => {\n//     return response;\n//   });\n//   return {\n//     projectDetail: projectDetail,\n//     slug: projectSlug,\n//   };\n// };\n\n\nexport default ProjectDetailPage;","map":{"version":3,"sources":["C:/Users/manh nhan/Desktop/Nhadatmoi/pages/chu-dau-tu/[slug].tsx"],"names":["React","useEffect","Layout","DetailInvestor","apolloClient","GET_INVESTOR_BY_ID","StringProcess","mainURL","urlProcess","Validator","ProjectDetailPage","props","title","projectDetail","data","project","name","albumImage","image","typeProject","statusProject","yearBuildProject","square","areaString","addCommas","land_area","imageAvatar","cover_image","processImageUrl","freshText","input","stripProperties","stripTags","replace","convertDescription","match","dec","String","fromCharCode","metaTitle","metaDescription","seo_title","seo_description","intro_content","truncateString","initStateInvestor","id","description","slug","email","website","address","text","phone","mobile","investor","setInvestor","useState","investorId","query","variables","then","response","isBlank","dataCompare","setDataCompare"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react';\r\nimport {NextPage} from \"next\";\r\n\r\n//Import Components\r\nimport Layout from '../../components/Layout/Layout';\r\nimport DetailInvestor from \"../../components/Investor/DetailInvestor\"\r\n\r\n//Import Const\r\nimport {apolloClient} from \"../../utils\";\r\nimport {GET_INVESTOR_BY_ID} from \"../../graphql/investor/queries\"\r\n//Import Module\r\nimport StringProcess from \"../../modules/stringProcess\";\r\nimport \"../../assets/scss/style.scss\";\r\nimport {localStorageCompareKey, mainURL} from \"../../constants\";\r\nimport urlProcess from \"../../modules/urlProcess\";\r\nimport Validator from \"../../modules/validator\";\r\n\r\ninterface ProjectItemProp {\r\n  id: string,\r\n  investor: string,\r\n  price: string,\r\n  name: string,\r\n  land_area: string,\r\n  image: ImageProp[],\r\n  video: string,\r\n  financial_support: string,\r\n  position_content: string,\r\n  infrastructure_content: string,\r\n  seo_title: string|null,\r\n  seo_description: string|null,\r\n  address: { \r\n    text: string,\r\n    ward: string, \r\n    district: string, \r\n    city: string \r\n  },\r\n  block: {\r\n    name: string,\r\n    image: ImageProp,\r\n  }[],\r\n  cover_image: string,\r\n  intro_content: string\r\n  created_at: string\r\n  updated_at: string\r\n  view_count: number\r\n  google_map_latitude: string\r\n  google_map_longitude: string\r\n}\r\ninterface ImageProp { \r\n  alt_text: string \r\n  description: string\r\n  title: string\r\n  src: string\r\n}\r\ninterface ProjectDetails {\r\n  url: { query: { slug: string }},\r\n  projectDetail: { data: { project: ProjectItemProp } },\r\n  slug: string\r\n}\r\ninterface QueryProp { \r\n  query: { slug: string } \r\n}\r\ninterface CompareDataProps {\r\n  avatar: string,\r\n  title: string|null,\r\n  id: string,\r\n  type: string\r\n}\r\ninterface Investor {\r\n  id: string\r\n  name: string\r\n  description: string\r\n  slug: string\r\n  email: string\r\n  website: string\r\n  image: string\r\n  address: {\r\n   text: string\r\n  }\r\n  phone: string\r\n  mobile: string\r\n}\r\ninterface ImageProp {\r\n  alt_text: string\r\n  description: string\r\n  title: string\r\n  src: string\r\n}\r\n \r\n// @ts-ignore\r\nconst ProjectDetailPage: NextPage<ProjectDetails> = (props: ProjectDetails) => {\r\n  let title = (props.projectDetail.data.project.name)?props.projectDetail.data.project.name:'Xem chi tiết dự án';\r\n  let albumImage = props.projectDetail.data.project.image;\r\n  let typeProject = '';\r\n  let statusProject = '';\r\n  let yearBuildProject = '';\r\n  let square = (<>m<sup>2</sup></>);\r\n  let areaString = (\r\n    <>\r\n      {StringProcess.addCommas(props.projectDetail.data.project.land_area)} {square}\r\n    </>\r\n  );\r\n\r\n  let imageAvatar = 'https://static.nhadatmoi.net/default/home_default.jpg';\r\n  if (props.projectDetail.data.project.cover_image) {\r\n    imageAvatar = urlProcess.processImageUrl(props.projectDetail.data.project.cover_image, 'project');\r\n  }\r\n  const freshText = (input: string) => {\r\n    input = StringProcess.stripProperties(input, []);\r\n    input = StringProcess.stripTags(input, '');\r\n    input = input.replace(/&nbsp;/g, ' ');\r\n    return input;\r\n  };\r\n  const convertDescription = (input: string) => {\r\n    return input.replace(/&#(\\d+);/g, function(match, dec) {\r\n      return String.fromCharCode(dec);\r\n    });\r\n  };\r\n\r\n  let metaTitle = '';\r\n  let metaDescription = '';\r\n  if (props.projectDetail.data.project.seo_title) {\r\n    metaTitle = props.projectDetail.data.project.seo_title;\r\n  }\r\n  if (props.projectDetail.data.project.seo_description) {\r\n    metaDescription = props.projectDetail.data.project.seo_description;\r\n  }\r\n  if (metaTitle === '' || !metaTitle) {\r\n    metaTitle = title;\r\n  }\r\n\r\n  if (metaDescription === '' || !metaDescription) {\r\n    metaDescription = freshText(props.projectDetail.data.project.intro_content);\r\n    metaDescription = convertDescription(metaDescription);\r\n    metaDescription = StringProcess.truncateString(metaDescription, 255, '');\r\n  }\r\n  let initStateInvestor = {\r\n    id: \"\",\r\n    name: \"\",\r\n    description: \"\",\r\n    slug: \"\",\r\n    email: \"\",\r\n    website: \"\",\r\n    image: \"\",\r\n    address: {\r\n      text: \"\",\r\n    },\r\n    phone: \"\",\r\n    mobile: \"\"\r\n  }\r\n  //Count Ad Sell Lease\r\n  const [investor, setInvestor] = React.useState<Investor>(initStateInvestor);\r\n  \r\n  useEffect(() => {\r\n    let investorId = props.projectDetail.data.project.investor\r\n    apolloClient.query({query: GET_INVESTOR_BY_ID, variables: {\r\n      \"id\": investorId\r\n      }}).then(response => {\r\n        if (!Validator.isBlank(response.data) && !Validator.isBlank(response.data.investor)) {\r\n          setInvestor(response.data.investor);\r\n        }\r\n    });\r\n  }, []);\r\n  const [dataCompare, setDataCompare] = React.useState({});\r\n\r\n \r\n  return (\r\n    <Layout\r\n      title={metaTitle}\r\n      description={metaDescription}\r\n      {...props}\r\n      image={imageAvatar}\r\n      canonical={ mainURL + '/chu-dau-tu/' + props.slug}\r\n      path={'chu-dau-tu'}\r\n      dataCompare={dataCompare}\r\n    >\r\n      <DetailInvestor investorId={props.projectDetail.data.project.investor} />\r\n    </Layout>\r\n  );\r\n};\r\n\r\n// @ts-ignore\r\n// ProjectDetailPage.getInitialProps = async function(props: QueryProp) {\r\n//   console.log(\"props Chu dau tu Pages\", props)\r\n//   let projectSlug = props.query.slug;\r\n//   let projectDetail = await apolloClient.query({query: GET_PROJECT_BY_SLUG, variables: {\r\n//       \"slug\": projectSlug\r\n//     }}).then(response => {\r\n//     return response;\r\n//   });\r\n//   return {\r\n//     projectDetail: projectDetail,\r\n//     slug: projectSlug,\r\n//   };\r\n// };\r\n\r\nexport default ProjectDetailPage;\r\n"]},"metadata":{},"sourceType":"module"}