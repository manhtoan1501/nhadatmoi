{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"C:\\\\Users\\\\manh nhan\\\\Desktop\\\\Nhadatmoi\\\\pages\\\\du-an\\\\[slug].tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\n//Import Components\nimport Layout from '../../components/Layout/Layout';\nimport BannerSlider from \"../../components/PageDetail/BannerSlider\";\nimport Main from \"../../components/Project/ProjectMain\"; //Import Const\n\nimport { apolloClient } from \"../../utils\";\nimport { GET_PROJECT_BY_SLUG } from \"../../graphql/project/queries\";\nimport { GET_INVESTOR_BY_ID } from \"../../graphql/investor/queries\"; //Import Module\n\nimport StringProcess from \"../../modules/stringProcess\"; //Import SCSS\n\nimport \"../../assets/scss/style.scss\";\nimport { localStorageCompareKey, mainURL } from \"../../constants\";\nimport urlProcess from \"../../modules/urlProcess\";\nimport Validator from \"../../modules/validator\";\nimport { COUNT_VIEW_PROJECT } from \"../../graphql/project/mutation\";\n\n// @ts-ignore\nconst ProjectDetailPage = props => {\n  let title = props.projectDetail.data.project.name ? props.projectDetail.data.project.name : 'Xem chi tiết dự án';\n  let albumImage = props.projectDetail.data.project.image;\n  let priceValue = props.projectDetail.data.project.price ? StringProcess.addCommas(props.projectDetail.data.project.price) + 'triệu/m2' : 'Liên hệ';\n  let typeProject = '';\n  let statusProject = '';\n  let yearBuildProject = '';\n\n  let square = __jsx(React.Fragment, null, \"m\", __jsx(\"sup\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"2\"));\n\n  let areaString = __jsx(React.Fragment, null, StringProcess.addCommas(props.projectDetail.data.project.land_area), \" \", square);\n\n  let imageAvatar = 'https://static.nhadatmoi.net/default/home_default.jpg';\n\n  if (props.projectDetail.data.project.cover_image) {\n    imageAvatar = urlProcess.processImageUrl(props.projectDetail.data.project.cover_image, 'project');\n  }\n\n  const freshText = input => {\n    input = StringProcess.stripProperties(input, []);\n    input = StringProcess.stripTags(input, '');\n    input = input.replace(/&nbsp;/g, ' ');\n    return input;\n  };\n\n  const convertDescription = input => {\n    return input.replace(/&#(\\d+);/g, function (match, dec) {\n      return String.fromCharCode(dec);\n    });\n  };\n\n  let metaTitle = '';\n  let metaDescription = '';\n\n  if (props.projectDetail.data.project.seo_title) {\n    metaTitle = props.projectDetail.data.project.seo_title;\n  }\n\n  if (props.projectDetail.data.project.seo_description) {\n    metaDescription = props.projectDetail.data.project.seo_description;\n  }\n\n  if (metaTitle === '' || !metaTitle) {\n    metaTitle = title;\n  }\n\n  if (metaDescription === '' || !metaDescription) {\n    metaDescription = freshText(props.projectDetail.data.project.intro_content);\n    metaDescription = convertDescription(metaDescription);\n    metaDescription = StringProcess.truncateString(metaDescription, 255, '');\n  } //Count Ad Sell Lease\n\n\n  let [detailInvestor, setDetailInvestor] = React.useState({});\n  useEffect(() => {\n    let projectId = props.projectDetail.data.project.id;\n    apolloClient.mutate({\n      mutation: COUNT_VIEW_PROJECT,\n      variables: {\n        \"input\": {\n          \"id\": projectId\n        }\n      }\n    }).then(response => {});\n    let investorId = props.projectDetail.data.project.investor;\n    apolloClient.query({\n      query: GET_INVESTOR_BY_ID,\n      variables: {\n        \"id\": investorId\n      }\n    }).then(response => {\n      setDetailInvestor(response.data.investor);\n    });\n  }, []);\n  const [dataCompare, setDataCompare] = React.useState({});\n\n  let updateCompareData = data => {\n    let dataToCompare = [];\n    let isAddToLocal = true;\n\n    if (localStorage.getItem(localStorageCompareKey) && !Validator.isBlank(localStorage.getItem(localStorageCompareKey))) {\n      dataToCompare = JSON.parse(localStorage.getItem(localStorageCompareKey));\n\n      for (let index in dataToCompare) {\n        if (dataToCompare[index].id === data.id) {\n          isAddToLocal = false;\n        }\n\n        if (dataToCompare[index].type !== data.type) {\n          localStorage.removeItem(localStorageCompareKey);\n          dataToCompare = [];\n          break;\n        }\n      }\n    }\n\n    if (isAddToLocal) {\n      dataToCompare.push(data); // @ts-ignore\n\n      setDataCompare(dataToCompare);\n      localStorage.setItem(localStorageCompareKey, _JSON$stringify(dataToCompare));\n    }\n  };\n\n  let propertyOverview = {\n    id: props.projectDetail.data.project.id,\n    building_density: '',\n    type: typeProject,\n    status: statusProject,\n    floor_number: 0,\n    living_room_number: 0,\n    bed_room_number: 0,\n    toilet_room_number: 0,\n    gara_number: 0,\n    material: '',\n    length: '',\n    width: '',\n    price: priceValue,\n    area: areaString,\n    year_built: yearBuildProject,\n    address: props.projectDetail.data.project.address,\n    size: '-',\n    description: props.projectDetail.data.project.intro_content,\n    map: {\n      lat: props.projectDetail.data.project.google_map_latitude,\n      lng: props.projectDetail.data.project.google_map_longitude\n    },\n    title: title,\n    view_count: props.projectDetail.data.project.view_count,\n    updated_at: props.projectDetail.data.project.updated_at,\n    created_at: props.projectDetail.data.project.created_at,\n    position_content: props.projectDetail.data.project.position_content,\n    infrastructure_content: props.projectDetail.data.project.infrastructure_content\n  };\n  let contactDefault = {\n    image: '',\n    name: '',\n    address: '',\n    mobile: '',\n    phone: '',\n    email: ''\n  };\n  console.log(\"props\", props, \"\\nInvestor\", detailInvestor);\n  return __jsx(Layout, _extends({\n    title: metaTitle,\n    description: metaDescription\n  }, props, {\n    image: imageAvatar,\n    canonical: mainURL + '/du-an/' + props.slug,\n    path: 'du-an',\n    dataCompare: dataCompare,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }), __jsx(BannerSlider, {\n    images: albumImage,\n    imageType: \"project\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207\n    },\n    __self: this\n  }), __jsx(Main, {\n    propertyOverview: propertyOverview,\n    images: albumImage,\n    contact: contactDefault,\n    imageType: \"project\",\n    detailInvestor: detailInvestor,\n    objectUrl: mainURL + '/du-an/' + props.slug,\n    avatar: props.projectDetail.data.project.cover_image,\n    updateCompareData: data => updateCompareData(data),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }));\n}; // @ts-ignore\n\n\nProjectDetailPage.getInitialProps = async function (props) {\n  let projectSlug = props.query.slug;\n  let projectDetail = await apolloClient.query({\n    query: GET_PROJECT_BY_SLUG,\n    variables: {\n      \"slug\": projectSlug\n    }\n  }).then(response => {\n    return response;\n  });\n  return {\n    projectDetail: projectDetail,\n    slug: projectSlug\n  };\n};\n\nexport default ProjectDetailPage;","map":{"version":3,"sources":["C:/Users/manh nhan/Desktop/Nhadatmoi/pages/du-an/[slug].tsx"],"names":["React","useEffect","Layout","BannerSlider","Main","apolloClient","GET_PROJECT_BY_SLUG","GET_INVESTOR_BY_ID","StringProcess","localStorageCompareKey","mainURL","urlProcess","Validator","COUNT_VIEW_PROJECT","ProjectDetailPage","props","title","projectDetail","data","project","name","albumImage","image","priceValue","price","addCommas","typeProject","statusProject","yearBuildProject","square","areaString","land_area","imageAvatar","cover_image","processImageUrl","freshText","input","stripProperties","stripTags","replace","convertDescription","match","dec","String","fromCharCode","metaTitle","metaDescription","seo_title","seo_description","intro_content","truncateString","detailInvestor","setDetailInvestor","useState","projectId","id","mutate","mutation","variables","then","response","investorId","investor","query","dataCompare","setDataCompare","updateCompareData","dataToCompare","isAddToLocal","localStorage","getItem","isBlank","JSON","parse","index","type","removeItem","push","setItem","propertyOverview","building_density","status","floor_number","living_room_number","bed_room_number","toilet_room_number","gara_number","material","length","width","area","year_built","address","size","description","map","lat","google_map_latitude","lng","google_map_longitude","view_count","updated_at","created_at","position_content","infrastructure_content","contactDefault","mobile","phone","email","console","log","slug","getInitialProps","projectSlug"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react';\r\nimport {NextPage} from \"next\";\r\n\r\n//Import Components\r\nimport Layout from '../../components/Layout/Layout';\r\nimport BannerSlider from \"../../components/PageDetail/BannerSlider\";\r\nimport Main from \"../../components/Project/ProjectMain\";\r\n\r\n//Import Const\r\nimport {apolloClient} from \"../../utils\";\r\nimport {GET_PROJECT_BY_SLUG} from \"../../graphql/project/queries\";\r\nimport {GET_INVESTOR_BY_ID} from \"../../graphql/investor/queries\"\r\n\r\n//Import Module\r\nimport StringProcess from \"../../modules/stringProcess\";\r\n\r\n//Import SCSS\r\nimport \"../../assets/scss/style.scss\";\r\nimport {localStorageCompareKey, mainURL} from \"../../constants\";\r\nimport urlProcess from \"../../modules/urlProcess\";\r\nimport Validator from \"../../modules/validator\";\r\nimport {COUNT_VIEW_PROJECT} from \"../../graphql/project/mutation\";\r\n\r\ninterface ProjectItemProp {\r\n  id: string,\r\n  investor: string,\r\n  price: string,\r\n  name: string,\r\n  land_area: string,\r\n  image: ImageProp[],\r\n  position_content: string,\r\n  infrastructure_content: string,\r\n  seo_title: string|null,\r\n  seo_description: string|null,\r\n  address: { text: string, ward: string, district: string, city: string },\r\n  cover_image: string,\r\n  intro_content: string\r\n  created_at: string\r\n  updated_at: string\r\n  view_count: number\r\n  google_map_latitude: string\r\n  google_map_longitude: string\r\n}\r\ninterface ImageProp { \r\n  alt_text: string \r\n  description: string\r\n  title: string\r\n  src: string\r\n}\r\ninterface ProjectDetails {\r\n  url: { query: { slug: string }},\r\n  projectDetail: { data: { project: ProjectItemProp } },\r\n  slug: string\r\n}\r\ninterface QueryProp { query: { slug: string } }\r\ninterface CompareDataProps {\r\n  avatar: string,\r\n  title: string|null,\r\n  id: string,\r\n  type: string\r\n}\r\n\r\n// @ts-ignore\r\nconst ProjectDetailPage: NextPage<ProjectDetails> = (props: ProjectDetails) => {\r\n  let title = (props.projectDetail.data.project.name)?props.projectDetail.data.project.name:'Xem chi tiết dự án';\r\n  let albumImage = props.projectDetail.data.project.image;\r\n  let priceValue = (props.projectDetail.data.project.price)?StringProcess.addCommas(props.projectDetail.data.project.price) + 'triệu/m2':'Liên hệ';\r\n \r\n  let typeProject = '';\r\n  let statusProject = '';\r\n  let yearBuildProject = '';\r\n\r\n  let square = (<>m<sup>2</sup></>);\r\n  let areaString = (\r\n    <>\r\n      {StringProcess.addCommas(props.projectDetail.data.project.land_area)} {square}\r\n    </>\r\n  );\r\n\r\n  let imageAvatar = 'https://static.nhadatmoi.net/default/home_default.jpg';\r\n  if (props.projectDetail.data.project.cover_image) {\r\n    imageAvatar = urlProcess.processImageUrl(props.projectDetail.data.project.cover_image, 'project');\r\n  }\r\n\r\n  const freshText = (input: string) => {\r\n    input = StringProcess.stripProperties(input, []);\r\n    input = StringProcess.stripTags(input, '');\r\n    input = input.replace(/&nbsp;/g, ' ');\r\n    return input;\r\n  };\r\n  const convertDescription = (input: string) => {\r\n    return input.replace(/&#(\\d+);/g, function(match, dec) {\r\n      return String.fromCharCode(dec);\r\n    });\r\n  };\r\n\r\n  let metaTitle = '';\r\n  let metaDescription = '';\r\n  if (props.projectDetail.data.project.seo_title) {\r\n    metaTitle = props.projectDetail.data.project.seo_title;\r\n  }\r\n  if (props.projectDetail.data.project.seo_description) {\r\n    metaDescription = props.projectDetail.data.project.seo_description;\r\n  }\r\n  if (metaTitle === '' || !metaTitle) {\r\n    metaTitle = title;\r\n  }\r\n  if (metaDescription === '' || !metaDescription) {\r\n    metaDescription = freshText(props.projectDetail.data.project.intro_content);\r\n    metaDescription = convertDescription(metaDescription);\r\n    metaDescription = StringProcess.truncateString(metaDescription, 255, '');\r\n  }\r\n\r\n  //Count Ad Sell Lease\r\n  let [detailInvestor, setDetailInvestor] = React.useState({})\r\n  useEffect(() => {\r\n    let projectId = props.projectDetail.data.project.id;\r\n    apolloClient.mutate({mutation: COUNT_VIEW_PROJECT, variables: {\r\n        \"input\": {\r\n          \"id\": projectId\r\n        }\r\n      }}).then((response: any) => {\r\n    });\r\n    let investorId = props.projectDetail.data.project.investor\r\n    apolloClient.query({query: GET_INVESTOR_BY_ID, variables: {\r\n      \"id\": investorId\r\n      }}).then((response: any) => {\r\n        setDetailInvestor(response.data.investor);\r\n    });\r\n  }, []);\r\n\r\n  const [dataCompare, setDataCompare] = React.useState({});\r\n  let updateCompareData = (data: CompareDataProps) => {\r\n    let dataToCompare = [];\r\n    let isAddToLocal = true;\r\n    if (localStorage.getItem(localStorageCompareKey) && !Validator.isBlank(localStorage.getItem(localStorageCompareKey))) {\r\n      dataToCompare = JSON.parse(localStorage.getItem(localStorageCompareKey) as string);\r\n      for (let index in dataToCompare) {\r\n        if (dataToCompare[index].id === data.id) {\r\n          isAddToLocal = false;\r\n        }\r\n        if (dataToCompare[index].type !== data.type) {\r\n          localStorage.removeItem(localStorageCompareKey);\r\n          dataToCompare = [];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (isAddToLocal) {\r\n      dataToCompare.push(data);\r\n      // @ts-ignore\r\n      setDataCompare(dataToCompare);\r\n      localStorage.setItem(localStorageCompareKey, JSON.stringify(dataToCompare));\r\n    }\r\n  };\r\n  let propertyOverview = {\r\n    id: props.projectDetail.data.project.id,\r\n    building_density: '',\r\n    type: typeProject,\r\n    status: statusProject,\r\n    floor_number: 0,\r\n    living_room_number: 0,\r\n    bed_room_number: 0,\r\n    toilet_room_number: 0,\r\n    gara_number: 0,\r\n    material: '',\r\n    length: '',\r\n    width: '',\r\n    price: priceValue,\r\n    area: areaString,\r\n    year_built: yearBuildProject,\r\n    address: props.projectDetail.data.project.address,\r\n    size: '-',\r\n    description: props.projectDetail.data.project.intro_content,\r\n    map: {\r\n      lat: props.projectDetail.data.project.google_map_latitude,\r\n      lng: props.projectDetail.data.project.google_map_longitude\r\n    },\r\n    title: title,\r\n    view_count: props.projectDetail.data.project.view_count,\r\n    updated_at: props.projectDetail.data.project.updated_at,\r\n    created_at: props.projectDetail.data.project.created_at,\r\n    position_content: props.projectDetail.data.project.position_content,\r\n    infrastructure_content: props.projectDetail.data.project.infrastructure_content\r\n  };\r\n  let contactDefault = {\r\n    image: '',\r\n    name: '',\r\n    address: '',\r\n    mobile: '',\r\n    phone: '',\r\n    email: ''\r\n  };\r\n  \r\n  console.log(\"props\", props, \"\\nInvestor\", detailInvestor)\r\n  return (\r\n    <Layout\r\n      title={metaTitle}\r\n      description={metaDescription}\r\n      {...props}\r\n      image={imageAvatar}\r\n      canonical={ mainURL + '/du-an/' + props.slug}\r\n      path={'du-an'}\r\n      dataCompare\r\n      ={dataCompare}\r\n    >\r\n      <BannerSlider images={albumImage} imageType='project'/>\r\n      <Main\r\n        propertyOverview={propertyOverview}\r\n        images={albumImage}\r\n        contact={contactDefault}\r\n        imageType='project'\r\n        detailInvestor={detailInvestor}\r\n        objectUrl={ mainURL + '/du-an/' + props.slug}\r\n        avatar={props.projectDetail.data.project.cover_image}\r\n        updateCompareData={(data: CompareDataProps) => updateCompareData(data)}\r\n      />\r\n    </Layout>\r\n  );\r\n};\r\n\r\n// @ts-ignore\r\nProjectDetailPage.getInitialProps = async function(props: QueryProp) {\r\n  let projectSlug = props.query.slug;\r\n  let projectDetail = await apolloClient.query({query: GET_PROJECT_BY_SLUG, variables: {\r\n      \"slug\": projectSlug\r\n    }}).then(response => {\r\n    return response;\r\n  });\r\n  return {\r\n    projectDetail: projectDetail,\r\n    slug: projectSlug,\r\n  };\r\n};\r\n\r\nexport default ProjectDetailPage;\r\n"]},"metadata":{},"sourceType":"module"}