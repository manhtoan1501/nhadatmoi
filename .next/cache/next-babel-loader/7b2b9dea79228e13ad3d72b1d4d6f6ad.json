{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\manh nhan\\\\Desktop\\\\Nhadatmoi\\\\components\\\\Chat\\\\Index.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Popper from '@material-ui/core/Popper';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { Element, scroller } from 'react-scroll';\nimport { Grid, InputBase, Fade, Typography, Paper, CardHeader, Avatar, Divider, Input, IconButton } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport TagFacesIcon from '@material-ui/icons/TagFaces';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport CloseIcon from '@material-ui/icons/Close';\nimport SendIcon from '@material-ui/icons/Send';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { dataEmoji, arrChat, giphyDefault, useStyles, StyledBadge, themeTextHeader, themeInput, themeInputBase } from \"./constant\";\nimport { create } from 'jss';\nimport rtl from 'jss-rtl';\nimport axios from \"axios\";\nimport { apiBaseURL } from \"../../constants\";\nimport \"cross-fetch/polyfill\";\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { apolloClient } from \"../../utils\";\nvar client = axios.create({\n  baseURL: apiBaseURL,\n  timeout: 30000\n});\nimport { UPDATE_MESSAGE } from \"../../graphql/chat/mutation\";\nimport moment from \"moment\";\nimport 'moment/locale/es';\nmoment.locale('vi');\nimport { jssPreset } from '@material-ui/core/styles';\nvar jss = create({\n  plugins: [].concat(_toConsumableArray(jssPreset().plugins), [rtl()])\n});\nvar useStylesBootstrap = makeStyles(function (theme) {\n  return {\n    arrow: {\n      color: \"#444\"\n    },\n    tooltip: {\n      backgroundColor: \"#444\"\n    }\n  };\n});\n\nfunction BootstrapTooltip(props) {\n  var classes = useStylesBootstrap();\n  return __jsx(Tooltip, _extends({\n    arrow: true,\n    classes: classes\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }));\n}\n\nexport default function PositionedPopper() {\n  var classes = useStyles();\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      anchorEl = _React$useState2[0],\n      setAnchorEl = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      open = _React$useState4[0],\n      setOpen = _React$useState4[1];\n\n  var _React$useState5 = React.useState(),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      placement = _React$useState6[0],\n      setPlacement = _React$useState6[1];\n\n  var _React$useState7 = React.useState(true),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      online = _React$useState8[0],\n      setOnline = _React$useState8[1];\n\n  var _React$useState9 = React.useState(true),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      internet = _React$useState10[0],\n      setInternet = _React$useState10[1];\n\n  var _React$useState11 = React.useState(false),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      texting = _React$useState12[0],\n      setTexting = _React$useState12[1];\n\n  var _React$useState13 = React.useState(),\n      _React$useState14 = _slicedToArray(_React$useState13, 2),\n      giphyData = _React$useState14[0],\n      setGiphyData = _React$useState14[1];\n\n  var _React$useState15 = React.useState(false),\n      _React$useState16 = _slicedToArray(_React$useState15, 2),\n      openEmojiGiphy = _React$useState16[0],\n      setOpenEmojiGiphy = _React$useState16[1];\n\n  var _React$useState17 = React.useState(\"\"),\n      _React$useState18 = _slicedToArray(_React$useState17, 2),\n      valueSearchGiphy = _React$useState18[0],\n      setValueSearchGiphy = _React$useState18[1];\n\n  var _React$useState19 = React.useState(\"https://image.crisp.chat/avatar/operator/da8d4459-5ea3-4119-bca1-9170f49ee69c/240/?1585999578742&quot\"),\n      _React$useState20 = _slicedToArray(_React$useState19, 2),\n      avatarImage = _React$useState20[0],\n      setAvatarImage = _React$useState20[1];\n\n  var _React$useState21 = React.useState(\"Nguyễn Thanh Hương\"),\n      _React$useState22 = _slicedToArray(_React$useState21, 2),\n      nameAdmin = _React$useState22[0],\n      setNameAdmin = _React$useState22[1];\n\n  var _React$useState23 = React.useState(\"\"),\n      _React$useState24 = _slicedToArray(_React$useState23, 2),\n      valueInput = _React$useState24[0],\n      setValueInput = _React$useState24[1];\n\n  var _React$useState25 = React.useState(false),\n      _React$useState26 = _slicedToArray(_React$useState25, 2),\n      viewEmoji = _React$useState26[0],\n      setViewEmoji = _React$useState26[1];\n\n  var _React$useState27 = React.useState(false),\n      _React$useState28 = _slicedToArray(_React$useState27, 2),\n      reload = _React$useState28[0],\n      setReload = _React$useState28[1];\n\n  var _React$useState29 = React.useState(),\n      _React$useState30 = _slicedToArray(_React$useState29, 2),\n      chatMessage = _React$useState30[0],\n      setChatMessage = _React$useState30[1];\n\n  var onCloseChat = function onCloseChat() {\n    setOpen(false);\n  };\n\n  var _senMessage = function _senMessage(value) {\n    return _regeneratorRuntime.async(function _senMessage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            apolloClient.mutate({\n              mutation: UPDATE_MESSAGE,\n              variables: {\n                \"input\": {\n                  \"id\": \"5e991fef5e32af5f4e43c1ef\",\n                  \"message\": {\n                    \"text\": \"\".concat(value),\n                    \"attachment\": {\n                      \"type\": \"image\",\n                      \"payload\": {\n                        \"url\": ''\n                      }\n                    }\n                  }\n                }\n              }\n            }).then(function (response) {\n              if (response.data) {\n                setChatMessage(response.data);\n              }\n\n              console.log(\"response\", response.data);\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  var senMessage = function senMessage() {\n    // arrChat.push({ message: valueInput, type: 'user', image: { url: \"\", width: \"\", height: \"\" }, date: String(new Date().getTime()) })\n    setValueInput(\"\");\n\n    _senMessage(valueInput);\n  };\n\n  var renderHeader = function renderHeader() {\n    return __jsx(ThemeProvider, {\n      theme: themeTextHeader,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, __jsx(CardHeader, {\n      className: classes.header,\n      avatar: __jsx(StyledBadge, {\n        overlap: \"circle\",\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'right'\n        },\n        variant: online ? \"dot\" : \"standard\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, __jsx(Avatar, {\n        src: avatarImage,\n        className: classes.sizeAvatarSmall,\n        alt: \"nhadatmoi.net\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      })),\n      title: nameAdmin,\n      subheader: __jsx(Typography, {\n        variant: \"caption\",\n        align: \"center\",\n        className: classes.timeWork,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, \"Ho\\u1EA1t \\u0111\\u1ED9ng: \", moment().format('DD/MM/YYYY')),\n      action: __jsx(IconButton, {\n        color: \"inherit\",\n        \"aria-label\": \"settings\",\n        onClick: function onClick() {\n          return onCloseChat();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, __jsx(CloseIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }));\n  };\n\n  var searchGiphy = function searchGiphy(event) {\n    var url, getData;\n    return _regeneratorRuntime.async(function searchGiphy$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            setValueSearchGiphy(event.target.value);\n            url = \"https://api.giphy.com/v1/gifs/search?api_key=UgTMyvovmg74m8fPN6qYiB623nwS1IPc&q=\".concat(event.target.value, \"&limit=20&offset=0&rating=G&lang=vi\");\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(axios.get(url, {}).then(function (response) {\n              setGiphyData(response.data.data);\n            }));\n\n          case 4:\n            getData = _context2.sent;\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    });\n  };\n\n  var dataSearch = [];\n\n  if (_Array$isArray(giphyData)) {\n    giphyData.map(function (item, index) {\n      dataSearch.push({\n        image: {\n          url: item.images.fixed_width.url,\n          height: item.images.fixed_width.height,\n          width: item.images.fixed_width.width\n        }\n      });\n    });\n  }\n\n  ; // Gửi ảnh emoji giphy \n\n  var setItemGiphy = function setItemGiphy(index, name) {\n    setOpenEmojiGiphy(!openEmojiGiphy); // if(name == \"giphyDefault\") {\n    //   arrChat.push({ \n    //     message: \"\", \n    //     type: 'user', \n    //     image: {\n    //       url: giphyDefault[index].image.url,\n    //       width: giphyDefault[index].image.width,\n    //       height: giphyDefault[index].image.height,\n    //     },\n    //     date: String(new Date().getTime()) \n    //   })\n    // } else if ( name == \"dataSearch\") {\n    //   arrChat.push({ \n    //     message: \"\", \n    //     type: 'user', \n    //     image: {\n    //       url: dataSearch[index].image.url,\n    //       width: dataSearch[index].image.width,\n    //       height: dataSearch[index].image.height,\n    //     },\n    //     date: String(new Date().getTime())\n    //   })\n    // }\n  };\n\n  var onClickEmoji = function onClickEmoji(index) {\n    valueInput = valueInput + dataEmoji[index][\"native\"];\n    setValueInput(valueInput);\n  };\n\n  var renderEmojiGiphy = function renderEmojiGiphy() {\n    return __jsx(\"div\", {\n      className: classes.emojiGiphy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: classes.marinButtonEmojiGiphy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, __jsx(\"button\", {\n      className: classes.buttonEmojiGiphy,\n      onClick: function onClick() {\n        return setViewEmoji(true);\n      },\n      style: {\n        backgroundColor: !viewEmoji ? \"#aaa\" : \"\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \" Bi\\u1EC3u t\\u01B0\\u1EE3ng\"), __jsx(\"button\", {\n      className: classes.buttonEmojiGiphy,\n      onClick: function onClick() {\n        return setViewEmoji(false);\n      },\n      style: {\n        backgroundColor: viewEmoji ? \"#aaa\" : \"\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, \" \\u1EA2nh \\u0111\\u1ED9ng\")), !viewEmoji && __jsx(\"div\", {\n      className: classes.rootPaper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, __jsx(SearchIcon, {\n      className: classes.sizeSearchIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }), __jsx(ThemeProvider, {\n      theme: themeInputBase,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, __jsx(InputBase, {\n      onChange: function onChange(e) {\n        return searchGiphy(e);\n      },\n      className: classes.inputBaseGiphy,\n      placeholder: \"T\\xECm ki\\u1EBFm ...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }))), viewEmoji ? __jsx(\"div\", {\n      className: classes.overflowHeightEmoji,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, dataEmoji.map(function (item, index) {\n      return __jsx(\"div\", {\n        onClick: function onClick() {\n          return onClickEmoji(index);\n        },\n        key: index,\n        className: classes.itemEmoji,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }, item[\"native\"]);\n    })) : __jsx(\"div\", {\n      className: classes.overflowHeightGiphy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, valueSearchGiphy ? dataSearch.map(function (item, index) {\n      return __jsx(\"div\", {\n        className: classes.dispalyImageGiphy,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, __jsx(\"img\", {\n        className: classes.imgListGiphy,\n        alt: \"giphy\",\n        src: item.image.url,\n        onClick: function onClick() {\n          return setItemGiphy(index, \"dataSearch\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }));\n    }) : giphyDefault.map(function (item, index) {\n      return __jsx(\"div\", {\n        className: classes.dispalyImageGiphy,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }, __jsx(\"img\", {\n        className: classes.imgListGiphy,\n        alt: \"giphy\",\n        src: item.image.url,\n        onClick: function onClick() {\n          return setItemGiphy(index, \"giphyDefault\");\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }));\n    })));\n  };\n\n  var renderContentChat = function renderContentChat() {\n    return __jsx(\"div\", {\n      className: classes.overflowHeightEmojiGiphy,\n      style: {\n        height: openEmojiGiphy ? '230px' : '430px'\n      },\n      id: 'ContainerElementID',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, __jsx(Element, {\n      name: \"myScrollToElement\",\n      id: \"test_ndm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, __jsx(Typography, {\n      align: \"center\",\n      className: classes.textSizeNewDate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, moment().format('LLL')), __jsx(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }), chatMessage.map(function (item, index) {\n      var checkNewDate = false;\n      var setViewAvatar = false; // set View newDate\n\n      var oldDate = index > 0 ? moment(Number(arrChat[index - 1].date)).format('YYYY-MM-DD') : '';\n      var newDate = moment(Number(arrChat[index].date)).format('YYYY-MM-DD');\n\n      if (index > 0 && oldDate !== newDate) {\n        checkNewDate = true;\n      } // setView avatar admin\n\n\n      if (item.type === 'admin' && index > 0) {\n        if (index === arrChat.length || arrChat[index - 1].type != arrChat[index].type || oldDate !== newDate) {\n          setViewAvatar = true;\n        }\n      } else if (item.type === 'admin' && index === 0) {\n        setViewAvatar = true;\n      }\n\n      var width = item.image.width;\n      var height = item.image.height;\n      return __jsx(\"div\", {\n        key: index,\n        style: {\n          display: \"block\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431\n        },\n        __self: this\n      }, checkNewDate && __jsx(Typography, {\n        align: \"center\",\n        className: classes.textSizeNewDate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 432\n        },\n        __self: this\n      }, moment(Number(item.date)).format(\"LLL\"), \" \", __jsx(Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433\n        },\n        __self: this\n      })), __jsx(\"div\", {\n        style: {\n          clear: \"both\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 501\n        },\n        __self: this\n      }));\n    }), !internet && __jsx(\"p\", {\n      className: classes.errInternet,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }, \" \", __jsx(\"u\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }, \"Kh\\xF4ng th\\u1EC3 g\\u1EEDi tin nh\\u1EAFn n\\xE0y. Ki\\u1EC3m tra k\\u1EBFt n\\u1ED1i internet v\\xE0 th\\u1EED l\\u1EA1i\")), texting && __jsx(\"p\", {\n      className: classes.texting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    }, \"\\u0110ang nh\\u1EADp ...\")));\n  };\n\n  var onClickOpenEmojiGiphy = function onClickOpenEmojiGiphy() {\n    setOpenEmojiGiphy(!openEmojiGiphy);\n    setViewEmoji(true);\n  };\n\n  var apiBaseURL = \"https://graph.nhadatmoi.net\";\n  var apiUpload = \"\".concat(apiBaseURL, \"/private_upload_image_app\");\n\n  var api = function api(method, url, data) {\n    return client.request({\n      data: _JSON$stringify(data),\n      headers: {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      method: method,\n      url: url,\n      withCredentials: true\n    }).then(function (response) {\n      return response.data;\n    });\n  };\n\n  var upLoadImage = function upLoadImage(files) {\n    var reader = new FileReader();\n    var file = files.target.files[0];\n    reader.readAsDataURL(file);\n\n    reader.onload = function () {\n      api(\"POST\", \"\".concat(apiUpload), {\n        base64_image: reader.result,\n        fileName: new Date().getTime() + \"\" + file.name,\n        typeUpload: \"ad_sell_lease\"\n      }).then(function (res) {\n        pustImageChat(res.location);\n      })[\"catch\"](function (err) {\n        alert('HTTP Error: ' + err.message);\n      });\n    };\n  };\n\n  var pustImageChat = function pustImageChat(url) {\n    console.log(\"url\", url); // arrChat.push({ \n    //   message:\"\", \n    //   type: 'user', \n    //   image: { url: url, width: \"100%\", height: \"100%\" }, \n    //   date: String(new Date().getTime()) \n    // })\n\n    setReload(!reload);\n  };\n\n  var setOnKeyDown = function setOnKeyDown(event) {\n    if (event.keyCode == 13) {\n      _senMessage(valueInput); // arrChat.push({ message: event.target.value, type: 'user', image: { url: \"\", width: \"\", height: \"\" }, date: String(new Date().getTime()) })\n\n\n      setValueInput(\"\");\n      var heightChatDiv = 0;\n      var elm = document.getElementById(\"test_ndm\");\n\n      if (elm) {\n        heightChatDiv = elm.offsetHeight;\n      }\n\n      scroller.scrollTo('myScrollToElement', {\n        duration: 500,\n        delay: 100,\n        smooth: true,\n        containerId: 'ContainerElementID',\n        offset: heightChatDiv\n      });\n    }\n  };\n\n  var setChangeInput = function setChangeInput(value) {\n    setValueInput(value);\n  };\n\n  var renderInput = function renderInput() {\n    return __jsx(Paper, {\n      component: \"form\",\n      className: classes.inputBase,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589\n      },\n      __self: this\n    }, __jsx(ThemeProvider, {\n      theme: themeInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590\n      },\n      __self: this\n    }, __jsx(Input, {\n      fullWidth: true,\n      disabled: !internet,\n      margin: \"dense\",\n      id: \"outlined-basic\",\n      autoFocus: true,\n      value: valueInput,\n      multiline: true,\n      onChange: function onChange(e) {\n        return setChangeInput(e.target.value);\n      },\n      onKeyDown: function onKeyDown(e) {\n        return setOnKeyDown(e);\n      },\n      placeholder: \"Nh\\u1EADp tin nh\\u1EAFn ...\",\n      autoComplete: \"false\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591\n      },\n      __self: this\n    }), openEmojiGiphy ? __jsx(BootstrapTooltip, {\n      title: \"Ch\\xE8n bi\\u1EC3u t\\u01B0\\u1EE3ng\",\n      placement: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 605\n      },\n      __self: this\n    }, __jsx(ExpandMoreIcon, {\n      className: classes.sizeIcon,\n      onClick: onClickOpenEmojiGiphy,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606\n      },\n      __self: this\n    })) : __jsx(BootstrapTooltip, {\n      title: \"Ch\\xE8n bi\\u1EC3u t\\u01B0\\u1EE3ng\",\n      placement: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608\n      },\n      __self: this\n    }, __jsx(TagFacesIcon, {\n      className: classes.sizeIcon,\n      onClick: onClickOpenEmojiGiphy,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609\n      },\n      __self: this\n    })), valueInput ? __jsx(BootstrapTooltip, {\n      title: \"G\\u1EEDi tin nh\\u1EAFn\",\n      placement: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    }, __jsx(SendIcon, {\n      onClick: senMessage,\n      className: classes.sizeIcon,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614\n      },\n      __self: this\n    })) : __jsx(BootstrapTooltip, {\n      title: \"Th\\xEAm t\\u1EADp tin\",\n      placement: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: classes.inputWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617\n      },\n      __self: this\n    }, __jsx(AddCircleOutlineIcon, {\n      className: classes.sizeIcon,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 618\n      },\n      __self: this\n    }), __jsx(\"input\", {\n      type: \"file\",\n      className: classes.fileInput,\n      onChange: upLoadImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 619\n      },\n      __self: this\n    })))));\n  };\n\n  var viewChat = function viewChat() {\n    return __jsx(Popper, {\n      open: open,\n      anchorEl: anchorEl,\n      placement: placement,\n      transition: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630\n      },\n      __self: this\n    }, function (_ref) {\n      var TransitionProps = _ref.TransitionProps;\n      return __jsx(Fade, _extends({}, TransitionProps, {\n        timeout: 300,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 632\n        },\n        __self: this\n      }), __jsx(Paper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 633\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: classes.positionSizeViewChat,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 634\n        },\n        __self: this\n      }, renderHeader(), renderContentChat(), openEmojiGiphy && renderEmojiGiphy(), renderInput())));\n    });\n  };\n\n  var handleClick = function handleClick(newPlacement) {\n    setOpen(true);\n    setPlacement(newPlacement);\n  };\n\n  var renderAvatar = function renderAvatar() {\n    return __jsx(\"div\", {\n      className: classes.positionAvatar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 654\n      },\n      __self: this\n    }, __jsx(StyledBadge, {\n      overlap: \"circle\",\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'right'\n      },\n      variant: online ? \"dot\" : \"standard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655\n      },\n      __self: this\n    }, __jsx(Avatar, {\n      src: avatarImage,\n      onClick: function onClick() {\n        return handleClick(\"top-start\");\n      },\n      className: classes.large,\n      alt: \"nhadatmoi.net\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660\n      },\n      __self: this\n    })));\n  };\n\n  return __jsx(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 667\n    },\n    __self: this\n  }, viewChat(), __jsx(Grid, {\n    container: true,\n    justify: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 669\n    },\n    __self: this\n  }, __jsx(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 670\n    },\n    __self: this\n  }, !open && renderAvatar())));\n}\n;","map":{"version":3,"sources":["C:/Users/manh nhan/Desktop/Nhadatmoi/components/Chat/Index.tsx"],"names":["React","Popper","ThemeProvider","Element","scroller","Grid","InputBase","Fade","Typography","Paper","CardHeader","Avatar","Divider","Input","IconButton","SearchIcon","AddCircleOutlineIcon","TagFacesIcon","ExpandMoreIcon","CloseIcon","SendIcon","makeStyles","dataEmoji","arrChat","giphyDefault","useStyles","StyledBadge","themeTextHeader","themeInput","themeInputBase","create","rtl","axios","apiBaseURL","Tooltip","apolloClient","client","baseURL","timeout","UPDATE_MESSAGE","moment","locale","jssPreset","jss","plugins","useStylesBootstrap","theme","arrow","color","tooltip","backgroundColor","BootstrapTooltip","props","classes","PositionedPopper","useState","anchorEl","setAnchorEl","open","setOpen","placement","setPlacement","online","setOnline","internet","setInternet","texting","setTexting","giphyData","setGiphyData","openEmojiGiphy","setOpenEmojiGiphy","valueSearchGiphy","setValueSearchGiphy","avatarImage","setAvatarImage","nameAdmin","setNameAdmin","valueInput","setValueInput","viewEmoji","setViewEmoji","reload","setReload","chatMessage","setChatMessage","onCloseChat","_senMessage","value","mutate","mutation","variables","then","response","data","console","log","senMessage","renderHeader","header","vertical","horizontal","sizeAvatarSmall","timeWork","format","searchGiphy","event","target","url","get","getData","dataSearch","map","item","index","push","image","images","fixed_width","height","width","setItemGiphy","name","onClickEmoji","renderEmojiGiphy","emojiGiphy","marinButtonEmojiGiphy","buttonEmojiGiphy","rootPaper","sizeSearchIcon","e","inputBaseGiphy","overflowHeightEmoji","itemEmoji","overflowHeightGiphy","dispalyImageGiphy","imgListGiphy","renderContentChat","overflowHeightEmojiGiphy","textSizeNewDate","checkNewDate","setViewAvatar","oldDate","Number","date","newDate","type","length","display","clear","errInternet","onClickOpenEmojiGiphy","apiUpload","api","method","request","headers","withCredentials","upLoadImage","files","reader","FileReader","file","readAsDataURL","onload","base64_image","result","fileName","Date","getTime","typeUpload","res","pustImageChat","location","err","alert","message","setOnKeyDown","keyCode","heightChatDiv","elm","document","getElementById","offsetHeight","scrollTo","duration","delay","smooth","containerId","offset","setChangeInput","renderInput","inputBase","sizeIcon","inputWrapper","fileInput","viewChat","TransitionProps","positionSizeViewChat","handleClick","newPlacement","renderAvatar","positionAvatar","large","root"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport Popper, { PopperPlacementType } from '@material-ui/core/Popper';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport { Link, Element , Events, animateScroll as scroll, scrollSpy, scroller } from 'react-scroll';\r\nimport { \r\n  Grid, \r\n  InputBase, \r\n  Fade,\r\n  Typography, \r\n  Paper, \r\n  CardHeader,\r\n  CardActionArea, \r\n  CardMedia, \r\n  Avatar, \r\n  TextField,\r\n  Badge, \r\n  Divider, \r\n  Input, \r\n  Chip, \r\n  IconButton\r\n} from '@material-ui/core';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport TagFacesIcon from '@material-ui/icons/TagFaces';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport { \r\n  Theme, \r\n  makeStyles, \r\n  withStyles, \r\n  createStyles\r\n} from '@material-ui/core/styles';\r\nimport { \r\n  dataEmoji, \r\n  arrChat, \r\n  giphyDefault, \r\n  useStyles,\r\n  themeTextfieldAdmin, \r\n  themeTextfieldUser, \r\n  StyledBadge,\r\n  themeTextHeader,\r\n  themeInput,\r\n  themeInputBase\r\n} from \"./constant\"\r\nimport { create } from 'jss';\r\nimport rtl from 'jss-rtl';\r\nimport axios, {Method} from \"axios\";\r\nimport {apiBaseURL, apiGraphQLURL} from \"../../constants\";\r\nimport \"cross-fetch/polyfill\";\r\nimport Tooltip, { TooltipProps } from '@material-ui/core/Tooltip';\r\nimport ApolloClient from \"apollo-boost\";\r\nimport {apolloClient} from \"../../utils\";\r\nconst client = axios.create({ baseURL: apiBaseURL, timeout: 30000 });\r\nimport { SEN_MESSAGE, UPDATE_MESSAGE } from \"../../graphql/chat/mutation\";\r\nimport moment from \"moment\"\r\nimport 'moment/locale/es'   \r\nmoment.locale('vi')\r\nimport { StylesProvider, jssPreset } from '@material-ui/core/styles';\r\nconst jss = create({ plugins: [...jssPreset().plugins, rtl()] });\r\n\r\nconst useStylesBootstrap = makeStyles((theme: Theme) => ({\r\n  arrow: {\r\n    color: \"#444\",\r\n  },\r\n  tooltip: {\r\n    backgroundColor: \"#444\",\r\n  },\r\n}));\r\n\r\nfunction BootstrapTooltip(props: TooltipProps) {\r\n  const classes = useStylesBootstrap();\r\n\r\n  return <Tooltip arrow classes={classes} {...props} />;\r\n}\r\n\r\ninterface ChatMessage {\r\n  chatMessage: {\r\n    id: string\r\n    conversation: Conversation[]\r\n  }\r\n}\r\n\r\ninterface Conversation {\r\n  id: string\r\n  send_user_id: string\r\n  message: {\r\n    text: string\r\n    attachment: {\r\n      type: string\r\n      payload: {\r\n        url: string\r\n      }\r\n    }\r\n    status_check: number\r\n    read_at: string\r\n    send_at: string\r\n  }\r\n}\r\n\r\n\r\nexport default function PositionedPopper() {\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [placement, setPlacement] = React.useState<PopperPlacementType>();\r\n  const [online, setOnline] = React.useState<boolean>(true);\r\n  const [internet, setInternet] = React.useState<boolean>(true);\r\n  const [texting, setTexting] = React.useState<boolean>(false);\r\n  const [giphyData, setGiphyData] = React.useState<any>();\r\n  const [openEmojiGiphy, setOpenEmojiGiphy] = React.useState<boolean>(false);\r\n  const [valueSearchGiphy, setValueSearchGiphy] = React.useState(\"\");\r\n  const [avatarImage, setAvatarImage] = React.useState(\"https://image.crisp.chat/avatar/operator/da8d4459-5ea3-4119-bca1-9170f49ee69c/240/?1585999578742&quot\")\r\n  const [nameAdmin, setNameAdmin] = React.useState(\"Nguyễn Thanh Hương\");\r\n  let   [valueInput, setValueInput] = React.useState(\"\");\r\n  const [viewEmoji, setViewEmoji] = React.useState(false);\r\n  const [reload, setReload] = React.useState(false);\r\n  const [chatMessage, setChatMessage] = React.useState<ChatMessage>()\r\n  const onCloseChat = () => {\r\n    setOpen(false)\r\n  };\r\n\r\n  const _senMessage = async (value: any)=> { \r\n    apolloClient.mutate({mutation: UPDATE_MESSAGE, variables: {\r\n        \"input\": {\r\n          \"id\": \"5e991fef5e32af5f4e43c1ef\",\r\n          \"message\": {\r\n            \"text\": `${value}`,\r\n            \"attachment\": {\r\n              \"type\": \"image\",\r\n              \"payload\": {\r\n                \"url\" : ''\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }})\r\n      .then((response: any) => {\r\n      if(response.data){\r\n        setChatMessage(response.data)\r\n      }\r\n      console.log(\"response\", response.data)\r\n    });\r\n  };\r\n\r\n  const senMessage = () => {\r\n    // arrChat.push({ message: valueInput, type: 'user', image: { url: \"\", width: \"\", height: \"\" }, date: String(new Date().getTime()) })\r\n    setValueInput(\"\")\r\n    _senMessage(valueInput)\r\n  };\r\n\r\n  const renderHeader = () => {\r\n    return (\r\n      <ThemeProvider theme={themeTextHeader}>\r\n        <CardHeader\r\n          className={classes.header}\r\n          avatar={\r\n            <StyledBadge\r\n              overlap=\"circle\"\r\n              anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n              variant= { online ? \"dot\" : \"standard\" }\r\n            >\r\n              <Avatar src={avatarImage} className={classes.sizeAvatarSmall} alt=\"nhadatmoi.net\" />\r\n            </StyledBadge>\r\n          }\r\n          title={nameAdmin}\r\n          subheader={ \r\n            <Typography variant=\"caption\" align=\"center\" className={classes.timeWork}>\r\n              Hoạt động: {moment().format('DD/MM/YYYY')}\r\n            </Typography>\r\n          }\r\n          action={\r\n            <IconButton color='inherit' aria-label=\"settings\" onClick={() => onCloseChat()} >\r\n              <CloseIcon/>\r\n            </IconButton>\r\n          }\r\n        />\r\n      </ThemeProvider>\r\n    )\r\n  };\r\n\r\n  const searchGiphy = async (event: any)=>  { \r\n    setValueSearchGiphy(event.target.value)\r\n    let url = `https://api.giphy.com/v1/gifs/search?api_key=UgTMyvovmg74m8fPN6qYiB623nwS1IPc&q=${event.target.value}&limit=20&offset=0&rating=G&lang=vi`\r\n    let getData = await axios.get(url, {})\r\n    .then(function (response) {\r\n      setGiphyData(response.data.data)\r\n    })\r\n  };\r\n\r\n  let dataSearch: any = [];\r\n  if(Array.isArray(giphyData)){\r\n    giphyData.map((item: any, index: number) => {\r\n      dataSearch.push({ \r\n        image: {\r\n          url: item.images.fixed_width.url,\r\n          height: item.images.fixed_width.height,\r\n          width: item.images.fixed_width.width,\r\n        }})\r\n    })\r\n  };\r\n  \r\n  // Gửi ảnh emoji giphy \r\n  const setItemGiphy = (index: number, name: string) => {\r\n    setOpenEmojiGiphy(!openEmojiGiphy)\r\n    // if(name == \"giphyDefault\") {\r\n    //   arrChat.push({ \r\n    //     message: \"\", \r\n    //     type: 'user', \r\n    //     image: {\r\n    //       url: giphyDefault[index].image.url,\r\n    //       width: giphyDefault[index].image.width,\r\n    //       height: giphyDefault[index].image.height,\r\n    //     },\r\n    //     date: String(new Date().getTime()) \r\n    //   })\r\n    // } else if ( name == \"dataSearch\") {\r\n    //   arrChat.push({ \r\n    //     message: \"\", \r\n    //     type: 'user', \r\n    //     image: {\r\n    //       url: dataSearch[index].image.url,\r\n    //       width: dataSearch[index].image.width,\r\n    //       height: dataSearch[index].image.height,\r\n    //     },\r\n    //     date: String(new Date().getTime())\r\n    //   })\r\n    // }\r\n  };\r\n\r\n  const onClickEmoji = (index: number) => {\r\n    valueInput = valueInput +  dataEmoji[index].native\r\n    setValueInput(valueInput)\r\n  };\r\n\r\n  const renderEmojiGiphy = () => {\r\n    return (\r\n      <div className={classes.emojiGiphy}>\r\n        <div className={classes.marinButtonEmojiGiphy}>\r\n          <button \r\n            className={classes.buttonEmojiGiphy} \r\n            onClick={() => setViewEmoji(true)} \r\n            style={{ backgroundColor: !viewEmoji ? \"#aaa\" : \"\" }}\r\n          > Biểu tượng</button>\r\n          <button \r\n            className={classes.buttonEmojiGiphy} \r\n            onClick={() => setViewEmoji(false)} \r\n            style={{ backgroundColor: viewEmoji ? \"#aaa\" : \"\" }}\r\n          > Ảnh động</button>\r\n        </div>\r\n        { !viewEmoji && \r\n          <div className={classes.rootPaper}>\r\n            <SearchIcon className={classes.sizeSearchIcon} />\r\n            <ThemeProvider theme={themeInputBase}>\r\n              <InputBase\r\n                onChange={(e) => searchGiphy(e)}\r\n                className={classes.inputBaseGiphy}\r\n                placeholder=\"Tìm kiếm ...\"\r\n              />\r\n            </ThemeProvider>\r\n          </div>}\r\n        { viewEmoji \r\n          ? <div className={classes.overflowHeightEmoji}>\r\n              {dataEmoji.map((item: any, index: number) => {\r\n                return (\r\n                  <div \r\n                    onClick={() => onClickEmoji(index)} \r\n                    key={index} className={classes.itemEmoji}\r\n                  >{item.native}</div>\r\n                )\r\n              })}\r\n            </div>\r\n          : <div className={classes.overflowHeightGiphy}>\r\n              {valueSearchGiphy \r\n                ? dataSearch.map((item: any, index: number) => {\r\n                    return (\r\n                      <div className={classes.dispalyImageGiphy} >\r\n                        <img \r\n                          className={classes.imgListGiphy} \r\n                          alt=\"giphy\" \r\n                          src={item.image.url} \r\n                          onClick={() => setItemGiphy(index, \"dataSearch\")} \r\n                        />\r\n                      </div>\r\n                    )\r\n                  })\r\n                : giphyDefault.map((item: any, index: number) => {\r\n                    return (\r\n                      <div className={classes.dispalyImageGiphy} >\r\n                        <img \r\n                          className={classes.imgListGiphy} \r\n                          alt=\"giphy\" \r\n                          src={item.image.url} \r\n                          onClick={() => setItemGiphy(index, \"giphyDefault\")} \r\n                        />\r\n                      </div>\r\n                    )\r\n                  })\r\n              }\r\n            </div>\r\n        }\r\n      </div>\r\n    )\r\n  };\r\n\r\n  const renderContentChat = () => {\r\n    return (\r\n      <div className={classes.overflowHeightEmojiGiphy} style={{ height: openEmojiGiphy ? '230px' : '430px' }} id={'ContainerElementID'}>\r\n        <Element name=\"myScrollToElement\" id={\"test_ndm\"}>\r\n          <Typography align=\"center\" className={classes.textSizeNewDate}>\r\n            {moment().format('LLL')}\r\n          </Typography>\r\n          <Divider />\r\n            {/* {arrChat.map((item: any, index: number) => {\r\n              let checkNewDate = false\r\n              let setViewAvatar = false\r\n              // set View newDate\r\n              let oldDate = index > 0 ? moment(Number(arrChat[index - 1].date)).format('YYYY-MM-DD') : ''\r\n              let newDate = moment(Number(arrChat[index].date)).format('YYYY-MM-DD')\r\n              if(index > 0 && (oldDate !== newDate)) {\r\n                checkNewDate = true\r\n              }\r\n\r\n              // setView avatar admin\r\n              if(item.type === 'admin' && index > 0) {\r\n                if((index === arrChat.length) || (arrChat[index - 1].type != arrChat[index].type) || (oldDate !== newDate)){\r\n                  setViewAvatar = true\r\n                }\r\n              } else if(item.type === 'admin' && index === 0 ) {\r\n                setViewAvatar = true\r\n              }\r\n              let width = item.image.width\r\n              let height = item.image.height\r\n              return (\r\n                <div key={index} style={{ display: \"block\" }}>\r\n                  { checkNewDate && <Typography align=\"center\" className={classes.textSizeNewDate}>\r\n                    {moment(Number(item.date)).format(\"LLL\")} <Divider /></Typography>}\r\n                  { item.type === 'admin'\r\n                    ? <ThemeProvider theme={themeTextfieldAdmin}>\r\n                      <div className={classes.viewAvatarChatContent}>\r\n                        { setViewAvatar && <Avatar className={classes.avatarAdminText} alt=\"nhadatmoi.net\" src={avatarImage} /> }\r\n                      </div>\r\n                      <div className={classes.textFieldChatContent}>\r\n                        {\r\n                          item.image.url\r\n                          ? <div className={classes.viewContentImageGiphy} style={{width: `${width}px`, height: `${height}px`, float: \"left\" }} >\r\n                              <BootstrapTooltip  title={moment(Number(item.date)).fromNow()} placement=\"top\"> \r\n                                <img className={classes.imgGiphy} alt=\"giphy\" src={item.image.url} />\r\n                              </BootstrapTooltip>\r\n                            </div>\r\n                          : <div className={classes.textAdminLeft}>\r\n                              <BootstrapTooltip  title={moment(Number(item.date)).fromNow()} placement=\"top\">\r\n                                <TextField\r\n                                  fullWidth={item.message.length > 15 ? true : false}\r\n                                  label=\"\"\r\n                                  color=\"primary\"\r\n                                  className={classes.textAdmin}\r\n                                  value={item.message.trim()}\r\n                                  margin=\"dense\"\r\n                                  id=\"outlined-basic\"\r\n                                  multiline={true}\r\n                                  InputProps={{\r\n                                    readOnly: true\r\n                                  }}\r\n                                  variant=\"outlined\"\r\n                                />\r\n                                </BootstrapTooltip >\r\n                            </div>\r\n                        }\r\n                      </div>\r\n                    </ThemeProvider>\r\n                    : <ThemeProvider theme={themeTextfieldUser}>\r\n                      {\r\n                        item.image.url\r\n                        ? <div className={classes.viewContentImageGiphy} style={{ width: `${width}px`, height: `${height}px`, float: \"right\" }} >\r\n                            <BootstrapTooltip  title={moment(Number(item.date)).fromNow()} placement=\"top\"> \r\n                              <img className={classes.imgGiphy} alt=\"giphy\" src={item.image.url} />\r\n                            </BootstrapTooltip >\r\n                          </div>\r\n                        \r\n                        : <div\r\n                            className={classes.textFieldUserChatContent}\r\n                            dir={`${item.message.length < 45 ? 'rtl' : \"\"}`}\r\n                          >\r\n                            <BootstrapTooltip  title={moment(Number(item.date)).fromNow()} placement=\"top\">\r\n                              <TextField\r\n                                fullWidth={item.message.length > 15 ? true : false}\r\n                                label=\"\"\r\n                                color=\"primary\"\r\n                                className={classes.textUser}\r\n                                value={item.message.trim()}\r\n                                margin=\"dense\"\r\n                                id=\"outlined-basic\"\r\n                                multiline={true}\r\n                                InputProps={{\r\n                                  readOnly: true\r\n                                }}\r\n                                variant=\"outlined\"\r\n                              />\r\n                            </BootstrapTooltip>\r\n                          </div>\r\n                      }\r\n                    </ThemeProvider>\r\n                  }\r\n                  <div style={{ clear: \"both\" }} />\r\n                </div>\r\n              )\r\n            })} */}\r\n\r\n          {chatMessage.map((item: any, index: number) => {\r\n            let checkNewDate = false\r\n            let setViewAvatar = false\r\n            // set View newDate\r\n            let oldDate = index > 0 ? moment(Number(arrChat[index - 1].date)).format('YYYY-MM-DD') : ''\r\n            let newDate = moment(Number(arrChat[index].date)).format('YYYY-MM-DD')\r\n            if(index > 0 && (oldDate !== newDate)) {\r\n              checkNewDate = true\r\n            }\r\n\r\n            // setView avatar admin\r\n            if(item.type === 'admin' && index > 0) {\r\n              if((index === arrChat.length) || (arrChat[index - 1].type != arrChat[index].type) || (oldDate !== newDate)){\r\n                setViewAvatar = true\r\n              }\r\n            } else if(item.type === 'admin' && index === 0 ) {\r\n              setViewAvatar = true\r\n            }\r\n            let width = item.image.width\r\n            let height = item.image.height\r\n            return (\r\n              <div key={index} style={{ display: \"block\" }}>\r\n                { checkNewDate && <Typography align=\"center\" className={classes.textSizeNewDate}>\r\n                  {moment(Number(item.date)).format(\"LLL\")} <Divider /></Typography>}\r\n                {/* { item.type === 'admin'\r\n                  ? <ThemeProvider theme={themeTextfieldAdmin}>\r\n                    <div className={classes.viewAvatarChatContent}>\r\n                      { setViewAvatar && <Avatar className={classes.avatarAdminText} alt=\"nhadatmoi.net\" src={avatarImage} /> }\r\n                    </div>\r\n                    <div className={classes.textFieldChatContent}>\r\n                      {\r\n                        item.image.url\r\n                        ? <div className={classes.viewContentImageGiphy} style={{width: `${width}px`, height: `${height}px`, float: \"left\" }} >\r\n                            <BootstrapTooltip  title={moment(Number(item.date)).fromNow()} placement=\"top\"> \r\n                              <img className={classes.imgGiphy} alt=\"giphy\" src={item.image.url} />\r\n                            </BootstrapTooltip>\r\n                          </div>\r\n                        : <div className={classes.textAdminLeft}>\r\n                            <BootstrapTooltip  title={moment(Number(item.date)).fromNow()} placement=\"top\">\r\n                              <TextField\r\n                                fullWidth={item.message.length > 15 ? true : false}\r\n                                label=\"\"\r\n                                color=\"primary\"\r\n                                className={classes.textAdmin}\r\n                                value={item.message.trim()}\r\n                                margin=\"dense\"\r\n                                id=\"outlined-basic\"\r\n                                multiline={true}\r\n                                InputProps={{\r\n                                  readOnly: true\r\n                                }}\r\n                                variant=\"outlined\"\r\n                              />\r\n                              </BootstrapTooltip >\r\n                          </div>\r\n                      }\r\n                    </div>\r\n                  </ThemeProvider>\r\n                  : <ThemeProvider theme={themeTextfieldUser}>\r\n                    {\r\n                      item.image.url\r\n                      ? <div className={classes.viewContentImageGiphy} style={{ width: `${width}px`, height: `${height}px`, float: \"right\" }} >\r\n                          <BootstrapTooltip  title={moment(Number(item.date)).fromNow()} placement=\"top\"> \r\n                            <img className={classes.imgGiphy} alt=\"giphy\" src={item.image.url} />\r\n                          </BootstrapTooltip >\r\n                        </div>\r\n                       \r\n                      : <div\r\n                          className={classes.textFieldUserChatContent}\r\n                          dir={`${item.message.length < 45 ? 'rtl' : \"\"}`}\r\n                        >\r\n                          <BootstrapTooltip  title={moment(Number(item.date)).fromNow()} placement=\"top\">\r\n                            <TextField\r\n                              fullWidth={item.message.length > 15 ? true : false}\r\n                              label=\"\"\r\n                              color=\"primary\"\r\n                              className={classes.textUser}\r\n                              value={item.message.trim()}\r\n                              margin=\"dense\"\r\n                              id=\"outlined-basic\"\r\n                              multiline={true}\r\n                              InputProps={{\r\n                                readOnly: true\r\n                              }}\r\n                              variant=\"outlined\"\r\n                            />\r\n                          </BootstrapTooltip>\r\n                        </div>\r\n                    }\r\n                  </ThemeProvider>\r\n                } */}\r\n                <div style={{ clear: \"both\" }} />\r\n              </div>\r\n            )\r\n          })}\r\n          \r\n          {/* {openEmojiGiphy && renderEmojiGiphy()} */}\r\n          {!internet && <p className={classes.errInternet}> <u>Không thể gửi tin nhắn này. Kiểm tra kết nối internet và thử lại</u></p> }\r\n          {texting && <p className={classes.texting}>Đang nhập ...</p>}\r\n        </Element>\r\n      </div>\r\n    )\r\n  };\r\n\r\n  const onClickOpenEmojiGiphy = () => {\r\n    setOpenEmojiGiphy(!openEmojiGiphy) \r\n    setViewEmoji(true)\r\n  };\r\n\r\n  const apiBaseURL = \"https://graph.nhadatmoi.net\";\r\n  const apiUpload = `${apiBaseURL}/private_upload_image_app`;\r\n  const api = (method: Method, url: string, data?: any) => client\r\n    .request({\r\n      data: JSON.stringify(data), \r\n      headers: { \r\n        \"Accept\": \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      }, \r\n      method,\r\n      url,\r\n      withCredentials: true,\r\n    }).then((response: any) => response.data);\r\n\r\n  const upLoadImage = (files: any) => {\r\n    const reader = new FileReader;\r\n    let file = files.target.files[0]\r\n    reader.readAsDataURL(file)\r\n    reader.onload = () => {\r\n      api(\"POST\", `${apiUpload}`, { \r\n        base64_image: reader.result, \r\n        fileName: (new Date()).getTime() + \"\" + file.name,\r\n        typeUpload: \"ad_sell_lease\",\r\n      })\r\n      .then(function (res) {\r\n        pustImageChat(res.location)\r\n      })\r\n      .catch(function (err) {\r\n        alert('HTTP Error: ' + err.message);\r\n      });\r\n    };\r\n  };\r\n\r\n  const pustImageChat = (url: string) => {\r\n    console.log(\"url\", url)\r\n    // arrChat.push({ \r\n    //   message:\"\", \r\n    //   type: 'user', \r\n    //   image: { url: url, width: \"100%\", height: \"100%\" }, \r\n    //   date: String(new Date().getTime()) \r\n    // })\r\n    setReload(!reload)\r\n  };\r\n\r\n  const setOnKeyDown = (event: any) => {\r\n    if(event.keyCode == 13){\r\n      _senMessage(valueInput)\r\n      // arrChat.push({ message: event.target.value, type: 'user', image: { url: \"\", width: \"\", height: \"\" }, date: String(new Date().getTime()) })\r\n      setValueInput(\"\");\r\n      let heightChatDiv = 0;\r\n      let elm = document.getElementById(\"test_ndm\");\r\n      if (elm) {\r\n        heightChatDiv =  elm.offsetHeight;\r\n      }\r\n      scroller.scrollTo('myScrollToElement', {\r\n        duration: 500,\r\n        delay: 100,\r\n        smooth: true,\r\n        containerId: 'ContainerElementID',\r\n        offset: heightChatDiv,\r\n      })\r\n    }\r\n  };\r\n  \r\n  const setChangeInput = (value: any) => {\r\n    setValueInput(value)\r\n  };\r\n\r\n  const renderInput = () => {\r\n    return (\r\n      <Paper component=\"form\" className={classes.inputBase}>\r\n        <ThemeProvider theme={themeInput}>\r\n          <Input \r\n            fullWidth\r\n            disabled={!internet}\r\n            margin=\"dense\"\r\n            id=\"outlined-basic\" \r\n            autoFocus={true}\r\n            value={valueInput}\r\n            multiline={true}\r\n            onChange={(e) => setChangeInput(e.target.value)}\r\n            onKeyDown={(e) => setOnKeyDown(e)}\r\n            placeholder=\"Nhập tin nhắn ...\"\r\n            autoComplete=\"false\"\r\n          />\r\n          { openEmojiGiphy \r\n            ? <BootstrapTooltip  title=\"Chèn biểu tượng\" placement=\"top\"> \r\n                <ExpandMoreIcon className={classes.sizeIcon} onClick={onClickOpenEmojiGiphy} color=\"primary\" />\r\n              </BootstrapTooltip > \r\n            : <BootstrapTooltip  title=\"Chèn biểu tượng\" placement=\"top\"> \r\n                <TagFacesIcon className={classes.sizeIcon} onClick={onClickOpenEmojiGiphy} color=\"primary\" />\r\n              </BootstrapTooltip >\r\n          }\r\n          { valueInput\r\n            ? <BootstrapTooltip  title=\"Gửi tin nhắn\" placement=\"top\">\r\n                <SendIcon onClick={senMessage} className={classes.sizeIcon} color=\"primary\" />\r\n              </BootstrapTooltip >\r\n            : <BootstrapTooltip  title=\"Thêm tập tin\" placement=\"top\">\r\n                <div className={classes.inputWrapper}> \r\n                  <AddCircleOutlineIcon className={classes.sizeIcon} color=\"primary\"/> \r\n                  <input type=\"file\" className={classes.fileInput}  onChange={upLoadImage} /> \r\n                </div>\r\n              </BootstrapTooltip >\r\n          }\r\n        </ThemeProvider>\r\n      </Paper>\r\n    )\r\n  };\r\n\r\n  const viewChat = () => {\r\n    return (\r\n      <Popper open={open} anchorEl={anchorEl} placement={placement} transition >\r\n        {({ TransitionProps }) => (\r\n          <Fade {...TransitionProps} timeout={300}>\r\n            <Paper>\r\n              <div className={classes.positionSizeViewChat} > \r\n                {renderHeader()}\r\n                {renderContentChat()}\r\n                {openEmojiGiphy && renderEmojiGiphy()}\r\n                {renderInput()}\r\n              </div>\r\n            </Paper>\r\n          </Fade>\r\n        )}\r\n      </Popper>\r\n    )\r\n  };\r\n\r\n  const handleClick = (newPlacement: PopperPlacementType) => {\r\n    setOpen(true)\r\n    setPlacement(newPlacement);\r\n  };\r\n\r\n  const renderAvatar = () => {\r\n    return (\r\n      <div className={classes.positionAvatar}>\r\n        <StyledBadge\r\n          overlap=\"circle\"\r\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right', }}\r\n          variant= { online ? \"dot\" : \"standard\" }\r\n        >\r\n          <Avatar src={avatarImage} onClick={() => handleClick(\"top-start\")} className={classes.large} alt=\"nhadatmoi.net\"/>\r\n        </StyledBadge>\r\n      </div>\r\n    )\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {viewChat()}\r\n      <Grid container justify=\"center\">\r\n        <Grid item>\r\n          { !open && renderAvatar()}\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}