{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport Layout from '../../components/Layout/Layout';\nimport DetailInvestor from \"../../components/Investor/DetailInvestor\";\nimport { apolloClient } from \"../../utils\";\nimport { GET_PROJECT_BY_SLUG } from \"../../graphql/project/queries\";\nimport { GET_INVESTOR_BY_ID } from \"../../graphql/investor/queries\";\nimport StringProcess from \"../../modules/stringProcess\";\nimport \"../../assets/scss/style.scss\";\nimport { localStorageCompareKey, mainURL } from \"../../constants\";\nimport urlProcess from \"../../modules/urlProcess\";\nimport Validator from \"../../modules/validator\";\nimport { COUNT_VIEW_PROJECT } from \"../../graphql/project/mutation\";\n\n// @ts-ignore\nconst ProjectDetailPage = props => {\n  let title = props.projectDetail.data.project.name ? props.projectDetail.data.project.name : 'Xem chi tiết dự án';\n\n  let square = __jsx(React.Fragment, null, \"m\", __jsx(\"sup\", null, \"2\"));\n\n  let imageAvatar = 'https://static.nhadatmoi.net/default/home_default.jpg';\n\n  if (props.projectDetail.data.project.cover_image) {\n    imageAvatar = urlProcess.processImageUrl(props.projectDetail.data.project.cover_image, 'project');\n  }\n\n  const freshText = input => {\n    input = StringProcess.stripProperties(input, []);\n    input = StringProcess.stripTags(input, '');\n    input = input.replace(/&nbsp;/g, ' ');\n    return input;\n  };\n\n  const convertDescription = input => {\n    return input.replace(/&#(\\d+);/g, function (match, dec) {\n      return String.fromCharCode(dec);\n    });\n  };\n\n  let metaTitle = '';\n  let metaDescription = '';\n\n  if (props.projectDetail.data.project.seo_title) {\n    metaTitle = props.projectDetail.data.project.seo_title;\n  }\n\n  if (props.projectDetail.data.project.seo_description) {\n    metaDescription = props.projectDetail.data.project.seo_description;\n  }\n\n  if (metaTitle === '' || !metaTitle) {\n    metaTitle = title;\n  }\n\n  if (metaDescription === '' || !metaDescription) {\n    metaDescription = freshText(props.projectDetail.data.project.intro_content);\n    metaDescription = convertDescription(metaDescription);\n    metaDescription = StringProcess.truncateString(metaDescription, 255, '');\n  }\n\n  let initStateInvestor = {\n    id: \"\",\n    name: \"\",\n    description: \"\",\n    slug: \"\",\n    email: \"\",\n    website: \"\",\n    image: \"\",\n    address: {\n      text: \"\"\n    },\n    phone: \"\",\n    mobile: \"\"\n  }; //Count Ad Sell Lease\n\n  const [investor, setInvestor] = React.useState(initStateInvestor);\n  useEffect(() => {\n    let projectId = props.projectDetail.data.project.id;\n    apolloClient.mutate({\n      mutation: COUNT_VIEW_PROJECT,\n      variables: {\n        \"input\": {\n          \"id\": projectId\n        }\n      }\n    }).then(response => {});\n    let investorId = props.projectDetail.data.project.investor;\n    apolloClient.query({\n      query: GET_INVESTOR_BY_ID,\n      variables: {\n        \"id\": investorId\n      }\n    }).then(response => {\n      if (!Validator.isBlank(response.data) && !Validator.isBlank(response.data.investor)) {\n        setInvestor(response.data.investor);\n      }\n    });\n  }, []);\n  const [dataCompare, setDataCompare] = React.useState({});\n\n  let updateCompareData = data => {\n    let dataToCompare = [];\n    let isAddToLocal = true;\n\n    if (localStorage.getItem(localStorageCompareKey) && !Validator.isBlank(localStorage.getItem(localStorageCompareKey))) {\n      dataToCompare = JSON.parse(localStorage.getItem(localStorageCompareKey));\n\n      for (let index in dataToCompare) {\n        if (dataToCompare[index].id === data.id) {\n          isAddToLocal = false;\n        }\n\n        if (dataToCompare[index].type !== data.type) {\n          localStorage.removeItem(localStorageCompareKey);\n          dataToCompare = [];\n          break;\n        }\n      }\n    }\n\n    if (isAddToLocal) {\n      dataToCompare.push(data); // @ts-ignore\n\n      setDataCompare(dataToCompare);\n      localStorage.setItem(localStorageCompareKey, _JSON$stringify(dataToCompare));\n    }\n  };\n\n  return __jsx(Layout, _extends({\n    title: metaTitle,\n    description: metaDescription\n  }, props, {\n    image: imageAvatar,\n    canonical: mainURL + '/chu-dau-tu/' + props.slug,\n    path: 'chu-dau-tu',\n    dataCompare: dataCompare\n  }), __jsx(DetailInvestor, {\n    investor: investor,\n    slug: props.slug\n  }));\n}; // @ts-ignore\n\n\nProjectDetailPage.getInitialProps = async function (props) {\n  let projectSlug = props.query.slug;\n  let projectDetail = await apolloClient.query({\n    query: GET_PROJECT_BY_SLUG,\n    variables: {\n      \"slug\": projectSlug\n    }\n  }).then(response => {\n    return response;\n  });\n  return {\n    projectDetail: projectDetail,\n    slug: projectSlug\n  };\n};\n\nexport default ProjectDetailPage;","map":null,"metadata":{},"sourceType":"module"}