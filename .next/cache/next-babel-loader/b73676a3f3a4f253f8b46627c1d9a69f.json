{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"C:\\\\Users\\\\manh nhan\\\\Desktop\\\\Nhadatmoi\\\\pages\\\\chu-dau-tu\\\\[slug].tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\n//Import Components\nimport Layout from '../../components/Layout/Layout';\nimport DetailInvestor from \"../../components/Investor/DetailInvestor\"; //Import Const\n\nimport { apolloClient } from \"../../utils\";\nimport { GET_PROJECT_BY_SLUG } from \"../../graphql/project/queries\";\nimport { GET_INVESTOR_BY_ID } from \"../../graphql/investor/queries\"; //Import Module\n\nimport StringProcess from \"../../modules/stringProcess\"; //Import SCSS\n\nimport \"../../assets/scss/style.scss\";\nimport { localStorageCompareKey, mainURL } from \"../../constants\";\nimport urlProcess from \"../../modules/urlProcess\";\nimport Validator from \"../../modules/validator\";\nimport { COUNT_VIEW_PROJECT } from \"../../graphql/project/mutation\";\n\n// @ts-ignore\nconst ProjectDetailPage = props => {\n  let title = props.projectDetail.data.project.name ? props.projectDetail.data.project.name : 'Xem chi tiết dự án';\n\n  let square = __jsx(React.Fragment, null, \"m\", __jsx(\"sup\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"2\"));\n\n  let areaString = __jsx(React.Fragment, null, StringProcess.addCommas(props.projectDetail.data.project.land_area), \" \", square);\n\n  let imageAvatar = 'https://static.nhadatmoi.net/default/home_default.jpg';\n\n  if (props.projectDetail.data.project.cover_image) {\n    imageAvatar = urlProcess.processImageUrl(props.projectDetail.data.project.cover_image, 'project');\n  }\n\n  const freshText = input => {\n    input = StringProcess.stripProperties(input, []);\n    input = StringProcess.stripTags(input, '');\n    input = input.replace(/&nbsp;/g, ' ');\n    return input;\n  };\n\n  const convertDescription = input => {\n    return input.replace(/&#(\\d+);/g, function (match, dec) {\n      return String.fromCharCode(dec);\n    });\n  };\n\n  let metaTitle = '';\n  let metaDescription = '';\n\n  if (props.projectDetail.data.project.seo_title) {\n    metaTitle = props.projectDetail.data.project.seo_title;\n  }\n\n  if (props.projectDetail.data.project.seo_description) {\n    metaDescription = props.projectDetail.data.project.seo_description;\n  }\n\n  if (metaTitle === '' || !metaTitle) {\n    metaTitle = title;\n  }\n\n  if (metaDescription === '' || !metaDescription) {\n    metaDescription = freshText(props.projectDetail.data.project.intro_content);\n    metaDescription = convertDescription(metaDescription);\n    metaDescription = StringProcess.truncateString(metaDescription, 255, '');\n  }\n\n  let initStateInvestor = {\n    id: \"\",\n    name: \"\",\n    description: \"\",\n    slug: \"\",\n    email: \"\",\n    website: \"\",\n    image: \"\",\n    address: {\n      text: \"\"\n    },\n    phone: \"\",\n    mobile: \"\"\n  }; //Count Ad Sell Lease\n\n  const [investor, setInvestor] = React.useState(initStateInvestor);\n  useEffect(() => {\n    let projectId = props.projectDetail.data.project.id;\n    apolloClient.mutate({\n      mutation: COUNT_VIEW_PROJECT,\n      variables: {\n        \"input\": {\n          \"id\": projectId\n        }\n      }\n    }).then(response => {});\n    let investorId = props.projectDetail.data.project.investor;\n    apolloClient.query({\n      query: GET_INVESTOR_BY_ID,\n      variables: {\n        \"id\": investorId\n      }\n    }).then(response => {\n      if (!Validator.isBlank(response.data) && !Validator.isBlank(response.data.investor)) {\n        setInvestor(response.data.investor);\n      }\n    });\n  }, []);\n  const [dataCompare, setDataCompare] = React.useState({});\n\n  let updateCompareData = data => {\n    let dataToCompare = [];\n    let isAddToLocal = true;\n\n    if (localStorage.getItem(localStorageCompareKey) && !Validator.isBlank(localStorage.getItem(localStorageCompareKey))) {\n      dataToCompare = JSON.parse(localStorage.getItem(localStorageCompareKey));\n\n      for (let index in dataToCompare) {\n        if (dataToCompare[index].id === data.id) {\n          isAddToLocal = false;\n        }\n\n        if (dataToCompare[index].type !== data.type) {\n          localStorage.removeItem(localStorageCompareKey);\n          dataToCompare = [];\n          break;\n        }\n      }\n    }\n\n    if (isAddToLocal) {\n      dataToCompare.push(data); // @ts-ignore\n\n      setDataCompare(dataToCompare);\n      localStorage.setItem(localStorageCompareKey, _JSON$stringify(dataToCompare));\n    }\n  };\n\n  return __jsx(Layout, _extends({\n    title: metaTitle,\n    description: metaDescription\n  }, props, {\n    image: imageAvatar,\n    canonical: mainURL + '/chu-dau-tu/' + props.slug,\n    path: 'chu-dau-tu',\n    dataCompare: dataCompare,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }), __jsx(DetailInvestor, {\n    investorId: props.projectDetail.data.project.investor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }));\n}; // @ts-ignore\n\n\nProjectDetailPage.getInitialProps = async function (props) {\n  console.log(\"props Chu dau tu Pages\", props);\n  let projectSlug = props.query.slug;\n  let projectDetail = await apolloClient.query({\n    query: GET_PROJECT_BY_SLUG,\n    variables: {\n      \"slug\": projectSlug\n    }\n  }).then(response => {\n    return response;\n  });\n  return {\n    projectDetail: projectDetail,\n    slug: projectSlug\n  };\n};\n\nexport default ProjectDetailPage;","map":{"version":3,"sources":["C:/Users/manh nhan/Desktop/Nhadatmoi/pages/chu-dau-tu/[slug].tsx"],"names":["React","useEffect","Layout","DetailInvestor","apolloClient","GET_PROJECT_BY_SLUG","GET_INVESTOR_BY_ID","StringProcess","localStorageCompareKey","mainURL","urlProcess","Validator","COUNT_VIEW_PROJECT","ProjectDetailPage","props","title","projectDetail","data","project","name","square","areaString","addCommas","land_area","imageAvatar","cover_image","processImageUrl","freshText","input","stripProperties","stripTags","replace","convertDescription","match","dec","String","fromCharCode","metaTitle","metaDescription","seo_title","seo_description","intro_content","truncateString","initStateInvestor","id","description","slug","email","website","image","address","text","phone","mobile","investor","setInvestor","useState","projectId","mutate","mutation","variables","then","response","investorId","query","isBlank","dataCompare","setDataCompare","updateCompareData","dataToCompare","isAddToLocal","localStorage","getItem","JSON","parse","index","type","removeItem","push","setItem","getInitialProps","console","log","projectSlug"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react';\r\nimport {NextPage} from \"next\";\r\n\r\n//Import Components\r\nimport Layout from '../../components/Layout/Layout';\r\nimport BannerSlider from \"../../components/PageDetail/BannerSlider\";\r\nimport Main from \"../../components/Project/ProjectMain\";\r\nimport DetailInvestor from \"../../components/Investor/DetailInvestor\"\r\n\r\n//Import Const\r\nimport {apolloClient} from \"../../utils\";\r\nimport {GET_PROJECT_BY_SLUG} from \"../../graphql/project/queries\";\r\nimport {GET_INVESTOR_BY_ID} from \"../../graphql/investor/queries\"\r\n\r\n//Import Module\r\nimport StringProcess from \"../../modules/stringProcess\";\r\n\r\n//Import SCSS\r\nimport \"../../assets/scss/style.scss\";\r\nimport {localStorageCompareKey, mainURL} from \"../../constants\";\r\nimport urlProcess from \"../../modules/urlProcess\";\r\nimport Validator from \"../../modules/validator\";\r\nimport {COUNT_VIEW_PROJECT} from \"../../graphql/project/mutation\";\r\n\r\ninterface ProjectItemProp {\r\n  id: string,\r\n  investor: string,\r\n  price: string,\r\n  name: string,\r\n  land_area: string,\r\n  image: ImageProp[],\r\n  video: string,\r\n  financial_support: string,\r\n  position_content: string,\r\n  infrastructure_content: string,\r\n  seo_title: string|null,\r\n  seo_description: string|null,\r\n  address: { \r\n    text: string,\r\n    ward: string, \r\n    district: string, \r\n    city: string \r\n  },\r\n  block: {\r\n    name: string,\r\n    image: ImageProp,\r\n  }[],\r\n  cover_image: string,\r\n  intro_content: string\r\n  created_at: string\r\n  updated_at: string\r\n  view_count: number\r\n  google_map_latitude: string\r\n  google_map_longitude: string\r\n}\r\ninterface ImageProp { \r\n  alt_text: string \r\n  description: string\r\n  title: string\r\n  src: string\r\n}\r\ninterface ProjectDetails {\r\n  url: { query: { slug: string }},\r\n  projectDetail: { data: { project: ProjectItemProp } },\r\n  slug: string\r\n}\r\ninterface QueryProp { \r\n  query: { slug: string } \r\n}\r\ninterface CompareDataProps {\r\n  avatar: string,\r\n  title: string|null,\r\n  id: string,\r\n  type: string\r\n}\r\ninterface Investor {\r\n  id: string\r\n  name: string\r\n  description: string\r\n  slug: string\r\n  email: string\r\n  website: string\r\n  image: string\r\n  address: {\r\n   text: string\r\n  }\r\n  phone: string\r\n  mobile: string\r\n}\r\ninterface ImageProp {\r\n  alt_text: string\r\n  description: string\r\n  title: string\r\n  src: string\r\n}\r\n \r\n// @ts-ignore\r\nconst ProjectDetailPage: NextPage<ProjectDetails> = (props: ProjectDetails) => {\r\n  let title = (props.projectDetail.data.project.name)?props.projectDetail.data.project.name:'Xem chi tiết dự án';\r\n  let square = (<>m<sup>2</sup></>);\r\n  let areaString = (\r\n    <>\r\n      {StringProcess.addCommas(props.projectDetail.data.project.land_area)} {square}\r\n    </>\r\n  );\r\n\r\n  let imageAvatar = 'https://static.nhadatmoi.net/default/home_default.jpg';\r\n  if (props.projectDetail.data.project.cover_image) {\r\n    imageAvatar = urlProcess.processImageUrl(props.projectDetail.data.project.cover_image, 'project');\r\n  }\r\n  const freshText = (input: string) => {\r\n    input = StringProcess.stripProperties(input, []);\r\n    input = StringProcess.stripTags(input, '');\r\n    input = input.replace(/&nbsp;/g, ' ');\r\n    return input;\r\n  };\r\n  const convertDescription = (input: string) => {\r\n    return input.replace(/&#(\\d+);/g, function(match, dec) {\r\n      return String.fromCharCode(dec);\r\n    });\r\n  };\r\n\r\n  let metaTitle = '';\r\n  let metaDescription = '';\r\n  if (props.projectDetail.data.project.seo_title) {\r\n    metaTitle = props.projectDetail.data.project.seo_title;\r\n  }\r\n  if (props.projectDetail.data.project.seo_description) {\r\n    metaDescription = props.projectDetail.data.project.seo_description;\r\n  }\r\n  if (metaTitle === '' || !metaTitle) {\r\n    metaTitle = title;\r\n  }\r\n\r\n  if (metaDescription === '' || !metaDescription) {\r\n    metaDescription = freshText(props.projectDetail.data.project.intro_content);\r\n    metaDescription = convertDescription(metaDescription);\r\n    metaDescription = StringProcess.truncateString(metaDescription, 255, '');\r\n  }\r\n  let initStateInvestor = {\r\n    id: \"\",\r\n    name: \"\",\r\n    description: \"\",\r\n    slug: \"\",\r\n    email: \"\",\r\n    website: \"\",\r\n    image: \"\",\r\n    address: {\r\n      text: \"\",\r\n    },\r\n    phone: \"\",\r\n    mobile: \"\"\r\n  }\r\n  //Count Ad Sell Lease\r\n  const [investor, setInvestor] = React.useState<Investor>(initStateInvestor);\r\n  \r\n  useEffect(() => {\r\n    let projectId = props.projectDetail.data.project.id;\r\n    apolloClient.mutate({mutation: COUNT_VIEW_PROJECT, variables: {\r\n        \"input\": {\r\n          \"id\": projectId\r\n        }\r\n      }}).then((response: any) => {\r\n    });\r\n    let investorId = props.projectDetail.data.project.investor\r\n    apolloClient.query({query: GET_INVESTOR_BY_ID, variables: {\r\n      \"id\": investorId\r\n      }}).then(response => {\r\n        if (!Validator.isBlank(response.data) && !Validator.isBlank(response.data.investor)) {\r\n          setInvestor(response.data.investor);\r\n        }\r\n    });\r\n  }, []);\r\n\r\n  const [dataCompare, setDataCompare] = React.useState({});\r\n  let updateCompareData = (data: CompareDataProps) => {\r\n    let dataToCompare = [];\r\n    let isAddToLocal = true;\r\n    if (localStorage.getItem(localStorageCompareKey) && !Validator.isBlank(localStorage.getItem(localStorageCompareKey))) {\r\n      dataToCompare = JSON.parse(localStorage.getItem(localStorageCompareKey) as string);\r\n      for (let index in dataToCompare) {\r\n        if (dataToCompare[index].id === data.id) {\r\n          isAddToLocal = false;\r\n        }\r\n        if (dataToCompare[index].type !== data.type) {\r\n          localStorage.removeItem(localStorageCompareKey);\r\n          dataToCompare = [];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if (isAddToLocal) {\r\n      dataToCompare.push(data);\r\n      // @ts-ignore\r\n      setDataCompare(dataToCompare);\r\n      localStorage.setItem(localStorageCompareKey, JSON.stringify(dataToCompare));\r\n    }\r\n  };\r\n  return (\r\n    <Layout\r\n      title={metaTitle}\r\n      description={metaDescription}\r\n      {...props}\r\n      image={imageAvatar}\r\n      canonical={ mainURL + '/chu-dau-tu/' + props.slug}\r\n      path={'chu-dau-tu'}\r\n      dataCompare={dataCompare}\r\n    >\r\n      <DetailInvestor investorId={props.projectDetail.data.project.investor} />\r\n    </Layout>\r\n  );\r\n};\r\n\r\n// @ts-ignore\r\nProjectDetailPage.getInitialProps = async function(props: QueryProp) {\r\n  console.log(\"props Chu dau tu Pages\", props)\r\n  let projectSlug = props.query.slug;\r\n  let projectDetail = await apolloClient.query({query: GET_PROJECT_BY_SLUG, variables: {\r\n      \"slug\": projectSlug\r\n    }}).then(response => {\r\n    return response;\r\n  });\r\n  return {\r\n    projectDetail: projectDetail,\r\n    slug: projectSlug,\r\n  };\r\n};\r\n\r\nexport default ProjectDetailPage;\r\n"]},"metadata":{},"sourceType":"module"}