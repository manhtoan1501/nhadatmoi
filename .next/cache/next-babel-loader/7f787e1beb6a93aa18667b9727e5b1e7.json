{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useEffect } from 'react'; //Import Material Libs\n\nimport Grid from \"@material-ui/core/Grid\";\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Collapse from '@material-ui/core/Collapse';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport Typography from '@material-ui/core/Typography'; //Import Dynamic\n\nimport dynamic from 'next/dynamic'; //Import without SSR Slider\n\nconst Slider = dynamic(() => import('@material-ui/core/Slider'), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('@material-ui/core/Slider')],\n    modules: ['@material-ui/core/Slider']\n  }\n}); //Import Apollo Client\n\nimport { apolloClient } from \"../../utils\"; //Import Query GraphQL\n\nimport { GET_CITY_LIST } from \"../../graphql/city/queries\";\nimport { GET_DISTRICT_LIST } from \"../../graphql/district/queries\";\nimport { GET_WARD_LIST } from \"../../graphql/ward/queries\";\nimport { GET_DIRECTIONS } from \"../../graphql/directions/queries\";\nimport Validator from \"../../modules/validator\";\n\nfunction valueText(value) {\n  return `${value}`;\n}\n\nconst bedRoomNumber = [{\n  node: {\n    id: 1,\n    value: {\n      max: 2,\n      min: 0\n    },\n    name: '0 - 2 phòng'\n  }\n}, {\n  node: {\n    id: 2,\n    value: {\n      max: 5,\n      min: 3\n    },\n    name: '3 - 5 phòng'\n  }\n}, {\n  node: {\n    id: 3,\n    value: {\n      max: 100,\n      min: 6\n    },\n    name: 'trên 5 phòng'\n  }\n}];\n\nconst LayeredNavigation = props => {\n  const [openDirection, setOpenDirection] = React.useState(true);\n\n  const handleClickDirection = () => {\n    setOpenDirection(!openDirection);\n  };\n\n  const [openBedRoom, setOpenBedRoom] = React.useState(true);\n\n  const handleClickBedRoom = () => {\n    setOpenBedRoom(!openBedRoom);\n  };\n\n  let priceRangeValue = [0, 50]; //set Price\n\n  if (!Validator.isBlank(props.dataLayeredNavigation.price_range.max) || !Validator.isBlank(props.dataLayeredNavigation.price_range.min)) {\n    let minValue = Number(props.dataLayeredNavigation.price_range.min / 1000000000);\n    let maxValue = Number(props.dataLayeredNavigation.price_range.max / 1000000000);\n    priceRangeValue = [minValue, maxValue];\n  }\n\n  let areaRangeValue = [0, 500]; //set AreaRangeValue\n\n  if (!Validator.isBlank(props.dataLayeredNavigation.area_range.max) || !Validator.isBlank(props.dataLayeredNavigation.area_range.min)) {\n    areaRangeValue = [props.dataLayeredNavigation.area_range.min, props.dataLayeredNavigation.area_range.max];\n  }\n\n  ;\n  let idBedRoomNumber = -1;\n\n  if (Number(props.dataLayeredNavigation.bed_room_number.max) < 3 && Number(props.dataLayeredNavigation.bed_room_number.max) > 0) {\n    idBedRoomNumber = 1;\n  }\n\n  if (Number(props.dataLayeredNavigation.bed_room_number.max) < 6 && Number(props.dataLayeredNavigation.bed_room_number.max) > 2) {\n    idBedRoomNumber = 2;\n  }\n\n  if (5 < Number(props.dataLayeredNavigation.bed_room_number.max)) {\n    idBedRoomNumber = 3;\n  }\n\n  const [priceValue, setPriceValue] = React.useState(priceRangeValue);\n  const [areaValue, setAreaValue] = React.useState(areaRangeValue);\n  const [citesList, setCitesList] = React.useState();\n  const [districtList, setDistrictList] = React.useState();\n  const [wardList, setWardList] = React.useState();\n  const [directionList, setDirectionList] = React.useState();\n  const [activeBedRoom, setActiveBedRoom] = React.useState(idBedRoomNumber);\n  const [activeDirection, setActiveDirection] = React.useState(String(props.dataLayeredNavigation.home_direction));\n\n  const closeIcon = __jsx(\"svg\", {\n    viewBox: \"0 0 352 512\"\n  }, __jsx(\"path\", {\n    d: \"M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z\"\n  }));\n\n  useEffect(() => {\n    apolloClient.query({\n      query: GET_CITY_LIST,\n      variables: {\n        \"page\": 1,\n        \"limit\": 1000,\n        \"filter\": \"'{}'\"\n      }\n    }).then(response => {\n      if (typeof response.data.citys.edges !== \"undefined\") {\n        setCitesList(response.data.citys.edges);\n\n        for (let index in response.data.citys.edges) {\n          if (response.data.citys.edges[index].node.id === props.dataLayeredNavigation.city) {\n            setDefaultCity(response.data.citys.edges[index]);\n          }\n        }\n      }\n    });\n\n    if (!Validator.isBlank(props.dataLayeredNavigation.city)) {\n      updateDistrictLayeredNavigation(props.dataLayeredNavigation.city);\n    }\n\n    if (!Validator.isBlank(props.dataLayeredNavigation.district)) {\n      updateWardLayeredNavigation(props.dataLayeredNavigation.district);\n    }\n\n    apolloClient.query({\n      query: GET_DIRECTIONS,\n      variables: {\n        \"page\": 1,\n        \"limit\": 1000,\n        \"filter\": \"'{}'\"\n      }\n    }).then(response => {\n      if (typeof response.data.directions.edges !== \"undefined\") {\n        setDirectionList(response.data.directions.edges);\n      }\n    });\n  }, []);\n  const filterOptions = createFilterOptions({\n    matchFrom: 'any',\n    stringify: option => option.node.name\n  });\n  const cityDataSelect = {\n    options: citesList,\n    getOptionLabel: option => option.node.name,\n    filterOptions: filterOptions\n  };\n  const districtDataSelect = {\n    options: districtList,\n    getOptionLabel: option => option.node.name,\n    filterOptions: filterOptions\n  };\n  const wardDataSelect = {\n    options: wardList,\n    getOptionLabel: option => option.node.name,\n    filterOptions: filterOptions\n  };\n  const [dataLayeredNavigation, setDataLayeredNavigation] = React.useState(props.dataLayeredNavigation);\n\n  const onChangeCites = value => {\n    if (value) {\n      dataLayeredNavigation.city = value.node.id;\n      dataLayeredNavigation.slug = value.node.slug;\n      updateDistrictLayeredNavigation(value.node.id);\n    } else {\n      dataLayeredNavigation.city = '';\n      dataLayeredNavigation.slug = '';\n    }\n\n    dataLayeredNavigation.district = '';\n    dataLayeredNavigation.ward = '';\n    dataLayeredNavigation.page = 1;\n    setDistrictList([]);\n    setWardList([]);\n    setDataLayeredNavigation(dataLayeredNavigation); //Set Default Value\n\n    setDefaultDistrict(defaultValueLocation);\n    setDefaultWard(defaultValueLocation);\n    props.updateLayeredNavigation(dataLayeredNavigation);\n  };\n\n  const handlePriceChange = (event, newValue) => {\n    setPriceValue(newValue);\n\n    if (Array.isArray(newValue) && newValue.length != null && newValue.length > 0) {\n      let minValue = 0;\n      let maxValue = 0;\n      newValue.map((value, index) => {\n        if (index === 0) {\n          minValue = value;\n        }\n\n        if (index === 1) {\n          maxValue = value;\n        }\n\n        let dataToFilter = {\n          min: minValue * 1000000000,\n          max: maxValue * 1000000000\n        };\n        dataLayeredNavigation.price_range = dataToFilter;\n        setDataLayeredNavigation(dataLayeredNavigation);\n        delayUpdateLayeredNavigation(dataLayeredNavigation);\n      });\n    }\n  };\n\n  const handleAreaChange = (event, newValue) => {\n    setAreaValue(newValue);\n\n    if (Array.isArray(newValue) && newValue.length != null && newValue.length > 0) {\n      let minValue = 0;\n      let maxValue = 0;\n      newValue.map((value, index) => {\n        if (index === 0) {\n          minValue = value;\n        }\n\n        if (index === 1) {\n          maxValue = value;\n        }\n\n        let dataToFilter = {\n          min: minValue,\n          max: maxValue\n        };\n        dataLayeredNavigation.area_range = dataToFilter;\n        setDataLayeredNavigation(dataLayeredNavigation);\n        delayUpdateLayeredNavigation(dataLayeredNavigation);\n      });\n    }\n  };\n\n  let timerId = setTimeout(() => {}, 600); // @ts-ignore\n\n  const delayUpdateLayeredNavigation = dataLayeredNavigation => {\n    clearTimeout(timerId);\n    timerId = setTimeout(() => {\n      props.updateLayeredNavigation(dataLayeredNavigation);\n    }, 600);\n  };\n\n  const onChangeDistricts = value => {\n    if (value) {\n      dataLayeredNavigation.district = value.node.id;\n      dataLayeredNavigation.slug = value.node.slug;\n      updateWardLayeredNavigation(value.node.id);\n    } else {\n      let citySlug = defaultCity.node.slug;\n      dataLayeredNavigation.district = '';\n      dataLayeredNavigation.slug = citySlug;\n    }\n\n    dataLayeredNavigation.page = 1;\n    dataLayeredNavigation.ward = '';\n    setWardList([]);\n    setDefaultWard(defaultValueLocation);\n    props.updateLayeredNavigation(dataLayeredNavigation);\n  };\n\n  const onChangeWards = value => {\n    if (value) {\n      dataLayeredNavigation.ward = value.node.id;\n      dataLayeredNavigation.slug = value.node.slug;\n    } else {\n      let districtSlug = defaultDistrict.node.slug;\n      dataLayeredNavigation.district = '';\n      dataLayeredNavigation.ward = '';\n      dataLayeredNavigation.slug = districtSlug;\n    }\n\n    dataLayeredNavigation.page = 1;\n    setDataLayeredNavigation(dataLayeredNavigation);\n    props.updateLayeredNavigation(dataLayeredNavigation);\n  };\n\n  const onClickDirection = value => {\n    if (value !== activeDirection) {\n      dataLayeredNavigation.home_direction = value;\n      setActiveDirection(value);\n    } else {\n      dataLayeredNavigation.home_direction = '';\n      setActiveDirection('');\n    }\n\n    setDataLayeredNavigation(dataLayeredNavigation);\n    props.updateLayeredNavigation(dataLayeredNavigation);\n  };\n\n  const onClickBedRoom = (value, id) => {\n    if (id !== activeBedRoom) {\n      dataLayeredNavigation.bed_room_number = value;\n      setActiveBedRoom(id);\n    } else {\n      dataLayeredNavigation.bed_room_number = {\n        max: 0,\n        min: 0\n      };\n      setActiveBedRoom(-1);\n    }\n\n    setDataLayeredNavigation(dataLayeredNavigation);\n    props.updateLayeredNavigation(dataLayeredNavigation);\n  };\n\n  const updateDistrictLayeredNavigation = cityId => {\n    apolloClient.query({\n      query: GET_DISTRICT_LIST,\n      variables: {\n        \"page\": 1,\n        \"limit\": 100,\n        \"filter\": \"{'city_id': '\" + cityId + \"'}\"\n      }\n    }).then(response => {\n      if (typeof response.data.districts.edges !== \"undefined\") {\n        setDistrictList(response.data.districts.edges);\n\n        for (let index in response.data.districts.edges) {\n          if (response.data.districts.edges[index].node.id === props.dataLayeredNavigation.district) {\n            setDefaultDistrict(response.data.districts.edges[index]);\n          }\n        }\n      }\n    });\n  };\n\n  const updateWardLayeredNavigation = districtId => {\n    apolloClient.query({\n      query: GET_WARD_LIST,\n      variables: {\n        \"page\": 1,\n        \"limit\": 100,\n        \"filter\": \"{'district_id': '\" + districtId + \"'}\"\n      }\n    }).then(response => {\n      if (typeof response.data.wards.edges !== \"undefined\") {\n        setWardList(response.data.wards.edges);\n\n        for (let index in response.data.wards.edges) {\n          if (response.data.wards.edges[index].node.id === props.dataLayeredNavigation.ward) {\n            setDefaultWard(response.data.wards.edges[index]);\n          }\n        }\n      }\n    });\n  };\n\n  const handleFieldChange = (event, title, value) => {\n    dataLayeredNavigation.name = value;\n    dataLayeredNavigation.title = value;\n    setDataLayeredNavigation(dataLayeredNavigation);\n    delayUpdateLayeredNavigation(dataLayeredNavigation);\n  };\n\n  let defaultKeywordValue = '';\n\n  if (!Validator.isBlank(props.dataLayeredNavigation.name)) {\n    defaultKeywordValue = String(props.dataLayeredNavigation.name);\n  }\n\n  if (!Validator.isBlank(props.dataLayeredNavigation.title)) {\n    defaultKeywordValue = String(props.dataLayeredNavigation.title);\n  }\n\n  let defaultValueLocation = {\n    node: {\n      id: '',\n      name: '',\n      slug: ''\n    }\n  };\n  const [defaultCity, setDefaultCity] = React.useState(defaultValueLocation);\n  const [defaultDistrict, setDefaultDistrict] = React.useState(defaultValueLocation);\n  const [defaultWard, setDefaultWard] = React.useState(defaultValueLocation); // @ts-ignore\n\n  return __jsx(Grid, {\n    className: props.className\n  }, __jsx(Grid, {\n    container: true,\n    className: \"search_layered__title\"\n  }, \"L\\u1ECDc k\\u1EBFt qu\\u1EA3 t\\xECm ki\\u1EBFm\"), __jsx(TextField, {\n    id: \"standard-basic\",\n    label: \"T\\u1EEB kh\\xF3a\",\n    className: \"search_layered__keyword\",\n    defaultValue: defaultKeywordValue,\n    onChange: event => handleFieldChange(event, 'title', event.target.value)\n  }), __jsx(FormControl, {\n    className: \"search_layered__select\"\n  }, // @ts-ignore\n  !Validator.isBlank(citesList) && !Validator.isBlank(citesList.length) && citesList.length > 0 && !Validator.isBlank(defaultCity.node.id) && __jsx(Autocomplete, _extends({}, cityDataSelect, {\n    onChange: (event, value) => onChangeCites(value),\n    clearOnEscape: true,\n    defaultValue: defaultCity,\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      label: \"T\\u1EC9nh/Th\\xE0nh ph\\u1ED1\",\n      fullWidth: true\n    }))\n  })), // @ts-ignore\n  !Validator.isBlank(citesList) && !Validator.isBlank(citesList.length) && citesList.length > 0 && Validator.isBlank(defaultCity.node.id) && __jsx(Autocomplete, _extends({}, cityDataSelect, {\n    onChange: (event, value) => onChangeCites(value),\n    clearOnEscape: true,\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      label: \"T\\u1EC9nh/Th\\xE0nh ph\\u1ED1\",\n      fullWidth: true\n    }))\n  }))), // @ts-ignore\n  districtList != null && districtList.length != null && districtList.length > 0 && !Validator.isBlank(defaultDistrict.node.id) && __jsx(FormControl, {\n    className: \"search_layered__select\"\n  }, __jsx(Autocomplete, _extends({}, districtDataSelect, {\n    clearOnEscape: true,\n    defaultValue: defaultDistrict,\n    onChange: (event, value) => onChangeDistricts(value),\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      label: \"Qu\\u1EADn/Huy\\u1EC7n\",\n      fullWidth: true\n    }))\n  }))), // @ts-ignore\n  districtList != null && districtList.length != null && districtList.length > 0 && Validator.isBlank(defaultDistrict.node.id) && __jsx(FormControl, {\n    className: \"search_layered__select\"\n  }, __jsx(Autocomplete, _extends({}, districtDataSelect, {\n    clearOnEscape: true,\n    onChange: (event, value) => onChangeDistricts(value),\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      label: \"Qu\\u1EADn/Huy\\u1EC7n\",\n      fullWidth: true\n    }))\n  }))), wardList != null && wardList.length != null && wardList.length > 0 && !Validator.isBlank(defaultWard.node.id) && __jsx(FormControl, {\n    className: \"search_layered__select margin_bottom\"\n  }, __jsx(Autocomplete, _extends({}, wardDataSelect, {\n    clearOnEscape: true,\n    defaultValue: defaultWard,\n    onChange: (event, value) => onChangeWards(value),\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      label: \"Ph\\u01B0\\u1EDDng/X\\xE3\",\n      fullWidth: true\n    }))\n  }))), wardList != null && wardList.length != null && wardList.length > 0 && Validator.isBlank(defaultWard.node.id) && __jsx(FormControl, {\n    className: \"search_layered__select margin_bottom\"\n  }, __jsx(Autocomplete, _extends({}, wardDataSelect, {\n    clearOnEscape: true,\n    defaultValue: defaultWard,\n    onChange: (event, value) => onChangeWards(value),\n    renderInput: params => __jsx(TextField, _extends({}, params, {\n      label: \"Ph\\u01B0\\u1EDDng/X\\xE3\",\n      fullWidth: true\n    }))\n  }))), __jsx(Typography, {\n    id: \"range-slider\",\n    gutterBottom: true,\n    className: \"search_layered__slider__text\"\n  }, \"Di\\u1EC7n t\\xEDch (m\", __jsx(\"sup\", null, \"2\"), \")\"), __jsx(Slider, {\n    className: \"search_layered__slider__content\",\n    value: areaValue,\n    onChange: handleAreaChange,\n    valueLabelDisplay: \"auto\",\n    \"aria-labelledby\": \"range-slider\",\n    max: 500,\n    getAriaValueText: valueText\n  }), __jsx(Typography, {\n    id: \"range-slider\",\n    gutterBottom: true,\n    className: \"search_layered__slider__text\"\n  }, \"Kho\\u1EA3ng gi\\xE1 (t\\u1EC9 \\u0111\\u1ED3ng)\"), __jsx(Slider, {\n    className: \"search_layered__slider__content\",\n    value: priceValue,\n    onChange: handlePriceChange,\n    valueLabelDisplay: \"auto\",\n    \"aria-labelledby\": \"range-slider\",\n    getAriaValueText: valueText,\n    max: 50,\n    step: 0.5\n  }), __jsx(List, {\n    component: \"nav\",\n    \"aria-labelledby\": \"nested-list-subheader\",\n    className: \"search_layered__dropdown\"\n  }, directionList != null && directionList.length != null && directionList.length > 0 && __jsx(\"div\", null, __jsx(ListItem, {\n    button: true,\n    onClick: handleClickDirection\n  }, __jsx(ListItemText, {\n    primary: \"H\\u01B0\\u1EDBng nh\\xE0\",\n    className: \"search_layered__expand\"\n  }), openDirection ? __jsx(ExpandLess, null) : __jsx(ExpandMore, null)), __jsx(Collapse, {\n    in: openDirection,\n    timeout: \"auto\",\n    unmountOnExit: true,\n    className: \"search_layered__expand__list\"\n  }, directionList.map((direction, index) => {\n    return __jsx(ListItemText, {\n      key: \"layered_second_\" + index,\n      primary: \"Hướng \" + direction.node.name,\n      secondary: closeIcon,\n      className: activeDirection === direction.node.id ? 'search_layered__expand__list__item active' : 'search_layered__expand__list__item',\n      onClick: event => onClickDirection(direction.node.id)\n    });\n  }))), __jsx(ListItem, {\n    button: true,\n    onClick: handleClickBedRoom\n  }, __jsx(ListItemText, {\n    primary: \"S\\u1ED1 ph\\xF2ng\",\n    className: \"search_layered__expand\"\n  }), openBedRoom ? __jsx(ExpandLess, null) : __jsx(ExpandMore, null)), __jsx(Collapse, {\n    in: openBedRoom,\n    timeout: \"auto\",\n    unmountOnExit: true,\n    className: \"search_layered__expand__list\"\n  }, bedRoomNumber.map((bedRoom, index) => {\n    return __jsx(ListItemText, {\n      key: \"layered_navigation_\" + index,\n      primary: bedRoom.node.name,\n      secondary: closeIcon,\n      className: activeBedRoom === bedRoom.node.id ? 'search_layered__expand__list__item active' : 'search_layered__expand__list__item',\n      onClick: event => onClickBedRoom(bedRoom.node.value, bedRoom.node.id)\n    });\n  }))));\n};\n\nexport default LayeredNavigation;","map":null,"metadata":{},"sourceType":"module"}