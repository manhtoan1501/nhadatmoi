{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Array$isArray from \"@babel/runtime-corejs2/core-js/array/is-array\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"C:\\\\Users\\\\manh nhan\\\\Desktop\\\\new_ndm\\\\components\\\\Chat\\\\Index.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport Popper from '@material-ui/core/Popper';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { Element, scroller } from 'react-scroll';\nimport _ from 'lodash';\nimport { Grid, InputBase, Fade, Typography, Paper, CardHeader, Avatar, TextField, Divider, Input, IconButton, Hidden } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport TagFacesIcon from '@material-ui/icons/TagFaces';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport CloseIcon from '@material-ui/icons/Close';\nimport SendIcon from '@material-ui/icons/Send';\nimport { dataEmoji, giphyDefault, useStyles, themeTextFieldAdmin, themeTextFieldUser, StyledBadge, themeInput, themeInputBase, useStylesBootstrap } from \"./constant\";\nimport { create } from 'jss';\nimport rtl from 'jss-rtl';\nimport axios from \"axios\";\nimport { apiBaseURL } from \"../../constants\";\nimport \"cross-fetch/polyfill\";\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { apolloClient } from \"../../utils\";\nimport { CREATE_MESSAGE } from \"../../graphql/chat/mutation\";\nimport { GET_LIST_MESSAGE, GET_MESSAGE_BY_ID } from \"../../graphql/chat/queries\";\nconst client = axios.create({\n  baseURL: apiBaseURL,\n  timeout: 30000\n});\nimport moment from \"moment\";\nimport 'moment/locale/es';\nmoment.locale('vi'); // @ts-ignore\n\nimport { jssPreset } from '@material-ui/core/styles';\nconst jss = create({\n  plugins: [...jssPreset().plugins, rtl()]\n});\n\nfunction BootstrapTooltip(props) {\n  const classes = useStylesBootstrap();\n  return __jsx(Tooltip, _extends({\n    arrow: true,\n    classes: classes\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }));\n}\n\n;\n;\n[];\n\nconst Chat = props => {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [open, setOpen] = React.useState(false);\n  const [placement, setPlacement] = React.useState();\n  const [internet, setInternet] = React.useState(true);\n  const [texting, setTexting] = React.useState(false);\n  const [giphyData, setGiphyData] = React.useState();\n  const [openEmojiGiphy, setOpenEmojiGiphy] = React.useState(false);\n  const [valueSearchGiphy, setValueSearchGiphy] = React.useState(\"\");\n  const [avatarImage, setAvatarImage] = React.useState(\"https://image.crisp.chat/avatar/operator/da8d4459-5ea3-4119-bca1-9170f49ee69c/240/?1585999578742&quot\");\n  let [valueInput, setValueInput] = React.useState(\"\");\n  const [viewEmoji, setViewEmoji] = React.useState(false);\n  const [reload, setReload] = React.useState(true);\n  const [checkLogin, setCheckLogin] = React.useState(true);\n  const [userId, setUserId] = React.useState(\"\");\n  const [conversations, setConversations] = React.useState();\n  const [conversation, setConversation] = React.useState();\n  const [chat, setChat] = React.useState([]);\n  const [name, setName] = React.useState(\"\");\n  const [last_activity, setLastActivity] = React.useState(\"\");\n  const [statusOnline, setStatusOnline] = React.useState(\"\");\n  const [_conversationId, setConversationId] = React.useState(\"\");\n\n  const onCloseChat = () => {\n    setOpen(false);\n  };\n\n  const checkUserLogin = () => {\n    if (props.userLogin) {\n      setCheckLogin(true);\n    } else {\n      setCheckLogin(false);\n    }\n  };\n\n  const senMessageChat = async (value, url) => {\n    chat.push({\n      id: _conversationId,\n      send_user_id: props.userLogin,\n      message: {\n        text: value,\n        attachment: {\n          type: \"\",\n          payload: {\n            url: url\n          }\n        }\n      },\n      status_check: 0,\n      send_at: String(new Date().getTime()),\n      read_at: String(new Date().getTime())\n    });\n    setChat(chat);\n    apolloClient.mutate({\n      mutation: CREATE_MESSAGE,\n      variables: {\n        \"input\": {\n          \"target\": userId,\n          \"message\": {\n            \"text\": `${value}`,\n            \"attachment\": {\n              \"type\": \"\",\n              \"payload\": {\n                \"url\": `${url}`\n              }\n            }\n          }\n        }\n      }\n    }).then(response => {});\n    setReload(!reload);\n    setValueInput(\"\");\n    setScrollTo();\n  };\n\n  const renderHeader = () => {\n    return __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, __jsx(CardHeader, {\n      className: classes.header,\n      avatar: __jsx(StyledBadge, {\n        overlap: \"circle\",\n        anchorOrigin: {\n          vertical: 'bottom',\n          horizontal: 'right'\n        },\n        variant: \"standard\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, __jsx(Avatar, {\n        src: avatarImage,\n        className: classes.sizeAvatarSmall,\n        alt: \"nhadatmoi.net\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      })),\n      title: name,\n      subheader: __jsx(Typography, {\n        variant: \"caption\",\n        align: \"center\",\n        className: classes.timeWork,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, \"Ho\\u1EA1t \\u0111\\u1ED9ng: \", moment(Number(last_activity)).format('DD/MM/YYYY')),\n      action: __jsx(IconButton, {\n        color: \"inherit\",\n        \"aria-label\": \"settings\",\n        onClick: () => onCloseChat(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, __jsx(CloseIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }));\n  };\n\n  const searchGiphy = async event => {\n    setValueSearchGiphy(event.target.value);\n    let url = `https://api.giphy.com/v1/gifs/search?api_key=UgTMyvovmg74m8fPN6qYiB623nwS1IPc&q=${event.target.value}&limit=20&offset=0&rating=G&lang=vi`;\n    let getData = await axios.get(url, {}).then(function (response) {\n      setGiphyData(response.data.data);\n    });\n  };\n\n  let dataSearch = [];\n\n  if (_Array$isArray(giphyData)) {\n    giphyData.map((item, index) => {\n      dataSearch.push({\n        image: {\n          url: item.images.fixed_width.url,\n          height: item.images.fixed_width.height,\n          width: item.images.fixed_width.width\n        }\n      });\n    });\n  }\n\n  ; // Gửi ảnh emoji giphy \n\n  const setItemGiphy = (index, name) => {\n    setOpenEmojiGiphy(!openEmojiGiphy);\n\n    if (name == \"giphyDefault\") {\n      senMessageChat(\"\", giphyDefault[index].image.url);\n    } else if (name == \"dataSearch\") {\n      senMessageChat(\"\", dataSearch[index].image.url);\n    }\n  };\n\n  const onClickEmoji = index => {\n    valueInput = valueInput + dataEmoji[index].native;\n    setValueInput(valueInput);\n  };\n\n  const renderEmoji = () => {\n    return __jsx(\"div\", {\n      className: classes.overflowHeightEmoji,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, dataEmoji.map((item, index) => {\n      return __jsx(\"div\", {\n        onClick: () => onClickEmoji(index),\n        key: index,\n        className: classes.itemEmoji,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, item.native);\n    }));\n  };\n\n  const renderGiphy = () => {\n    return __jsx(\"div\", {\n      className: classes.viewWidthGiphy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: classes.searchGiphy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, __jsx(SearchIcon, {\n      className: classes.sizeSearchIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }), __jsx(ThemeProvider, {\n      theme: themeInputBase,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, __jsx(InputBase, {\n      onChange: e => searchGiphy(e),\n      className: classes.inputBaseGiphy,\n      placeholder: \"T\\xECm ki\\u1EBFm ...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }))), __jsx(\"div\", {\n      className: classes.viewSizeGiphy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, valueSearchGiphy ? dataSearch.map((item, index) => {\n      return __jsx(\"div\", {\n        className: classes.itemGiphy,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }, __jsx(\"img\", {\n        className: classes.imgListGiphy,\n        alt: \"giphy\",\n        src: item.image.url,\n        onClick: () => setItemGiphy(index, \"dataSearch\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }));\n    }) : giphyDefault.map((item, index) => {\n      // view giphy default\n      return __jsx(\"div\", {\n        className: classes.itemGiphy,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }, __jsx(\"img\", {\n        className: classes.imgListGiphy,\n        alt: \"giphy\",\n        src: item.image.url,\n        onClick: () => setItemGiphy(index, \"giphyDefault\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      }));\n    })));\n  };\n\n  const renderEmojiGiphy = () => {\n    return __jsx(\"div\", {\n      className: classes.emojiGiphy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: classes.marinButtonEmojiGiphy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, __jsx(\"button\", {\n      className: classes.buttonEmojiGiphy,\n      onClick: () => setViewEmoji(true),\n      style: {\n        backgroundColor: !viewEmoji ? \"#aaa\" : \"\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, \" Bi\\u1EC3u t\\u01B0\\u1EE3ng\"), __jsx(\"button\", {\n      className: classes.buttonEmojiGiphy,\n      onClick: () => setViewEmoji(false),\n      style: {\n        backgroundColor: viewEmoji ? \"#aaa\" : \"\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, \" \\u1EA2nh \\u0111\\u1ED9ng\")), viewEmoji ? renderEmoji() : renderGiphy());\n  };\n\n  const getConversations = async () => {\n    let response = await apolloClient.query({\n      query: GET_LIST_MESSAGE,\n      variables: {\n        \"page\": 1,\n        \"limit\": 5\n      }\n    }).then(response => {\n      let conversations = _.get(response, \"data.conversations\", {});\n\n      if (conversations) {\n        setConversations(conversations);\n      }\n    });\n  };\n\n  React.useEffect(() => {\n    checkUserLogin();\n    getConversations();\n  }, []);\n\n  const renderImage = (send_at, url, role) => {\n    return __jsx(\"div\", {\n      className: role === 'take' ? classes.viewContentImageTake : classes.viewContentImageSend,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }, __jsx(BootstrapTooltip, {\n      title: moment(Number(send_at)).fromNow(),\n      placement: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, __jsx(\"img\", {\n      src: url,\n      className: classes.imgGiphy,\n      alt: \"giphy\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    })));\n  };\n\n  const renderTextField = (send_at, text, role) => {\n    return __jsx(BootstrapTooltip, {\n      title: moment(Number(send_at)).fromNow(),\n      placement: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, __jsx(TextField, {\n      fullWidth: text.length > 20 ? true : false,\n      label: \"\",\n      color: \"primary\",\n      className: role == \"take\" ? classes.textAdmin : classes.textUser,\n      value: text.trim(),\n      margin: \"dense\",\n      id: \"outlined-basic\",\n      multiline: true,\n      InputProps: {\n        readOnly: true\n      },\n      variant: \"outlined\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }));\n  };\n\n  const renderText = (send_at, text, role) => {\n    if (role === 'take') {\n      return renderTextField(send_at, text, role);\n    }\n\n    return __jsx(\"div\", {\n      className: classes.textFieldUserChatContent,\n      dir: `${text.length < 45 ? 'rtl' : \"\"}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, renderTextField(send_at, text, role));\n  };\n\n  const renderConversation = () => {\n    let created_at = _.get(conversation, \"created_at\", \"\");\n\n    return __jsx(\"div\", {\n      className: classes.overflowHeightEmojiGiphy,\n      style: {\n        height: openEmojiGiphy ? '230px' : '430px'\n      },\n      id: 'ContainerElementID',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, __jsx(Element, {\n      name: \"myScrollToElement\",\n      id: \"test_ndm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }, __jsx(Typography, {\n      align: \"center\",\n      className: classes.textSizeNewDate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }, \" \", moment(Number(created_at)).format('LLL'), \" \"), __jsx(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }), _Array$isArray(chat) ? chat.map((element, count) => {\n      let checkNewDate = false;\n      let setViewAvatar = true;\n      let oldDate = count > 0 ? moment(Number(chat[count - 1].send_at)).format('YYYY-MM-DD') : '';\n      let newDate = moment(Number(chat[count].send_at)).format('YYYY-MM-DD');\n\n      if (count > 0 && oldDate !== newDate) {\n        checkNewDate = true;\n      }\n\n      let url = _.get(element, \"message.attachment.payload.url\", \"\");\n\n      let text = _.get(element, \"message.text\", \"\");\n\n      let send_user_id = _.get(element, \"send_user_id\", \"\");\n\n      let send_at = _.get(element, \"send_at\", \"\");\n\n      return __jsx(\"div\", {\n        key: count,\n        style: {\n          display: \"block\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 420\n        },\n        __self: this\n      }, checkNewDate && __jsx(Typography, {\n        align: \"center\",\n        className: classes.textSizeNewDate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421\n        },\n        __self: this\n      }, moment(Number(send_at)).format(\"LLL\"), \" \", __jsx(Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 422\n        },\n        __self: this\n      })), send_user_id !== props.userLogin ? __jsx(ThemeProvider, {\n        theme: themeTextFieldAdmin,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 424\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: classes.viewAvatarChatContent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 425\n        },\n        __self: this\n      }, setViewAvatar && __jsx(Avatar, {\n        className: classes.avatarAdminText,\n        alt: \"nhadatmoi.net\",\n        src: avatarImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 426\n        },\n        __self: this\n      })), __jsx(\"div\", {\n        className: classes.textFieldChatContent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 428\n        },\n        __self: this\n      }, url ? renderImage(send_at, url, \"take\") : renderText(send_at, text, \"take\"))) : __jsx(ThemeProvider, {\n        theme: themeTextFieldUser,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 432\n        },\n        __self: this\n      }, url ? renderImage(send_at, url, \"send\") : renderText(send_at, text, \"send\")), __jsx(\"div\", {\n        style: {\n          clear: \"both\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 436\n        },\n        __self: this\n      }));\n    }) : \"\", __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }, !internet && __jsx(\"p\", {\n      className: classes.errInternet,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }, __jsx(\"u\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442\n      },\n      __self: this\n    }, \"Kh\\xF4ng th\\u1EC3 g\\u1EEDi tin nh\\u1EAFn n\\xE0y. Ki\\u1EC3m tra k\\u1EBFt n\\u1ED1i internet v\\xE0 th\\u1EED l\\u1EA1i\"))), __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }, \" \", texting && __jsx(\"p\", {\n      className: classes.texting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }, \"\\u0110ang nh\\u1EADp ...\"))));\n  };\n\n  const onClickOpenEmojiGiphy = () => {\n    setOpenEmojiGiphy(!openEmojiGiphy);\n    setViewEmoji(true);\n  };\n\n  const apiBaseURL = \"https://graph.nhadatmoi.net\";\n  const apiUpload = `${apiBaseURL}/private_upload_image_app`;\n\n  const api = (method, url, data) => client.request({\n    data: _JSON$stringify(data),\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    method,\n    url,\n    withCredentials: true\n  }).then(response => response.data);\n\n  const upLoadImage = files => {\n    const reader = new FileReader();\n    let file = files.target.files[0];\n    reader.readAsDataURL(file);\n\n    reader.onload = () => {\n      api(\"POST\", `${apiUpload}`, {\n        base64_image: reader.result,\n        fileName: new Date().getTime() + \"\" + file.name,\n        typeUpload: \"ad_sell_lease\"\n      }).then(function (res) {\n        senMessageChat(\"\", res.location);\n      }).catch(function (err) {\n        alert('HTTP Error: ' + err.message);\n      });\n    };\n  };\n\n  const setOnKeyDown = event => {\n    if (event.keyCode == 13) {\n      senMessageChat(valueInput, \"\");\n      setValueInput(\"\");\n      setScrollTo();\n    }\n  };\n\n  const setScrollTo = () => {\n    let heightChatDiv = 0;\n    let elm = document.getElementById(\"test_ndm\");\n\n    if (elm) {\n      heightChatDiv = elm.offsetHeight;\n    }\n\n    scroller.scrollTo('myScrollToElement', {\n      duration: 500,\n      delay: 100,\n      smooth: true,\n      containerId: 'ContainerElementID',\n      offset: heightChatDiv\n    });\n  };\n\n  const setChangeInput = value => {\n    setValueInput(value);\n  };\n\n  const renderInput = () => {\n    return __jsx(Paper, {\n      component: \"form\",\n      className: classes.inputBase,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517\n      },\n      __self: this\n    }, __jsx(ThemeProvider, {\n      theme: themeInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }, __jsx(Input, {\n      fullWidth: true,\n      disabled: !internet,\n      className: classes.inputText,\n      margin: \"dense\",\n      id: \"outlined-basic\",\n      autoFocus: true,\n      value: valueInput,\n      multiline: true,\n      onChange: e => setChangeInput(e.target.value),\n      onKeyDown: e => setOnKeyDown(e),\n      placeholder: \"Nh\\u1EADp tin nh\\u1EAFn ...\",\n      autoComplete: \"false\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }), openEmojiGiphy ? __jsx(BootstrapTooltip, {\n      title: \"Ch\\xE8n bi\\u1EC3u t\\u01B0\\u1EE3ng\",\n      placement: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534\n      },\n      __self: this\n    }, __jsx(ExpandMoreIcon, {\n      className: classes.sizeIcon,\n      onClick: onClickOpenEmojiGiphy,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535\n      },\n      __self: this\n    })) : __jsx(BootstrapTooltip, {\n      title: \"Ch\\xE8n bi\\u1EC3u t\\u01B0\\u1EE3ng\",\n      placement: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537\n      },\n      __self: this\n    }, __jsx(TagFacesIcon, {\n      className: classes.sizeIcon,\n      onClick: onClickOpenEmojiGiphy,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538\n      },\n      __self: this\n    })), valueInput ? __jsx(BootstrapTooltip, {\n      title: \"G\\u1EEDi tin nh\\u1EAFn\",\n      placement: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542\n      },\n      __self: this\n    }, __jsx(SendIcon, {\n      onClick: () => senMessageChat(valueInput, \"\"),\n      className: classes.sizeIcon,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543\n      },\n      __self: this\n    })) : __jsx(BootstrapTooltip, {\n      title: \"Th\\xEAm t\\u1EADp tin\",\n      placement: \"top\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: classes.inputWrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }, __jsx(AddCircleOutlineIcon, {\n      className: classes.sizeIcon,\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }), __jsx(\"input\", {\n      type: \"file\",\n      className: classes.fileInput,\n      onChange: upLoadImage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548\n      },\n      __self: this\n    })))));\n  };\n\n  const viewChat = () => {\n    let _open = open && checkLogin ? true : false;\n\n    return __jsx(Popper, {\n      open: _open,\n      anchorEl: anchorEl,\n      placement: placement,\n      transition: true,\n      className: classes.viewChatImpostant,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }, ({\n      TransitionProps\n    }) => __jsx(Fade, _extends({}, TransitionProps, {\n      timeout: 300,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562\n      },\n      __self: this\n    }), __jsx(Paper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: classes.viewChat,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 564\n      },\n      __self: this\n    }, renderHeader(), renderConversation(), openEmojiGiphy && renderEmojiGiphy(), renderInput()))));\n  };\n\n  const handleClick = newPlacement => {\n    setOpen(true);\n    setPlacement(newPlacement);\n  };\n\n  const getConversation = async conversationId => {\n    let conversation = await apolloClient.query({\n      query: GET_MESSAGE_BY_ID,\n      variables: {\n        \"id\": conversationId\n      }\n    }).then(response => {\n      let conversation = _.get(response, \"data.conversation\", {});\n\n      return conversation;\n    });\n\n    let chat = _.get(conversation, \"chat\", []);\n\n    let avatar = _.get(conversation, \"target.avatar\", \"\");\n\n    let userId = _.get(conversation, \"target.id\", \"\");\n\n    let name = _.get(conversation, \"target.first_name\", \"\") + _.get(conversation, \"target.last_name\", \"\");\n\n    let last_activity = _.get(conversation, \"target.last_activity\", \"\");\n\n    let status = _.get(conversation, \"target.status\", \"\");\n\n    setChat(chat);\n    setAvatarImage(avatar);\n    setConversationId(conversationId);\n    setUserId(userId);\n    setName(name);\n    setLastActivity(last_activity);\n    setStatusOnline(status);\n    setConversation(conversation);\n  };\n\n  const renderListAvatar = (item, index) => {\n    let avatar = _.get(item, \"node.target.avatar\", \"\");\n\n    let name = _.get(item, \"node.target.first_name\", \"\") + _.get(item, \"node.target.last_name\", \"\");\n\n    let id = _.get(item, \"node.target.id\", \"\");\n\n    let status = _.get(item, \"node.target.status\", \"\");\n\n    let conversationId = _.get(item, \"node.id\", \"\");\n\n    return __jsx(\"div\", {\n      key: index,\n      style: {\n        bottom: `${index * 65 + 80}px`\n      },\n      className: id === userId ? classes.renderAvatarBorderRadius : classes.renderAvatar,\n      onClick: () => getConversation(conversationId),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614\n      },\n      __self: this\n    }, __jsx(BootstrapTooltip, {\n      title: name,\n      placement: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 620\n      },\n      __self: this\n    }, __jsx(StyledBadge, {\n      overlap: \"circle\",\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'right'\n      },\n      variant: status == \"offline\" ? \"standard\" : \"dot\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 621\n      },\n      __self: this\n    }, __jsx(Avatar, {\n      src: avatar,\n      onClick: () => handleClick(\"top-start\"),\n      className: classes.large,\n      alt: \"name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626\n      },\n      __self: this\n    }))));\n  };\n\n  const listAvatar = _.get(conversations, 'edges', []) || [];\n  return __jsx(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 640\n    },\n    __self: this\n  }, viewChat(), __jsx(Grid, {\n    container: true,\n    justify: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 642\n    },\n    __self: this\n  }, __jsx(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 643\n    },\n    __self: this\n  }, __jsx(Hidden, {\n    xsDown: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 644\n    },\n    __self: this\n  }, __jsx(React.Fragment, null, _Array$isArray(listAvatar) && listAvatar.map((item, index) => {\n    return renderListAvatar(item, index);\n  }))), __jsx(Hidden, {\n    smUp: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 651\n    },\n    __self: this\n  }, __jsx(React.Fragment, null, _Array$isArray(listAvatar) && listAvatar.map((item, index) => {\n    return renderListAvatar(item, index);\n  }))))));\n};\n\nexport default Chat;","map":{"version":3,"sources":["C:/Users/manh nhan/Desktop/new_ndm/components/Chat/Index.tsx"],"names":["React","Popper","ThemeProvider","Element","scroller","_","Grid","InputBase","Fade","Typography","Paper","CardHeader","Avatar","TextField","Divider","Input","IconButton","Hidden","SearchIcon","AddCircleOutlineIcon","TagFacesIcon","ExpandMoreIcon","CloseIcon","SendIcon","dataEmoji","giphyDefault","useStyles","themeTextFieldAdmin","themeTextFieldUser","StyledBadge","themeInput","themeInputBase","useStylesBootstrap","create","rtl","axios","apiBaseURL","Tooltip","apolloClient","CREATE_MESSAGE","GET_LIST_MESSAGE","GET_MESSAGE_BY_ID","client","baseURL","timeout","moment","locale","jssPreset","jss","plugins","BootstrapTooltip","props","classes","Chat","anchorEl","setAnchorEl","useState","open","setOpen","placement","setPlacement","internet","setInternet","texting","setTexting","giphyData","setGiphyData","openEmojiGiphy","setOpenEmojiGiphy","valueSearchGiphy","setValueSearchGiphy","avatarImage","setAvatarImage","valueInput","setValueInput","viewEmoji","setViewEmoji","reload","setReload","checkLogin","setCheckLogin","userId","setUserId","conversations","setConversations","conversation","setConversation","chat","setChat","name","setName","last_activity","setLastActivity","statusOnline","setStatusOnline","_conversationId","setConversationId","onCloseChat","checkUserLogin","userLogin","senMessageChat","value","url","push","id","send_user_id","message","text","attachment","type","payload","status_check","send_at","String","Date","getTime","read_at","mutate","mutation","variables","then","response","setScrollTo","renderHeader","header","vertical","horizontal","sizeAvatarSmall","timeWork","Number","format","searchGiphy","event","target","getData","get","data","dataSearch","map","item","index","image","images","fixed_width","height","width","setItemGiphy","onClickEmoji","native","renderEmoji","overflowHeightEmoji","itemEmoji","renderGiphy","viewWidthGiphy","sizeSearchIcon","e","inputBaseGiphy","viewSizeGiphy","itemGiphy","imgListGiphy","renderEmojiGiphy","emojiGiphy","marinButtonEmojiGiphy","buttonEmojiGiphy","backgroundColor","getConversations","query","useEffect","renderImage","role","viewContentImageTake","viewContentImageSend","fromNow","imgGiphy","renderTextField","length","textAdmin","textUser","trim","readOnly","renderText","textFieldUserChatContent","renderConversation","created_at","overflowHeightEmojiGiphy","textSizeNewDate","element","count","checkNewDate","setViewAvatar","oldDate","newDate","display","viewAvatarChatContent","avatarAdminText","textFieldChatContent","clear","errInternet","onClickOpenEmojiGiphy","apiUpload","api","method","request","headers","withCredentials","upLoadImage","files","reader","FileReader","file","readAsDataURL","onload","base64_image","result","fileName","typeUpload","res","location","catch","err","alert","setOnKeyDown","keyCode","heightChatDiv","elm","document","getElementById","offsetHeight","scrollTo","duration","delay","smooth","containerId","offset","setChangeInput","renderInput","inputBase","inputText","sizeIcon","inputWrapper","fileInput","viewChat","_open","viewChatImpostant","TransitionProps","handleClick","newPlacement","getConversation","conversationId","avatar","status","renderListAvatar","bottom","renderAvatarBorderRadius","renderAvatar","large","listAvatar","root"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport Popper, { PopperPlacementType } from '@material-ui/core/Popper';\r\nimport { ThemeProvider } from '@material-ui/core/styles';\r\nimport { Link, Element , Events, animateScroll as scroll, scrollSpy, scroller } from 'react-scroll';\r\nimport _ from 'lodash';\r\nimport { \r\n  Grid, \r\n  InputBase, \r\n  Fade,\r\n  Typography, \r\n  Paper, \r\n  CardHeader,\r\n  Avatar, \r\n  TextField,\r\n  Divider, \r\n  Input, \r\n  IconButton,\r\n  Hidden,\r\n\r\n} from '@material-ui/core';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport TagFacesIcon from '@material-ui/icons/TagFaces';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport { \r\n  dataEmoji, \r\n  giphyDefault, \r\n  useStyles,\r\n  themeTextFieldAdmin, \r\n  themeTextFieldUser, \r\n  StyledBadge,\r\n  themeInput,\r\n  themeInputBase,\r\n  useStylesBootstrap, \r\n} from \"./constant\";\r\nimport { create } from 'jss';\r\nimport rtl from 'jss-rtl';\r\nimport axios, {Method} from \"axios\";\r\nimport {apiBaseURL, apiGraphQLURL} from \"../../constants\";\r\nimport \"cross-fetch/polyfill\";\r\nimport Tooltip, { TooltipProps } from '@material-ui/core/Tooltip';\r\nimport ApolloClient from \"apollo-boost\";\r\nimport {apolloClient} from \"../../utils\";\r\nimport { CREATE_MESSAGE } from \"../../graphql/chat/mutation\";\r\nimport { GET_LIST_MESSAGE, GET_MESSAGE_BY_ID } from \"../../graphql/chat/queries\";\r\nconst client = axios.create({ baseURL: apiBaseURL, timeout: 30000 });\r\nimport {FunctionComponent} from \"react\";\r\nimport moment from \"moment\";\r\nimport 'moment/locale/es';\r\nmoment.locale('vi');\r\n// @ts-ignore\r\nimport { jssPreset } from '@material-ui/core/styles';\r\nconst jss = create({ plugins: [...jssPreset().plugins, rtl()] });\r\n\r\nfunction BootstrapTooltip(props: TooltipProps) {\r\n  const classes = useStylesBootstrap()\r\n  return <Tooltip arrow classes={classes} {...props} />;\r\n};\r\n\r\ninterface ChatProps {\r\n  userLogin: string\r\n}\r\ninterface Conversation {\r\n  id: string\r\n  target: {\r\n    id: string\r\n    avatar: string\r\n    first_name: string\r\n    last_name: string\r\n    status: string\r\n    last_activity: string\r\n  }\r\n  chat: Chat[],\r\n  created_at: string\r\n  updated_at: string\r\n};\r\n\r\ninterface Chat {\r\n  id: string\r\n  send_user_id: string\r\n  message: {\r\n    text: string\r\n    attachment: {\r\n      type: string\r\n      payload:{\r\n        url: string\r\n      }\r\n    }\r\n  }\r\n  status_check: number\r\n  send_at: string\r\n  read_at: string\r\n}\r\n\r\ninterface Conversations {\r\n  conversations: Edges[]\r\n}\r\ninterface Edges {\r\n  node: {\r\n    id: string\r\n    target: {\r\n      id: string\r\n      avatar: string\r\n      first_name: string\r\n      last_name: string\r\n      status: string\r\n      last_activity: string\r\n    }\r\n  }\r\n}[]\r\n\r\nconst Chat: FunctionComponent<ChatProps> = (props: ChatProps) => {\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [placement, setPlacement] = React.useState<PopperPlacementType>();\r\n  const [internet, setInternet] = React.useState<boolean>(true);\r\n  const [texting, setTexting] = React.useState<boolean>(false);\r\n  const [giphyData, setGiphyData] = React.useState<any>();\r\n  const [openEmojiGiphy, setOpenEmojiGiphy] = React.useState<boolean>(false);\r\n  const [valueSearchGiphy, setValueSearchGiphy] = React.useState(\"\");\r\n  const [avatarImage, setAvatarImage] = React.useState(\"https://image.crisp.chat/avatar/operator/da8d4459-5ea3-4119-bca1-9170f49ee69c/240/?1585999578742&quot\");\r\n  let   [valueInput, setValueInput] = React.useState(\"\");\r\n  const [viewEmoji, setViewEmoji] = React.useState(false);\r\n  const [reload, setReload] = React.useState(true);\r\n  const [checkLogin, setCheckLogin] = React.useState<boolean>(true);\r\n  const [userId, setUserId] = React.useState(\"\");\r\n  const [conversations, setConversations] = React.useState<Conversations>();\r\n  const [conversation, setConversation] = React.useState<Conversation>();\r\n  const [chat, setChat] = React.useState<Chat[]>([])\r\n  const [name, setName] = React.useState(\"\");\r\n  const [last_activity, setLastActivity] = React.useState(\"\");\r\n  const [statusOnline, setStatusOnline] = React.useState(\"\");\r\n  const [_conversationId, setConversationId] = React.useState(\"\")\r\n  const onCloseChat = () => {\r\n    setOpen(false)\r\n  };\r\n\r\n  const checkUserLogin = () => {\r\n    if (props.userLogin) {\r\n      setCheckLogin(true)\r\n    } else {\r\n      setCheckLogin(false)\r\n    }\r\n  }\r\n\r\n  const senMessageChat = async (value: string, url: string)=> { \r\n    chat.push({\r\n      id: _conversationId,\r\n      send_user_id: props.userLogin,\r\n      message: {\r\n        text: value,\r\n        attachment: {\r\n          type: \"\",\r\n          payload: {\r\n            url: url\r\n          },\r\n        },\r\n      },\r\n      status_check: 0,\r\n      send_at: String(new Date().getTime()),\r\n      read_at: String(new Date().getTime()),\r\n    })\r\n\r\n    setChat(chat)\r\n\r\n    apolloClient.mutate({mutation: CREATE_MESSAGE, variables: {\r\n      \"input\": {\r\n        \"target\": userId,\r\n        \"message\": {\r\n          \"text\": `${value}`,\r\n          \"attachment\": {\r\n            \"type\": \"\",\r\n            \"payload\": {\r\n              \"url\" : `${url}`\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }})\r\n      .then((response: any) => {\r\n    })\r\n    setReload(!reload)\r\n    setValueInput(\"\")\r\n    setScrollTo()\r\n  };\r\n\r\n  const renderHeader = () => {\r\n    return (\r\n      <div >\r\n          <CardHeader\r\n            className={classes.header} \r\n            avatar={\r\n              <StyledBadge\r\n                overlap=\"circle\"\r\n                anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n                variant=\"standard\"\r\n              >\r\n                <Avatar src={avatarImage} className={classes.sizeAvatarSmall} alt=\"nhadatmoi.net\" />\r\n              </StyledBadge>\r\n            }\r\n            title={name}\r\n            subheader={ \r\n              <Typography variant=\"caption\" align=\"center\" className={classes.timeWork}>\r\n                Hoạt động: {moment(Number(last_activity)).format('DD/MM/YYYY')}\r\n              </Typography>\r\n            }\r\n            action={\r\n              <IconButton color='inherit' aria-label=\"settings\" onClick={() => onCloseChat()} >\r\n                <CloseIcon/>\r\n              </IconButton>\r\n            }\r\n          />\r\n      </div>\r\n    )\r\n  };\r\n\r\n  const searchGiphy = async (event: any)=>  { \r\n    setValueSearchGiphy(event.target.value)\r\n    let url = `https://api.giphy.com/v1/gifs/search?api_key=UgTMyvovmg74m8fPN6qYiB623nwS1IPc&q=${event.target.value}&limit=20&offset=0&rating=G&lang=vi`\r\n    let getData = await axios.get(url, {})\r\n    .then(function (response) {\r\n      setGiphyData(response.data.data)\r\n    })\r\n  };\r\n\r\n  let dataSearch: any = [];\r\n  if(Array.isArray(giphyData)){\r\n    giphyData.map((item: any, index: number) => {\r\n      dataSearch.push({ \r\n        image: {\r\n          url: item.images.fixed_width.url,\r\n          height: item.images.fixed_width.height,\r\n          width: item.images.fixed_width.width,\r\n        }})\r\n    })\r\n  };\r\n  \r\n  // Gửi ảnh emoji giphy \r\n  const setItemGiphy = (index: number, name: string) => {\r\n    setOpenEmojiGiphy(!openEmojiGiphy)\r\n    if(name == \"giphyDefault\") {\r\n      senMessageChat(\"\", giphyDefault[index].image.url)\r\n    } else if ( name == \"dataSearch\") {\r\n      senMessageChat(\"\", dataSearch[index].image.url)\r\n    }\r\n  };\r\n\r\n  const onClickEmoji = (index: number) => {\r\n    valueInput = valueInput +  dataEmoji[index].native\r\n    setValueInput(valueInput)\r\n  };\r\n\r\n  const renderEmoji = () => {\r\n    return ( \r\n      <div className={classes.overflowHeightEmoji}>\r\n        {dataEmoji.map((item: any, index: number) => {\r\n          return (\r\n            <div \r\n              onClick={() => onClickEmoji(index)} \r\n              key={index} \r\n              className={classes.itemEmoji}\r\n            >{item.native}</div>\r\n          )\r\n        })}\r\n      </div>\r\n    )  \r\n  };\r\n\r\n  const renderGiphy = () => {\r\n    return (\r\n      <div className={classes.viewWidthGiphy} >\r\n        <div className={classes.searchGiphy}>\r\n          <SearchIcon className={classes.sizeSearchIcon} />\r\n          <ThemeProvider theme={themeInputBase}>\r\n            <InputBase\r\n              onChange={(e) => searchGiphy(e)}\r\n              className={classes.inputBaseGiphy}\r\n              placeholder=\"Tìm kiếm ...\"\r\n            />\r\n          </ThemeProvider>\r\n        </div>\r\n        <div className={classes.viewSizeGiphy}>\r\n          {valueSearchGiphy \r\n            ? dataSearch.map((item: any, index: number) => {\r\n                return (\r\n                  <div className={classes.itemGiphy} >\r\n                    <img \r\n                      className={classes.imgListGiphy} \r\n                      alt=\"giphy\" \r\n                      src={item.image.url} \r\n                      onClick={() => setItemGiphy(index, \"dataSearch\")} \r\n                    />\r\n                  </div>\r\n                )\r\n              })\r\n            : giphyDefault.map((item: any, index: number) => { // view giphy default\r\n                return (\r\n                  <div className={classes.itemGiphy} >\r\n                    <img \r\n                      className={classes.imgListGiphy} \r\n                      alt=\"giphy\" \r\n                      src={item.image.url} \r\n                      onClick={() => setItemGiphy(index, \"giphyDefault\")} \r\n                    />\r\n                  </div>\r\n              )})\r\n          }\r\n        </div>\r\n      </div>\r\n    )\r\n  };\r\n\r\n  const renderEmojiGiphy = () => {\r\n    return (\r\n      <div className={classes.emojiGiphy}>\r\n        <div className={classes.marinButtonEmojiGiphy}>\r\n          <button \r\n            className={classes.buttonEmojiGiphy} \r\n            onClick={() => setViewEmoji(true)} \r\n            style={{ backgroundColor: !viewEmoji ? \"#aaa\" : \"\" }}\r\n          > Biểu tượng</button>\r\n          <button \r\n            className={classes.buttonEmojiGiphy} \r\n            onClick={() => setViewEmoji(false)} \r\n            style={{ backgroundColor: viewEmoji ? \"#aaa\" : \"\" }}\r\n          > Ảnh động</button>\r\n        </div>\r\n        { viewEmoji ? renderEmoji() : renderGiphy()  }\r\n      </div>\r\n    )\r\n  };\r\n\r\n  const getConversations = async () => {\r\n    let response = await apolloClient.query({ query: GET_LIST_MESSAGE, variables: {\r\n        \"page\": 1,\r\n        \"limit\": 5\r\n      }})\r\n      .then((response: any) => {\r\n        let conversations = _.get(response, \"data.conversations\", {})\r\n        if(conversations){\r\n          setConversations(conversations)\r\n        }\r\n    })\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    checkUserLogin()\r\n    getConversations()\r\n  }, []);\r\n  \r\n  const renderImage = (send_at: string, url: string, role: string) => {\r\n      return (\r\n        <div className={role === 'take' ? classes.viewContentImageTake: classes.viewContentImageSend}>\r\n          <BootstrapTooltip  title={moment(Number(send_at)).fromNow()} placement=\"top\"> \r\n            <img src={url} className={classes.imgGiphy} alt=\"giphy\" />\r\n          </BootstrapTooltip>\r\n        </div>\r\n      )\r\n  }\r\n  \r\n  const renderTextField = (send_at: string, text: string, role: string) => {\r\n    return (\r\n      <BootstrapTooltip title={moment(Number(send_at)).fromNow()} placement=\"top\">\r\n        <TextField\r\n          fullWidth={text.length > 20 ? true : false}\r\n          label=\"\"\r\n          color=\"primary\"\r\n          className={ role == \"take\" ? classes.textAdmin : classes.textUser}\r\n          value={text.trim()}\r\n          margin=\"dense\"\r\n          id=\"outlined-basic\"\r\n          multiline={true}\r\n          InputProps={{\r\n            readOnly: true\r\n          }}\r\n          variant=\"outlined\"\r\n        />\r\n      </BootstrapTooltip >\r\n    )\r\n  }\r\n\r\n  const renderText = (send_at: string, text: string, role: string ) => {\r\n    if(role === 'take') {\r\n      return renderTextField(send_at, text, role)\r\n    }\r\n    return (\r\n      <div className={classes.textFieldUserChatContent} dir={`${text.length < 45 ? 'rtl' : \"\"}`}>\r\n        {renderTextField(send_at, text, role)}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const renderConversation = () => {\r\n    let created_at = _.get(conversation, \"created_at\", \"\")\r\n    return (\r\n      <div \r\n        className={classes.overflowHeightEmojiGiphy} \r\n        style={{ height: openEmojiGiphy ? '230px' : '430px' }} \r\n        id={'ContainerElementID'}\r\n      >\r\n        <Element name=\"myScrollToElement\" id={\"test_ndm\"}>\r\n          <Typography align=\"center\" className={classes.textSizeNewDate}> {moment(Number(created_at)).format('LLL')} </Typography>\r\n          <Divider />\r\n          {Array.isArray(chat) ? chat.map((element: any, count: number) => {\r\n            let checkNewDate = false\r\n            let setViewAvatar = true\r\n            let oldDate = count > 0 ? moment(Number(chat[count - 1].send_at)).format('YYYY-MM-DD') : ''\r\n            let newDate = moment(Number(chat[count].send_at)).format('YYYY-MM-DD')\r\n            if(count > 0 && (oldDate !== newDate)) {\r\n              checkNewDate = true\r\n            }\r\n            let url = _.get(element, \"message.attachment.payload.url\", \"\")\r\n            let text = _.get(element, \"message.text\", \"\")\r\n            let send_user_id = _.get(element, \"send_user_id\", \"\")\r\n            let send_at = _.get(element, \"send_at\", \"\")\r\n            return (\r\n              <div key={count} style={{ display: \"block\" }}>\r\n                { checkNewDate && <Typography align=\"center\" className={classes.textSizeNewDate}>\r\n                  {moment(Number(send_at)).format(\"LLL\")} <Divider /></Typography>}\r\n                { send_user_id !== props.userLogin\r\n                  ? <ThemeProvider theme={themeTextFieldAdmin}>\r\n                      <div className={classes.viewAvatarChatContent}>\r\n                        { setViewAvatar && <Avatar className={classes.avatarAdminText} alt=\"nhadatmoi.net\" src={avatarImage} /> }\r\n                      </div>\r\n                      <div className={classes.textFieldChatContent}>\r\n                        { url ? renderImage(send_at, url, \"take\") : renderText(send_at, text, \"take\") }\r\n                      </div>\r\n                    </ThemeProvider>\r\n                  : <ThemeProvider theme={themeTextFieldUser}>\r\n                      { url ? renderImage(send_at, url, \"send\") : renderText(send_at, text, \"send\") }\r\n                    </ThemeProvider>\r\n                }\r\n                <div style={{ clear: \"both\" }} />\r\n              </div>\r\n            )\r\n          })\r\n          : \"\" }\r\n          <div>\r\n            {!internet && <p className={classes.errInternet}><u>Không thể gửi tin nhắn này. Kiểm tra kết nối internet và thử lại</u></p> }\r\n          </div>\r\n          <div> {texting && <p className={classes.texting}>Đang nhập ...</p>}</div>\r\n        </Element>\r\n      </div>\r\n    )\r\n  };\r\n\r\n  const onClickOpenEmojiGiphy = () => {\r\n    setOpenEmojiGiphy(!openEmojiGiphy) \r\n    setViewEmoji(true)\r\n  };\r\n\r\n  const apiBaseURL = \"https://graph.nhadatmoi.net\";\r\n  const apiUpload = `${apiBaseURL}/private_upload_image_app`;\r\n  const api = (method: Method, url: string, data?: any) => client\r\n    .request({\r\n      data: JSON.stringify(data), \r\n      headers: { \r\n        \"Accept\": \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      }, \r\n      method,\r\n      url,\r\n      withCredentials: true,\r\n    }).then((response: any) => response.data);\r\n\r\n  const upLoadImage = (files: any) => {\r\n    const reader = new FileReader;\r\n    let file = files.target.files[0]\r\n    reader.readAsDataURL(file)\r\n    reader.onload = () => {\r\n      api(\"POST\", `${apiUpload}`, { \r\n        base64_image: reader.result, \r\n        fileName: (new Date()).getTime() + \"\" + file.name,\r\n        typeUpload: \"ad_sell_lease\",\r\n      })\r\n      .then(function (res) {\r\n        senMessageChat(\"\", res.location)\r\n      })\r\n      .catch(function (err) {\r\n        alert('HTTP Error: ' + err.message);\r\n      });\r\n    };\r\n  };\r\n\r\n  const setOnKeyDown = (event: any) => {\r\n    if(event.keyCode == 13){\r\n      senMessageChat(valueInput, \"\")\r\n      setValueInput(\"\");\r\n      setScrollTo()\r\n    }\r\n  };\r\n\r\n  const setScrollTo = () => {\r\n    let heightChatDiv = 0;\r\n    let elm = document.getElementById(\"test_ndm\");\r\n    if (elm) {\r\n      heightChatDiv =  elm.offsetHeight;\r\n    }\r\n    scroller.scrollTo('myScrollToElement', {\r\n      duration: 500,\r\n      delay: 100,\r\n      smooth: true,\r\n      containerId: 'ContainerElementID',\r\n      offset: heightChatDiv,\r\n    })\r\n  }\r\n  \r\n  const setChangeInput = (value: any) => {\r\n    setValueInput(value)\r\n  };\r\n\r\n  const renderInput = () => {\r\n    return (\r\n      <Paper component=\"form\" className={classes.inputBase}>\r\n        <ThemeProvider theme={themeInput}>\r\n          <Input \r\n            fullWidth\r\n            disabled={!internet}\r\n            className={classes.inputText}\r\n            margin=\"dense\"\r\n            id=\"outlined-basic\" \r\n            autoFocus={true}\r\n            value={valueInput}\r\n            multiline={true}\r\n            onChange={(e) => setChangeInput(e.target.value)}\r\n            onKeyDown={(e) => setOnKeyDown(e)}\r\n            placeholder=\"Nhập tin nhắn ...\"\r\n            autoComplete=\"false\"\r\n          />\r\n          { openEmojiGiphy \r\n            ? <BootstrapTooltip  title=\"Chèn biểu tượng\" placement=\"top\"> \r\n                <ExpandMoreIcon className={classes.sizeIcon} onClick={onClickOpenEmojiGiphy} color=\"primary\" />\r\n              </BootstrapTooltip > \r\n            : <BootstrapTooltip  title=\"Chèn biểu tượng\" placement=\"top\"> \r\n                <TagFacesIcon className={classes.sizeIcon} onClick={onClickOpenEmojiGiphy} color=\"primary\" />\r\n              </BootstrapTooltip >\r\n          }\r\n          { valueInput\r\n            ? <BootstrapTooltip  title=\"Gửi tin nhắn\" placement=\"top\">\r\n                <SendIcon onClick={() => senMessageChat(valueInput, \"\")} className={classes.sizeIcon} color=\"primary\" />\r\n              </BootstrapTooltip >\r\n            : <BootstrapTooltip  title=\"Thêm tập tin\" placement=\"top\">\r\n                <div className={classes.inputWrapper}> \r\n                  <AddCircleOutlineIcon className={classes.sizeIcon} color=\"primary\"/> \r\n                  <input type=\"file\" className={classes.fileInput}  onChange={upLoadImage} /> \r\n                </div>\r\n              </BootstrapTooltip >\r\n          }\r\n        </ThemeProvider>\r\n      </Paper>\r\n    )\r\n  };\r\n\r\n  const viewChat = () => {\r\n    let _open = open && checkLogin ? true : false\r\n    return (\r\n      <Popper open={_open} anchorEl={anchorEl} placement={placement} transition className={classes.viewChatImpostant}>\r\n        {({ TransitionProps }) => (\r\n          <Fade {...TransitionProps} timeout={300}>\r\n            <Paper>\r\n              <div className={classes.viewChat}> \r\n                {renderHeader()}\r\n                {renderConversation()}\r\n                {openEmojiGiphy && renderEmojiGiphy()}\r\n                {renderInput()}\r\n              </div>\r\n            </Paper>\r\n          </Fade>\r\n        )}\r\n      </Popper>\r\n    )\r\n  };\r\n\r\n  const handleClick = (newPlacement: PopperPlacementType) => {\r\n    setOpen(true);\r\n    setPlacement(newPlacement);\r\n  };\r\n\r\n  const getConversation = async (conversationId: string) => {\r\n    let conversation = await apolloClient.query({ query: GET_MESSAGE_BY_ID, variables: {\r\n      \"id\": conversationId\r\n    }})\r\n    .then((response: any) => {\r\n      let conversation = _.get(response, \"data.conversation\", {})\r\n      return conversation\r\n    })\r\n\r\n    let chat = _.get(conversation, \"chat\", [])\r\n    let avatar = _.get(conversation, \"target.avatar\", \"\");\r\n    let userId = _.get(conversation, \"target.id\", \"\");\r\n    let name = _.get(conversation, \"target.first_name\", \"\") +  _.get(conversation, \"target.last_name\", \"\");\r\n    let last_activity = _.get(conversation, \"target.last_activity\", \"\");\r\n    let status = _.get(conversation, \"target.status\", \"\");\r\n    setChat(chat)\r\n    setAvatarImage(avatar);\r\n    setConversationId(conversationId)\r\n    setUserId(userId);\r\n    setName(name);\r\n    setLastActivity(last_activity);\r\n    setStatusOnline(status);\r\n    setConversation(conversation);\r\n  };\r\n\r\n  const renderListAvatar = (item: any, index: number) => {\r\n    let avatar  = _.get(item, \"node.target.avatar\", \"\");\r\n    let name    = _.get(item, \"node.target.first_name\", \"\") + _.get(item, \"node.target.last_name\", \"\");\r\n    let id      = _.get(item, \"node.target.id\", \"\");\r\n    let status  = _.get(item, \"node.target.status\", \"\")\r\n    let conversationId =_.get(item, \"node.id\", \"\")\r\n    return (\r\n      <div\r\n        key={index}\r\n        style={{ bottom: `${index*65 + 80}px` }}\r\n        className={id === userId ? classes.renderAvatarBorderRadius : classes.renderAvatar}\r\n        onClick={() => getConversation(conversationId) }\r\n      >\r\n        <BootstrapTooltip title={name} placement=\"left\">\r\n          <StyledBadge\r\n            overlap=\"circle\"\r\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n            variant={status == \"offline\" ? \"standard\" : \"dot\"}\r\n          >\r\n            <Avatar \r\n              src={avatar} \r\n              onClick={() => handleClick(\"top-start\")} \r\n              className={classes.large}\r\n              alt=\"name\"\r\n            />\r\n          </StyledBadge>\r\n        </BootstrapTooltip>\r\n      </div>\r\n    )\r\n  };\r\n\r\n  const listAvatar = _.get(conversations, 'edges', []) || []\r\n  return (\r\n    <div className={classes.root}>\r\n      {viewChat()}\r\n      <Grid container justify=\"center\">\r\n        <Grid item>\r\n          <Hidden xsDown>\r\n            <>\r\n              {Array.isArray(listAvatar) && listAvatar.map((item: any, index: number) => {\r\n                return renderListAvatar(item, index)\r\n              })}\r\n            </>\r\n          </Hidden>\r\n          <Hidden smUp> \r\n            <>\r\n              {Array.isArray(listAvatar) && listAvatar.map((item: any, index: number) => {\r\n                return renderListAvatar(item, index)\r\n              })}\r\n            </>\r\n          </Hidden>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;"]},"metadata":{},"sourceType":"module"}