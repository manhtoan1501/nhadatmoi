{"ast":null,"code":"import _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\n\nvar isBlank = function isBlank(value) {\n  if (typeof value === \"undefined\" || value == null || value === 0 || value === '') {\n    return true;\n  } else if (typeof value === \"string\" && (value.length <= 0 || value.trim().length <= 0)) {\n    return true;\n  } else if (typeof value === \"object\") {\n    return isEmpty(value);\n  } else {\n    return false;\n  }\n};\n\nvar isEmpty = function isEmpty(obj) {\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) return false;\n  }\n\n  return true;\n};\n\nvar isNumber = function isNumber(value) {\n  if (isBlank(value)) {\n    return false;\n  }\n\n  return !isNaN(_parseFloat(value)) && isFinite(value);\n};\n\nvar isEmail = function isEmail(value) {\n  if (isBlank(value)) {\n    return false;\n  }\n\n  var email = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return email.test(value);\n};\n\nvar isSlug = function isSlug(value) {\n  if (isBlank(value)) {\n    return false;\n  }\n\n  var slug = /^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$/;\n  return slug.test(value);\n};\n\nvar isUrl = function isUrl(value) {\n  if (isBlank(value)) {\n    return false;\n  }\n\n  var regexp = /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/;\n  return regexp.test(value);\n};\n\nexport default {\n  isBlank: isBlank,\n  isEmail: isEmail,\n  isEmpty: isEmpty,\n  isNumber: isNumber,\n  isUrl: isUrl,\n  isSlug: isSlug\n};","map":{"version":3,"sources":["C:/Users/toan/Desktop/NDM/chat/modules/validator.tsx"],"names":["isBlank","value","length","trim","isEmpty","obj","key","hasOwnProperty","isNumber","isNaN","isFinite","isEmail","email","test","isSlug","slug","isUrl","regexp"],"mappings":";;AAAA,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAgB;AAC9B,MAAI,OAAOA,KAAP,KAAiB,WAAjB,IAAgCA,KAAK,IAAI,IAAzC,IAAiDA,KAAK,KAAK,CAA3D,IAAgEA,KAAK,KAAK,EAA9E,EAAkF;AAChF,WAAO,IAAP;AACD,GAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,QAAjB,KAA8BA,KAAK,CAACC,MAAN,IAAgB,CAAhB,IAAqBD,KAAK,CAACE,IAAN,GAAaD,MAAb,IAAuB,CAA1E,CAAJ,EAAkF;AACvF,WAAO,IAAP;AACD,GAFM,MAEA,IAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AACpC,WAAOG,OAAO,CAACH,KAAD,CAAd;AACD,GAFM,MAEA;AACL,WAAO,KAAP;AACD;AACF,CAVD;;AAYA,IAAMG,OAAO,GAAG,SAAVA,OAAU,CAACC,GAAD,EAAc;AAC5B,OAAI,IAAIC,GAAR,IAAeD,GAAf,EAAoB;AAClB,QAAGA,GAAG,CAACE,cAAJ,CAAmBD,GAAnB,CAAH,EACE,OAAO,KAAP;AACH;;AACD,SAAO,IAAP;AACD,CAND;;AAQA,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAACP,KAAD,EAAgB;AAC/B,MAAID,OAAO,CAACC,KAAD,CAAX,EAAoB;AAClB,WAAO,KAAP;AACD;;AACD,SAAO,CAACQ,KAAK,CAAC,YAAWR,KAAX,CAAD,CAAN,IAA6BS,QAAQ,CAACT,KAAD,CAA5C;AACD,CALD;;AAOA,IAAMU,OAAO,GAAG,SAAVA,OAAU,CAACV,KAAD,EAAgB;AAC9B,MAAID,OAAO,CAACC,KAAD,CAAX,EAAoB;AAClB,WAAO,KAAP;AACD;;AACD,MAAIW,KAAK,GAAG,wJAAZ;AACA,SAAOA,KAAK,CAACC,IAAN,CAAWZ,KAAX,CAAP;AACD,CAND;;AAQA,IAAMa,MAAM,GAAG,SAATA,MAAS,CAACb,KAAD,EAAgB;AAC7B,MAAID,OAAO,CAACC,KAAD,CAAX,EAAoB;AAClB,WAAO,KAAP;AACD;;AACD,MAAIc,IAAI,GAAG,kCAAX;AACA,SAAOA,IAAI,CAACF,IAAL,CAAUZ,KAAV,CAAP;AACD,CAND;;AAQA,IAAMe,KAAK,GAAG,SAARA,KAAQ,CAACf,KAAD,EAAgB;AAC5B,MAAID,OAAO,CAACC,KAAD,CAAX,EAAoB;AAClB,WAAO,KAAP;AACD;;AACD,MAAIgB,MAAM,GAAG,8aAAb;AACA,SAAOA,MAAM,CAACJ,IAAP,CAAYZ,KAAZ,CAAP;AACD,CAND;;AAQA,eAAe;AACbD,EAAAA,OAAO,EAAPA,OADa;AAEbW,EAAAA,OAAO,EAAPA,OAFa;AAGbP,EAAAA,OAAO,EAAPA,OAHa;AAIbI,EAAAA,QAAQ,EAARA,QAJa;AAKbQ,EAAAA,KAAK,EAALA,KALa;AAMbF,EAAAA,MAAM,EAANA;AANa,CAAf","sourcesContent":["const isBlank = (value: any) => {\r\n  if (typeof value === \"undefined\" || value == null || value === 0 || value === '') {\r\n    return true;\r\n  } else if (typeof value === \"string\" && (value.length <= 0 || value.trim().length <= 0)) {\r\n    return true;\r\n  } else if (typeof value === \"object\") {\r\n    return isEmpty(value);\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst isEmpty = (obj: any) => {\r\n  for(let key in obj) {\r\n    if(obj.hasOwnProperty(key))\r\n      return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nconst isNumber = (value: any) => {\r\n  if (isBlank(value)) {\r\n    return false;\r\n  }\r\n  return !isNaN(parseFloat(value)) && isFinite(value);\r\n};\r\n\r\nconst isEmail = (value: any) => {\r\n  if (isBlank(value)) {\r\n    return false;\r\n  }\r\n  let email = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  return email.test(value);\r\n};\r\n\r\nconst isSlug = (value: any) => {\r\n  if (isBlank(value)) {\r\n    return false;\r\n  }\r\n  let slug = /^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$/\r\n  return slug.test(value);\r\n};\r\n\r\nconst isUrl = (value: any) => {\r\n  if (isBlank(value)) {\r\n    return false;\r\n  }\r\n  let regexp = /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/;\r\n  return regexp.test(value);\r\n};\r\n\r\nexport default {\r\n  isBlank,\r\n  isEmail,\r\n  isEmpty,\r\n  isNumber,\r\n  isUrl,\r\n  isSlug\r\n};\r\n"]},"metadata":{},"sourceType":"module"}