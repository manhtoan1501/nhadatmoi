{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport { apolloClient } from \"../../utils\";\nimport { GET_LOCATION_FROM_SLUG } from \"../../graphql/location/queries\";\nimport Validator from \"../validator\";\n\nvar processDataFromQuery = function processDataFromQuery(query, typePage, type1ASL, type2ASL) {\n  var typeSlug, dataQuery, propObject, locationSlug, locationObject;\n  return _regeneratorRuntime.async(function processDataFromQuery$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          typeSlug = '';\n\n          if (type2ASL || type1ASL) {\n            typeSlug = '/' + query.slug;\n          }\n\n          dataQuery = {\n            city: \"\",\n            district: \"\",\n            ward: \"\",\n            home_direction: \"\",\n            price_range: {\n              max: 0,\n              min: 0\n            },\n            area_range: {\n              max: 0,\n              min: 0\n            },\n            bed_room_number: {\n              max: 0,\n              min: 0\n            },\n            title: \"\",\n            name: \"\",\n            page: 1,\n            limit: 48,\n            sort_by: {\n              time: \"newest\"\n            },\n            type2: type2ASL,\n            type1: type1ASL,\n            type_slug: typeSlug,\n            parent_slug: query.slug,\n            child_slug: query.location\n          };\n          propObject = {\n            location: {},\n            statusCode: 200,\n            dataQuery: dataQuery,\n            slug: query.location\n          };\n          delete query.slug;\n\n          if (!(typePage === 'ad-sell-lease-location')) {\n            _context.next = 19;\n            break;\n          }\n\n          locationSlug = query.location;\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(apolloClient.query({\n            query: GET_LOCATION_FROM_SLUG,\n            variables: {\n              \"slug\": locationSlug\n            }\n          }).then(function (response) {\n            return response;\n          }));\n\n        case 9:\n          locationObject = _context.sent;\n\n          if (!(!Validator.isBlank(locationObject.data.location) && !Validator.isBlank(locationObject.data.location.city))) {\n            _context.next = 17;\n            break;\n          }\n\n          propObject.location = locationObject.data.location;\n\n          if (!Validator.isBlank(locationObject.data.location.city.id)) {\n            dataQuery.city = locationObject.data.location.city.id;\n          }\n\n          if (!Validator.isBlank(locationObject.data.location.district) && !Validator.isBlank(locationObject.data.location.district.id)) {\n            dataQuery.district = locationObject.data.location.district.id;\n          }\n\n          if (!Validator.isBlank(locationObject.data.location.ward) && !Validator.isBlank(locationObject.data.location.ward.id)) {\n            dataQuery.ward = locationObject.data.location.ward.id;\n          }\n\n          _context.next = 19;\n          break;\n\n        case 17:\n          propObject.statusCode = 404;\n          return _context.abrupt(\"return\", propObject);\n\n        case 19:\n          try {\n            if (!Validator.isBlank(query.bed_room_number)) {\n              query.bed_room_number = JSON.parse(query.bed_room_number);\n            }\n\n            if (!Validator.isBlank(query.price_range)) {\n              query.price_range = JSON.parse(query.price_range);\n            }\n\n            if (!Validator.isBlank(query.area_range)) {\n              query.area_range = JSON.parse(query.area_range);\n            }\n\n            if (!Validator.isBlank(query.sort_by)) {\n              query.sort_by = JSON.parse(query.sort_by);\n            }\n          } catch (e) {\n            propObject.statusCode = 404;\n          }\n\n          dataQuery = _Object$assign(dataQuery, query);\n          dataQuery.page = Number(dataQuery.page);\n          dataQuery.limit = Number(dataQuery.limit);\n          propObject.dataQuery = dataQuery;\n          return _context.abrupt(\"return\", propObject);\n\n        case 25:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, _Promise);\n};\n\nexport default {\n  processQueryData: processDataFromQuery\n};","map":{"version":3,"sources":["C:/Users/manh nhan/Desktop/new_ndm/modules/LayeredNavigation/processDataFromQuery.tsx"],"names":["apolloClient","GET_LOCATION_FROM_SLUG","Validator","processDataFromQuery","query","typePage","type1ASL","type2ASL","typeSlug","slug","dataQuery","city","district","ward","home_direction","price_range","max","min","area_range","bed_room_number","title","name","page","limit","sort_by","time","type2","type1","type_slug","parent_slug","child_slug","location","propObject","statusCode","locationSlug","variables","then","response","locationObject","isBlank","data","id","JSON","parse","e","Number","processQueryData"],"mappings":"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","sourcesContent":["import {apolloClient} from \"../../utils\";\r\nimport {GET_LOCATION_FROM_SLUG} from \"../../graphql/location/queries\";\r\nimport Validator from \"../validator\";\r\n\r\nconst processDataFromQuery = async (query: any, typePage: string, type1ASL: string, type2ASL: string) => {\r\n  let typeSlug = '';\r\n  if (type2ASL || type1ASL) {\r\n    typeSlug = '/' + query.slug;\r\n  }\r\n  let dataQuery = {\r\n    city: \"\",\r\n    district: \"\",\r\n    ward: \"\",\r\n    home_direction: \"\",\r\n    price_range: {\r\n      max: 0,\r\n      min: 0\r\n    },\r\n    area_range: {\r\n      max: 0,\r\n      min: 0\r\n    },\r\n    bed_room_number:  {\r\n      max: 0,\r\n      min: 0\r\n    },\r\n    title: \"\",\r\n    name: \"\",\r\n    page: 1,\r\n    limit: 48,\r\n    sort_by: {\r\n      time: \"newest\"\r\n    },\r\n    type2: type2ASL,\r\n    type1: type1ASL,\r\n    type_slug: typeSlug,\r\n    parent_slug: query.slug,\r\n    child_slug: query.location\r\n  };\r\n\r\n  let propObject = {\r\n    location: {},\r\n    statusCode: 200,\r\n    dataQuery: dataQuery,\r\n    slug: query.location\r\n  };\r\n  delete query.slug;\r\n  if (typePage === 'ad-sell-lease-location') {\r\n    let locationSlug = query.location;\r\n    let locationObject = await apolloClient.query({query: GET_LOCATION_FROM_SLUG, variables: {\r\n        \"slug\": locationSlug\r\n      }}).then(response => {\r\n      return response;\r\n    });\r\n\r\n    if (!Validator.isBlank(locationObject.data.location) && !Validator.isBlank(locationObject.data.location.city)) {\r\n      propObject.location = locationObject.data.location;\r\n      if (!Validator.isBlank(locationObject.data.location.city.id)) {\r\n        dataQuery.city = locationObject.data.location.city.id;\r\n      }\r\n      if (!Validator.isBlank(locationObject.data.location.district) && !Validator.isBlank(locationObject.data.location.district.id)) {\r\n        dataQuery.district = locationObject.data.location.district.id;\r\n      }\r\n      if (!Validator.isBlank(locationObject.data.location.ward) && !Validator.isBlank(locationObject.data.location.ward.id)) {\r\n        dataQuery.ward = locationObject.data.location.ward.id;\r\n      }\r\n    } else {\r\n      propObject.statusCode = 404;\r\n      return propObject;\r\n    }\r\n  }\r\n\r\n  try {\r\n    if (!Validator.isBlank(query.bed_room_number)) {\r\n      query.bed_room_number = JSON.parse(query.bed_room_number);\r\n    }\r\n    if (!Validator.isBlank(query.price_range)) {\r\n      query.price_range = JSON.parse(query.price_range);\r\n    }\r\n    if (!Validator.isBlank(query.area_range)) {\r\n      query.area_range = JSON.parse(query.area_range);\r\n    }\r\n    if (!Validator.isBlank(query.sort_by)) {\r\n      query.sort_by = JSON.parse(query.sort_by);\r\n    }\r\n  } catch (e) {\r\n    propObject.statusCode = 404;\r\n  }\r\n\r\n  dataQuery = Object.assign(dataQuery, query);\r\n  dataQuery.page = Number(dataQuery.page);\r\n  dataQuery.limit = Number(dataQuery.limit);\r\n  propObject.dataQuery = dataQuery;\r\n  return propObject;\r\n};\r\nexport default {\r\n  processQueryData: processDataFromQuery\r\n}\r\n"]},"metadata":{},"sourceType":"module"}