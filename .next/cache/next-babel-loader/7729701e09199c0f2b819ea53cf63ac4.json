{"ast":null,"code":"import { apolloClient } from \"../../utils\";\nimport { GET_LOCATION_FROM_SLUG } from \"../../graphql/location/queries\";\nimport Validator from \"../validator\";\n\nconst processQueryData = async (query, typePage) => {\n  let dataQuery = {\n    city: \"\",\n    district: \"\",\n    ward: \"\",\n    home_direction: \"\",\n    price_range: {\n      max: 0,\n      min: 0\n    },\n    area_range: {\n      max: 0,\n      min: 0\n    },\n    bed_room_number: {\n      max: 0,\n      min: 0\n    },\n    title: \"\",\n    name: \"\",\n    page: 1,\n    limit: 12,\n    sort_by: {\n      time: \"newest\"\n    }\n  };\n  let propObject = {\n    location: {},\n    statusCode: 200,\n    dataQuery: dataQuery,\n    slug: query.slug\n  };\n\n  if (typePage === 'ad-sell-lease-location') {\n    let locationSlug = query.slug;\n    let locationObject = await apolloClient.query({\n      query: GET_LOCATION_FROM_SLUG,\n      variables: {\n        \"slug\": locationSlug\n      }\n    }).then(response => {\n      return response;\n    });\n\n    if (!Validator.isBlank(locationObject.data.location) && !Validator.isBlank(locationObject.data.location.city)) {\n      propObject.location = locationObject.data.location;\n\n      if (!Validator.isBlank(locationObject.data.location.city.id)) {\n        dataQuery.city = locationObject.data.location.city.id;\n      }\n\n      if (!Validator.isBlank(locationObject.data.location.district) && !Validator.isBlank(locationObject.data.location.district.id)) {\n        dataQuery.district = locationObject.data.location.district.id;\n      }\n\n      if (!Validator.isBlank(locationObject.data.location.ward) && !Validator.isBlank(locationObject.data.location.ward.id)) {\n        dataQuery.ward = locationObject.data.location.ward.id;\n      }\n    } else {\n      propObject.statusCode = 404;\n      return propObject;\n    }\n  }\n\n  try {\n    if (!Validator.isBlank(query.bed_room_number)) {\n      query.bed_room_number = JSON.parse(query.bed_room_number);\n    }\n\n    if (!Validator.isBlank(query.price_range)) {\n      query.price_range = JSON.parse(query.price_range);\n    }\n\n    if (!Validator.isBlank(query.area_range)) {\n      query.area_range = JSON.parse(query.area_range);\n    }\n\n    if (!Validator.isBlank(query.sort_by)) {\n      query.sort_by = JSON.parse(query.sort_by);\n    }\n  } catch (e) {\n    propObject.statusCode = 404;\n  }\n\n  dataQuery = Object.assign(dataQuery, query);\n  dataQuery.page = Number(dataQuery.page);\n  dataQuery.limit = Number(dataQuery.limit);\n  propObject.dataQuery = dataQuery;\n  return propObject;\n};\n\nexport default {\n  processQueryData\n};","map":{"version":3,"sources":["C:/Users/manh nhan/Desktop/Nhadatmoi/modules/LayeredNavigation/processQueryData.tsx"],"names":["apolloClient","GET_LOCATION_FROM_SLUG","Validator","processQueryData","query","typePage","dataQuery","city","district","ward","home_direction","price_range","max","min","area_range","bed_room_number","title","name","page","limit","sort_by","time","propObject","location","statusCode","slug","locationSlug","locationObject","variables","then","response","isBlank","data","id","JSON","parse","e","Object","assign","Number"],"mappings":"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","sourcesContent":["import {apolloClient} from \"../../utils\";\r\nimport {GET_LOCATION_FROM_SLUG} from \"../../graphql/location/queries\";\r\nimport Validator from \"../validator\";\r\nimport {type} from \"os\";\r\n\r\nconst processQueryData = async (query: any, typePage: string) => {\r\n  let dataQuery = {\r\n    city: \"\",\r\n    district: \"\",\r\n    ward: \"\",\r\n    home_direction: \"\",\r\n    price_range: {\r\n      max: 0,\r\n      min: 0\r\n    },\r\n    area_range: {\r\n      max: 0,\r\n      min: 0\r\n    },\r\n    bed_room_number:  {\r\n      max: 0,\r\n      min: 0\r\n    },\r\n    title: \"\",\r\n    name: \"\",\r\n    page: 1,\r\n    limit: 12,\r\n    sort_by: {\r\n      time: \"newest\"\r\n    }\r\n  };\r\n\r\n  let propObject = {\r\n    location: {},\r\n    statusCode: 200,\r\n    dataQuery: dataQuery,\r\n    slug: query.slug\r\n  };\r\n\r\n  if (typePage === 'ad-sell-lease-location') {\r\n    let locationSlug = query.slug;\r\n    let locationObject = await apolloClient.query({query: GET_LOCATION_FROM_SLUG, variables: {\r\n        \"slug\": locationSlug\r\n      }}).then(response => {\r\n      return response;\r\n    });\r\n\r\n    if (!Validator.isBlank(locationObject.data.location) && !Validator.isBlank(locationObject.data.location.city)) {\r\n      propObject.location = locationObject.data.location;\r\n      if (!Validator.isBlank(locationObject.data.location.city.id)) {\r\n        dataQuery.city = locationObject.data.location.city.id;\r\n      }\r\n      if (!Validator.isBlank(locationObject.data.location.district) && !Validator.isBlank(locationObject.data.location.district.id)) {\r\n        dataQuery.district = locationObject.data.location.district.id;\r\n      }\r\n      if (!Validator.isBlank(locationObject.data.location.ward) && !Validator.isBlank(locationObject.data.location.ward.id)) {\r\n        dataQuery.ward = locationObject.data.location.ward.id;\r\n      }\r\n    } else {\r\n      propObject.statusCode = 404;\r\n      return propObject;\r\n    }\r\n  }\r\n\r\n  try {\r\n    if (!Validator.isBlank(query.bed_room_number)) {\r\n      query.bed_room_number = JSON.parse(query.bed_room_number);\r\n    }\r\n    if (!Validator.isBlank(query.price_range)) {\r\n      query.price_range = JSON.parse(query.price_range);\r\n    }\r\n    if (!Validator.isBlank(query.area_range)) {\r\n      query.area_range = JSON.parse(query.area_range);\r\n    }\r\n    if (!Validator.isBlank(query.sort_by)) {\r\n      query.sort_by = JSON.parse(query.sort_by);\r\n    }\r\n  } catch (e) {\r\n    propObject.statusCode = 404;\r\n  }\r\n\r\n  dataQuery = Object.assign(dataQuery, query);\r\n  dataQuery.page = Number(dataQuery.page);\r\n  dataQuery.limit = Number(dataQuery.limit);\r\n  propObject.dataQuery = dataQuery;\r\n  return propObject;\r\n};\r\nexport default {\r\n  processQueryData\r\n}\r\n"]},"metadata":{},"sourceType":"module"}