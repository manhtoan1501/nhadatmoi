{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\manh nhan\\\\Desktop\\\\Nhadatmoi\\\\components\\\\Chat\\\\ChatXX.jsx\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Widget, addResponseMessage, addLinkSnippet, addUserMessage, dropMessages } from 'react-chat-widget';\nimport 'react-chat-widget/lib/styles.css';\nimport './css/style.css';\nimport { Grid } from '@material-ui/core';\nimport BaseContainer, { selector } from 'containers/BaseContainer';\nimport { withStyles } from '@material-ui/core/styles';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport RequestAction from '../../actions/RequestAction';\nimport { I18n } from 'react-redux-i18n';\nvar styles = {}; // import logo from './logo.svg';\n\nvar Chat =\n/*#__PURE__*/\nfunction (_BaseContainer) {\n  _inherits(Chat, _BaseContainer);\n\n  function Chat(props) {\n    var _this;\n\n    _classCallCheck(this, Chat);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chat).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleNewUserMessage\", function (newMessage) {\n      var id = _this.props.requestId;\n      var values = {\n        _id: id,\n        message: newMessage\n      };\n\n      if (!values.message.replace(/\\s/g, '').length) {\n        return false;\n      }\n\n      _this.props.dispatch(RequestAction.sendMessage(values)).then(function (data) {\n        if (!data.error) {} else {\n          _this.notify(\"Response: [\".concat(data.error.status, \"] \").concat(data.error.message), 'error');\n        }\n      });\n    });\n\n    _this.state = {\n      badge: 0\n    };\n    return _this;\n  }\n\n  _createClass(Chat, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      dropMessages();\n      var id = this.props.requestId;\n      this.props.dispatch(RequestAction.getListMessages({\n        _id: id\n      })).then(function (result) {\n        if (!result.error) {\n          var _result$data$messages = result.data.messages,\n              messages = _result$data$messages === void 0 ? [] : _result$data$messages;\n\n          _this2.renderInitMessages(messages);\n        } else {\n          _this2.notify(\"Response: [\".concat(result.error.status, \"] \").concat(result.error.message), 'error');\n        }\n      });\n    } //this function render initial messages when did mount\n\n  }, {\n    key: \"renderInitMessages\",\n    value: function renderInitMessages() {\n      var messages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      // console.log('messages ', this.props.requestId, messages)\n      var userId = JSON.parse(localStorage.getItem(\"user\"))._id;\n\n      messages.map(function (mess) {\n        if (String(mess.userId) === String(userId)) {\n          addUserMessage(mess.message);\n        } else {\n          addResponseMessage(mess.name + \": \" + mess.message);\n        }\n      });\n      this.setState({\n        badge: messages.length\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(Grid, {\n        container: true,\n        style: {\n          zIndex: 2\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, __jsx(Widget, {\n        handleNewUserMessage: this.handleNewUserMessage,\n        title: I18n.t(\"Label.Chat\"),\n        subtitle: false,\n        badge: this.state.badge,\n        senderPlaceHolder: I18n.t(\"Label.chatHolder\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Chat;\n}(BaseContainer);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    //sử dụng selector để lấy state từ redux\n    data: selector(state, \"request.data\", {})\n  };\n};\n\nexport default withRouter(connect(mapStateToProps)(withStyles(styles)(Chat)));","map":{"version":3,"sources":["C:/Users/manh nhan/Desktop/Nhadatmoi/components/Chat/ChatXX.jsx"],"names":["React","Component","Widget","addResponseMessage","addLinkSnippet","addUserMessage","dropMessages","Grid","BaseContainer","selector","withStyles","withRouter","connect","RequestAction","I18n","styles","Chat","props","newMessage","id","requestId","values","_id","message","replace","length","dispatch","sendMessage","then","data","error","notify","status","state","badge","getListMessages","result","messages","renderInitMessages","userId","JSON","parse","localStorage","getItem","map","mess","String","name","setState","zIndex","handleNewUserMessage","t","mapStateToProps"],"mappings":"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","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport { Widget, addResponseMessage, addLinkSnippet, addUserMessage, dropMessages }from 'react-chat-widget';\r\n\r\nimport 'react-chat-widget/lib/styles.css';\r\nimport './css/style.css'\r\nimport { Grid } from '@material-ui/core';\r\nimport BaseContainer, { selector } from 'containers/BaseContainer'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { withRouter } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport RequestAction from '../../actions/RequestAction'\r\nimport { I18n } from 'react-redux-i18n'\r\nconst styles = {\r\n\r\n};\r\n\r\n// import logo from './logo.svg';\r\n\r\nclass Chat extends BaseContainer {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            badge: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        dropMessages()\r\n        let id = this.props.requestId\r\n        this.props.dispatch(RequestAction.getListMessages({\r\n             _id: id\r\n            }))\r\n            .then(result => {\r\n                if (!result.error) {\r\n                    let { messages = [] } = result.data\r\n                    this.renderInitMessages(messages)\r\n                } else {\r\n                    this.notify(`Response: [${result.error.status}] ${result.error.message}`, 'error')\r\n                }\r\n\r\n            })\r\n    }\r\n\r\n    //this function render initial messages when did mount\r\n    renderInitMessages(messages = []) {\r\n        // console.log('messages ', this.props.requestId, messages)\r\n        const userId = JSON.parse(localStorage.getItem(\"user\"))._id\r\n        messages.map(mess => {\r\n            if (String(mess.userId) === String(userId)) {\r\n                addUserMessage(mess.message)\r\n            } else {\r\n                addResponseMessage(mess.name + \": \" + mess.message)\r\n            }\r\n        })\r\n        this.setState({badge: messages.length})\r\n    }\r\n\r\n    handleNewUserMessage = (newMessage) => {\r\n        let id = this.props.requestId\r\n        let values = {\r\n            _id: id,\r\n            message: newMessage\r\n        }\r\n\r\n        if (!values.message.replace(/\\s/g, '').length) {\r\n            return false\r\n        }\r\n        this.props.dispatch(RequestAction.sendMessage(values))\r\n            .then(data => {\r\n                if (!data.error) {\r\n                } else {\r\n                    this.notify(`Response: [${data.error.status}] ${data.error.message}`, 'error')\r\n                }\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid container\r\n                style={{\r\n                    zIndex: 2\r\n                }}>\r\n                <Widget\r\n                    handleNewUserMessage={this.handleNewUserMessage}\r\n                    title={I18n.t(\"Label.Chat\")}\r\n                    subtitle={false}\r\n                    badge={this.state.badge}\r\n                    senderPlaceHolder={I18n.t(\"Label.chatHolder\")}\r\n                />\r\n            </Grid> \r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        //sử dụng selector để lấy state từ redux\r\n        data: selector(state, \"request.data\", {})\r\n    } \r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(withStyles(styles)(Chat)))"]},"metadata":{},"sourceType":"module"}