{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Validator from \"../validator\";\nimport QueryString from \"query-string\";\n\nconst processQueryString = data => {\n  let dataQueryNew = {};\n\n  if (!Validator.isBlank(data.title)) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      title: data.title\n    });\n  }\n\n  if (!Validator.isBlank(data.name)) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      name: data.name\n    });\n  }\n\n  if (!Validator.isBlank(data.city)) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      city: data.city\n    });\n  }\n\n  if (!Validator.isBlank(data.district)) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      district: data.district\n    });\n  }\n\n  if (!Validator.isBlank(data.type2)) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      type2: data.type2\n    });\n  }\n\n  if (!Validator.isBlank(data.type1)) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      type1: data.type1\n    });\n  }\n\n  if (!Validator.isBlank(data.ward)) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      ward: data.ward\n    });\n  }\n\n  if (!Validator.isBlank(data.home_direction)) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      home_direction: data.home_direction\n    });\n  }\n\n  if (!Validator.isBlank(data.area_range) && (!Validator.isBlank(data.area_range.max) || !Validator.isBlank(data.area_range.min))) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      area_range: data.area_range\n    });\n  }\n\n  if (!Validator.isBlank(data.price_range) && (!Validator.isBlank(data.price_range.max) || !Validator.isBlank(data.price_range.min))) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      price_range: data.price_range\n    });\n  }\n\n  if (!Validator.isBlank(data.bed_room_number) && (!Validator.isBlank(data.bed_room_number.max) || !Validator.isBlank(data.bed_room_number.min))) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      bed_room_number: data.bed_room_number\n    });\n  }\n\n  if (!Validator.isBlank(data.sort_by)) {\n    if (!Validator.isBlank(data.sort_by.time) && data.sort_by.time === \"newest\") {} else {\n      dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n        sort_by: data.sort_by\n      });\n    }\n  }\n\n  return dataQueryNew;\n};\n\nconst processQueryFromData = (data, typePage) => {\n  let dataQueryNew = {};\n\n  if (!Validator.isBlank(data.title)) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      title: data.title\n    });\n  }\n\n  if (!Validator.isBlank(data.name)) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      name: data.name\n    });\n  }\n\n  if (!Validator.isBlank(data.page) && data.page !== 1) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      page: data.page\n    });\n  }\n\n  if (!Validator.isBlank(data.limit) && data.limit !== 48) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      limit: data.limit\n    });\n  }\n\n  if (!Validator.isBlank(data.home_direction)) {\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      home_direction: data.home_direction\n    });\n  }\n\n  if (!Validator.isBlank(data.area_range) && (!Validator.isBlank(data.area_range.max) || !Validator.isBlank(data.area_range.min))) {\n    let areaRangeString = _JSON$stringify(data.area_range);\n\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      area_range: areaRangeString\n    });\n  }\n\n  if (!Validator.isBlank(data.price_range) && (!Validator.isBlank(data.price_range.max) || !Validator.isBlank(data.price_range.min))) {\n    let areaRangeString = _JSON$stringify(data.price_range);\n\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      price_range: areaRangeString\n    });\n  }\n\n  if (!Validator.isBlank(data.bed_room_number) && (!Validator.isBlank(data.bed_room_number.max) || !Validator.isBlank(data.bed_room_number.min))) {\n    let areaRangeString = _JSON$stringify(data.bed_room_number);\n\n    dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n      bed_room_number: areaRangeString\n    });\n  }\n\n  if (!Validator.isBlank(data.sort_by)) {\n    if (!Validator.isBlank(data.sort_by.time) && data.sort_by.time === \"newest\") {} else {\n      let sortByString = _JSON$stringify(data.sort_by);\n\n      dataQueryNew = _objectSpread({}, dataQueryNew, {}, {\n        sort_by: sortByString\n      });\n    }\n  }\n\n  return QueryString.stringify(dataQueryNew, {\n    arrayFormat: 'bracket'\n  });\n};\n\nexport default {\n  processQueryUrl: processQueryFromData,\n  processQueryString\n};","map":{"version":3,"sources":["C:/Users/manh nhan/Desktop/new_ndm/modules/LayeredNavigation/processQueryFromData.tsx"],"names":["Validator","QueryString","processQueryString","data","dataQueryNew","isBlank","title","name","city","district","type2","type1","ward","home_direction","area_range","max","min","price_range","bed_room_number","sort_by","time","processQueryFromData","typePage","page","limit","areaRangeString","sortByString","stringify","arrayFormat","processQueryUrl"],"mappings":"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","sourcesContent":["import Validator from \"../validator\";\r\nimport QueryString from \"query-string\";\r\nimport {DataLayeredNavigationProps} from '../../interfaces/interface';\r\n\r\nconst processQueryString = (data: DataLayeredNavigationProps) => {\r\n  let dataQueryNew = {};\r\n  if (!Validator.isBlank(data.title)) {\r\n    dataQueryNew = {...dataQueryNew, ...{title: data.title}};\r\n  }\r\n  if (!Validator.isBlank(data.name)) {\r\n    dataQueryNew = {...dataQueryNew, ...{name: data.name}};\r\n  }\r\n  if (!Validator.isBlank(data.city)) {\r\n    dataQueryNew = {...dataQueryNew, ...{city: data.city}};\r\n  }\r\n  if (!Validator.isBlank(data.district)) {\r\n    dataQueryNew = {...dataQueryNew, ...{district: data.district}};\r\n  }\r\n  if (!Validator.isBlank(data.type2)) {\r\n    dataQueryNew = {...dataQueryNew, ...{type2: data.type2}};\r\n  }\r\n  if (!Validator.isBlank(data.type1)) {\r\n    dataQueryNew = {...dataQueryNew, ...{type1: data.type1}};\r\n  }\r\n  if (!Validator.isBlank(data.ward)) {\r\n    dataQueryNew = {...dataQueryNew, ...{ward: data.ward}};\r\n  }\r\n  if (!Validator.isBlank(data.home_direction)) {\r\n    dataQueryNew = {...dataQueryNew, ...{home_direction: data.home_direction}};\r\n  }\r\n  if (!Validator.isBlank(data.area_range) && (!Validator.isBlank(data.area_range.max) || !Validator.isBlank(data.area_range.min))) {\r\n    dataQueryNew = {...dataQueryNew, ...{area_range: data.area_range}};\r\n  }\r\n  if (!Validator.isBlank(data.price_range) && (!Validator.isBlank(data.price_range.max) || !Validator.isBlank(data.price_range.min))) {\r\n    dataQueryNew = {...dataQueryNew, ...{price_range: data.price_range}};\r\n  }\r\n  if (!Validator.isBlank(data.bed_room_number) && (!Validator.isBlank(data.bed_room_number.max) || !Validator.isBlank(data.bed_room_number.min))) {\r\n    dataQueryNew = {...dataQueryNew, ...{bed_room_number: data.bed_room_number}};\r\n  }\r\n  if (!Validator.isBlank(data.sort_by)) {\r\n    if (!Validator.isBlank(data.sort_by.time) && data.sort_by.time === \"newest\") {\r\n    } else {\r\n      dataQueryNew = {...dataQueryNew, ...{sort_by: data.sort_by}};\r\n    }\r\n  }\r\n  return dataQueryNew;\r\n};\r\n\r\nconst processQueryFromData =  (data: DataLayeredNavigationProps, typePage: string) => {\r\n  let dataQueryNew = {};\r\n  if (!Validator.isBlank(data.title)) {\r\n    dataQueryNew = {...dataQueryNew, ...{title: data.title}};\r\n  }\r\n  if (!Validator.isBlank(data.name)) {\r\n    dataQueryNew = {...dataQueryNew, ...{name: data.name}};\r\n  }\r\n  if (!Validator.isBlank(data.page) && data.page !== 1) {\r\n    dataQueryNew = {...dataQueryNew, ...{page: data.page}};\r\n  }\r\n  if (!Validator.isBlank(data.limit) && data.limit !== 48) {\r\n    dataQueryNew = {...dataQueryNew, ...{limit: data.limit}};\r\n  }\r\n  if (!Validator.isBlank(data.home_direction)) {\r\n    dataQueryNew = {...dataQueryNew, ...{home_direction: data.home_direction}};\r\n  }\r\n  if (!Validator.isBlank(data.area_range) && (!Validator.isBlank(data.area_range.max) || !Validator.isBlank(data.area_range.min))) {\r\n    let areaRangeString = JSON.stringify(data.area_range);\r\n    dataQueryNew = {...dataQueryNew, ...{area_range: areaRangeString}};\r\n  }\r\n  if (!Validator.isBlank(data.price_range) && (!Validator.isBlank(data.price_range.max) || !Validator.isBlank(data.price_range.min))) {\r\n    let areaRangeString = JSON.stringify(data.price_range);\r\n    dataQueryNew = {...dataQueryNew, ...{price_range: areaRangeString}};\r\n  }\r\n  if (!Validator.isBlank(data.bed_room_number) && (!Validator.isBlank(data.bed_room_number.max) || !Validator.isBlank(data.bed_room_number.min))) {\r\n    let areaRangeString = JSON.stringify(data.bed_room_number);\r\n    dataQueryNew = {...dataQueryNew, ...{bed_room_number: areaRangeString}};\r\n  }\r\n  if (!Validator.isBlank(data.sort_by)) {\r\n    if (!Validator.isBlank(data.sort_by.time) && data.sort_by.time === \"newest\") {\r\n    } else {\r\n      let sortByString = JSON.stringify(data.sort_by);\r\n      dataQueryNew = {...dataQueryNew, ...{sort_by: sortByString}};\r\n    }\r\n  }\r\n  return  QueryString.stringify(dataQueryNew, {arrayFormat: 'bracket'});\r\n};\r\nexport default {\r\n  processQueryUrl: processQueryFromData,\r\n  processQueryString\r\n}\r\n"]},"metadata":{},"sourceType":"module"}